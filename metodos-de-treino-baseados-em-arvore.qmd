```{=html}
<style>
.red-text {
  color: red;
}
.blue-text {
  color: blue;
}
</style>
```
# Métodos de Treino Baseados em Árvore

Neste capítulo será estudado de forma mais aprofundada modelos de treinamento baseados em árvores, os quais são simples para interpretação, como: árvores de decisão e regressão, florestas aleatórias, adaboost, entre outros. O objetivo é entender o funcionamento dos mesmos, assim como os critérios que utilizam para classificarem as amostras.

É importante deixar claro que para utilizarmos esses métodos podemos usar tanto dados numéricos quanto categóricos. Além disso, não é necessário padronizar os dados.

## Árvores de Decisão

Uma árvore de decisão, em geral, pergunta uma questão e classifica o elemento baseado na resposta. Ela utiliza os dados de cada indivíduo para criar uma regra de separação, que posteriormente será utilizada para rotular novas amostras.

As árvores de decisão podem ser aplicadas aos problemas de regressão e classificação. Primeiro vamos considerar os problemas de classificação, e depois passamos para a regressão.

## em Classificação

Vejamos a seguir um exemplo de árvore de decisão para um problema de classificação.

![](images/Ex_Arvores.png){fig-align="center"}

**Nomenclatura**:

-   **Nó Raiz ou Raiz**: é a variável que se encontra no topo da árvore;
-   **Nós Internos ou Nós**: são as variáveis intermediárias, que possuem tanto setas apontandas para elas como saindo delas;
-   **Nós Folhas ou Nós Terminais ou Folhas**: possuem apenas setas apontadas para elas. Representam a decisão final da árvore.

![](images/Nomenclatura_Arvore.png){fig-align="center"}

No processo de construção de uma árvore de decisão é importante ressaltar que a separação dos dados deve envolver apenas duas respostas: "Sim" ou "Não". Também é preciso definir a ordem das variáveis, como a variável com que se deve começar, qual deve ser a seguinte, e assim por diante. A solução para isso é obtida através do nível de **impureza** das variáveis.

Dizemos que uma variável é **impura** quando ela não consegue separar bem os dados em uma árvore de decisão. Para calcularmos a impureza de uma variável utilizamos o **indíce Gini**, que varia entre 0 (mais puro possível) e 0,5 (mais impuro possível). Primeiramente calculamos o índice Gini para cada nó da variável, e em seguida obtemos o índice Gini da variável como uma média ponderada. O índice Gini de um nó é obtido por:

Gini(nó) = 1 - $p_{S}^2$ - $p_{N}^2$, onde $p_{S^2}$ é a proporção de "sim" da resposta da variável de interesse e $p_{N}$ a proporção de "não" da resposta da variável de interesse.

O **índice Gini** da variável é dado pela média do índice Gini para os nós referentes às respostas "Sim" e "Não" ponderada pela proporção dos elementos em cada nó.

Gini(variável) = Gini(nó$_1$) $\times$ $P_1$ + Gini(nó$_2$) $\times$ $P_2$

```{r warning=FALSE, message=FALSE}
base = readRDS("SmallHeart.rds")
head(base)
```

Nosso objetivo é prever se um indivíduo tem ou não uma doença cardíaca (variável "HeartDisease"), baseado nas outras variáveis. As variáveis explicativas são as seguintes:

-   Sex: indica o sexo do indivíduo, onde "M" = Masculino e "F" = Feminino;
-   ChestPain: referente ao indivíduo sentir dor no peito, onde "typical" = típico e "nontypical" = não típico;
-   Thal: indica se o indivíduo possui Talassemia, onde "normal" = não possui, "fixed" = talassemia irreversível e "reversable" = talassemia reversível.

Vamos verificar o quão bem as variáveis isoladamente são capazes de prever se o paciente possui ou não doença cardíaca. Vamos começar pela variável "Sex".

```{r warning=FALSE, message=FALSE}
summary(base$Sex)
```

Note que temos 22 indivíduos do sexo feminino e 50 indivíduos do sexo masculino. Como a resposta de um nó da árvore deve ser "Sim" ou "Não", vamos utilizar a variável "Sex=M".

```{r message=FALSE, warning=FALSE}
library(dplyr)
```

```{r warning=FALSE, message=FALSE}
# Verificando quantos indivíduos possuem doença cardíaca de acordo com o sexo:

base %>% group_by(Sex, HeartDisease) %>% summarise(N=n())
```

Então a variável "Sex=M" separa os pacientes da seguinte forma:

![](images/Arvore_Sex.png){fig-align="center"}

Note que a maioria dos pacientes com doença cardíaca terminaram na folha referente ao sexo masculino, mas a maioria dos que não possuem doença também. Já podemos ter uma ideia que essa variável não é tão boa em separar os dados, mas para averiguarmos essa hipótese vamos calcular o índice gini dela.

Primeiramente vamos calcular o índice Gini do nó "Sex = M Sim":

$Gini(Sex = M Sim)$ = 1 - $\left(\frac{14}{50}\right)^2$ - $\left(\frac{36}{50}\right)^2$ = $0,403$

Agora vamos calcular o índice Gini do nó "Sex = M Não":

$Gini(Sex = M Não)$ = 1 - $\left(\frac{2}{22}\right)^2$ - $\left(\frac{20}{22}\right)^2$ = $0,166$

O índice Gini da variável "Sex = M" é dado pela média do índice Gini dos nós referentes às respostas "Sim" e "Não" ponderada pela frequência dos indivíduos em cada nó.

$Gini(Sex = M)$ = $0,403$ $\times$ $\left(\frac{50}{72}\right)$ + $0,166$ $\times$ $\left(\frac{22}{72}\right)$ = $0,331$

Como o índice Gini da variável "Sex = M" ficou mais próximo de 0,5 do que de 0, podemos constatar que ela é uma variável com baixa pureza. Note que se tivéssemos escolhido a variável "Sex = F" o índice Gini obtido seria o mesmo, pois "Sex = F Sim" é equivalente a "Sex = M Não" e "Sex = F Não" é equivalente a "Sex = M Sim". ou seja, as contas seriam as mesmas.

Agora vamos realizar o mesmo processo para a variável "ChestPain", ou seja, vamos verificar o quão bem ela é capaz de prever se o paciente possui doença cardíaca.

```{r warning=FALSE, message=FALSE}
base %>% group_by(ChestPain) %>% summarise(N=n())
```

Note que temos 23 indivíduos que sentem dor no peito tipicamente e 49 indivíduos que não sentem tipicamente. Vamos verificar quantos deles possuem doença cardíaca:

```{r warning=FALSE, message=FALSE}
base %>% group_by(ChestPain, HeartDisease) %>% summarise(N=n())
```

Vamos considerar a variável "ChestPain = Typical". Ela separa os dados da seguinte forma:

![](images/Arvore_Chest.png){fig-align="center"}

Note que quase metade dos pacientes que possuem dor no peito têm doença cardíaca. Dos que não sentem a dor no peito, quase $\frac{1}{4}$ apenas possui a doença.

Vamos calcular o índice Gini do nó "ChestPain = Typical Sim":

$Gini(ChestPain = Typical Sim)$ = 1 - $\left(\frac{7}{23}\right)^2$ - $\left(\frac{16}{23}\right)^2$ = $0,423$

Agora vamos calcular o índice Gini do nó "ChestPain = Typical Não":

$Gini(ChestPain = Typical Não)$ = 1 - $\left(\frac{9}{49}\right)^2$ - $\left(\frac{40}{49}\right)^2$ = $0,299$

O índice Gini da variável "ChestPain = Typical" é dado pela média do índice Gini dos nós referentes às respostas "Sim" e "Não" ponderada pela frequência dos indivíduos em cada nó.

$Gini(Sex = M)$ = $0,423$ $\times$ $\left(\frac{23}{72}\right)$ + $0,299$ $\times$ $\left(\frac{49}{72}\right)$ = $0,339$

Note que ela obteve um índice Gini um pouco maior do que a variável "Sex = M". Isso indica que a variável "Sex = M" é mais pura do que a variável "ChestPain = Typical".

Agora falta apenas obter o índice Gini da variável "Thal". Mas diferentemente das outras 2 ela não possui apenas 2 níveis, e sim 3: "normal", "fixed" e "reversable".

```{r warning=FALSE, message=FALSE}
base %>% group_by(Thal) %>% summarise(N=n())
```

Nesse caso vamos ter que calcular o índice Gini para todas as combinações possíveis: "Thal = normal", "Thal = fixed", "Thal = reversable", "Thal = normal ou fixed", "Thal = normal ou reversable", "Thal = fixed ou reversable". Porém note que o índice Gini da variável "Thal = normal" é equivalente ao da variável "Thal = fixed ou reversable", pois "Thal = normal Sim" é o mesmo que "Thal = fixed ou reversable Não". Da mesma forma isso vale para as variáveis "Thal = fixed" e "Thal = normal ou reversable", e "Thal = reversable" e "Thal = normal ou fixed". Com isso conseguimos economizar algumas contas.

```{r warning=FALSE, message=FALSE}
base %>% group_by(Thal, HeartDisease) %>% summarise(N=n())
```

Vamos, primeiramente, olhar para a variável "Thal = normal". Ela separa os dados da seguinte forma:

![](images/Arvore_Thal_normal.png){fig-align="center"}

Note que a maioria dos pacientes que possuem doença cardíaca estão no grupo dos que possuem "Thal = normal".

Vamos calcular o índice Gini do nó "Thal = Normal Sim":

$Gini(Thal = Normal Sim)$ = 1 - $\left(\frac{8}{52}\right)^2$ - $\left(\frac{44}{52}\right)^2$ = $0,260$

Agora vamos calcular o índice Gini do nó "Thal = Normal Não":

$Gini(Thal = Normal Não)$ = 1 - $\left(\frac{8}{20}\right)^2$ - $\left(\frac{12}{20}\right)^2$ = $0,480$

Então o índice Gini da variável "Thal = Normal" fica da seguinte forma:

$Gini(Thal = Normal)$ = $0,260$ $\times$ $\left(\frac{52}{70}\right)$ + $0,480$ $\times$ $\left(\frac{20}{72}\right)$ = $0,321$

Agora vamos olhar para a variável "Thal = Fixed". Ela separa os dados da seguinte forma:

![](images/Arvore_Thal_fixed.png){fig-align="center"}

Vamos calcular o índice Gini do nó "Thal = Fixed Sim":

$Gini(Thal = Fixed Sim)$ = 1 - $\left(\frac{1}{4}\right)^2$ - $\left(\frac{3}{4}\right)^2$ = $0,375$

Agora vamos calcular o índice Gini do nó "Thal = Fixed Não":

$Gini(Thal = Fixed Não)$ = 1 - $\left(\frac{15}{68}\right)^2$ - $\left(\frac{53}{68}\right)^2$ = $0,344$

Então o índice Gini da variável "Thal = Fixed" fica da seguinte forma:

$Gini(Thal = Fixed)$ = $0,375$ $\times$ $\left(\frac{4}{72}\right)$ + $0,344$ $\times$ $\left(\frac{68}{72}\right)$ = $0,346$

Por último, vamos olhar para a variável "Thal = Reversable".

![](images/Arvore_Thal_reversable.png){fig-align="center"}

Vamos calcular o índice Gini do nó "Thal = Reversable Sim":

$Gini(Thal = Reversable Sim)$ = 1 - $\left(\frac{7}{16}\right)^2$ - $\left(\frac{9}{16}\right)^2$ = $0,492$

Agora vamos calcular o índice Gini do nó "Thal = Reversable Não":

$Gini(Thal = Reversable Não)$ = 1 - $\left(\frac{9}{56}\right)^2$ - $\left(\frac{47}{56}\right)^2$ = $0,269$

Então o índice Gini da variável "Thal = Reversable" fica da seguinte forma:

$Gini(Thal = Reversable)$ = $0,492$ $\times$ $\left(\frac{16}{72}\right)$ + $0,269$ $\times$ $\left(\frac{56}{72}\right)$ = $0,319$

Resumindo, os índices Ginis de todas as variáveis são:

| **Variáveis**       | **Índice Gini** |
|---------------------|-----------------|
| Sex = M             | 0,331           |
| ChestPain = Typical | 0,339           |
| Thal = Normal       | 0,321           |
| Thal = Fixed        | 0,346           |
| Thal = Reversable   | 0,319           |

A variável "Thal = Reversable" é a que possui o menor índice Gini, portanto ela é a mais pura. Ela ficará no topo da árvore de decisão, ou seja, será o nó raiz.

![](images/Raiz_Arvore_Final.png){fig-align="center"}

O próximo passo é definir as variáveis que ficarão no nó "Thal = Reversable Sim" e "Thal = Reversable Não". Para isso temos que olhar para a base de dados com os indivíduos do grupo "Thal = Reversable Sim" e "Thal = Reversable Não", respectivamente.

```{r warning=FALSE, message=FALSE}
# Grupo de indivíduos "Thal = Reversable Sim":
base1 = base %>% filter(Thal == "reversable")
head(base1)
```

Agora temos que calcular o índice Gini para todas as variáveis referentes a esse grupo. A que for mais pura entrará no nó "Thal = Reversable Sim". Poupando os cálculos, vamos obter que o menor índice Gini é o da variável "ChestPain = Typical".

```{r warning=FALSE, message=FALSE}
# Grupo de indivíduos "Thal = Reversable Não":
base2 = base %>% filter(Thal != "reversable")
head(base2)
```

Agora calculamos também o índice Gini para todas as variáveis referentes a esse grupo. Após os cálculos necessários veremos que o menor índice Gini é o da variável "ChestPain = Nontypical".

Dessa forma, podemos dar continuidade a nossa árvore.

![](images/Arvore_de_Decisao_Final.png){fig-align="center"}

Após obtidos esses novos nós, o processo continua se repetindo, obtendo novos nós e/ou folhas para a árvore, até a construção chegar ao fim.

Pergunta: quando o processo de construção de uma árvore chega ao fim? O processo de construção pode terminar por 3 fatores:

-   Quando a pureza do nó é maior do que o de qualquer variável que adicionamos;
-   Quando atingimos folhas 100% puras (índice Gini = 0);
-   Quando o ganho ao aumentar a árvore é muito pequeno.

O ganho ao aumentar a árvore pode ser resumido como um conjunto de atributos presentes na árvore que retornem o maior ganho de informações. Essa questão será melhor abordada posteriormente, juntamente com a questão de como podar as árvores (que está intimamente relacionada ao ganho) no subcapítulo \[XGBoost\].

## Em Regressão

Agora iremos discutir o processo de construção de uma árvore de regressão. Em uma árvore de regressão, diferentemente de uma árvore para classificação, cada folha possui um valor numérico (ao invés de categorias como "Sim" ou "Não", como no exemplo anterior da base SmallHeart). Vejamos a seguir um exemplo de árvore de decisão para um problema de regressão.

![](images/Ex_Arvore_Reg-01.png){fig-align="center"}

Esse valor numérico presente nas folhas não é nada menos que a média do valor da variável de interesse a ser prevista para os elementos que satisfazem a condição do nó. Por exemplo, na árvore de regressão acima a primeira folha dá como resultado uma eficácia de 5%: essa foi a média observada da eficácia do medicamento em pacientes com mais de 50 anos de idade. Para a segunda folha, a com eficácia de 20%: esse valor é a média da eficácia do medicamento em um indivíduo com menos de 50 anos de idade e que toma uma dosagem maior do que 29mg foi de 20%. O processo é o mesmo para as outras folhas.

A grande pergunta é qual valor colocar no nó como condição. Para exemplificar como funciona o processo, vamos começar com um exemplo simples:

**Ex.:** Vamos carregar o banco de dados "SmallAdvertising". Este banco possui informações sobre as vendas de um produto em 10 mercados diferentes (variável sales), além de orçamentos de publicidade para esse produto em cada um dos mercados para três mídias diferentes: TV, rádio e jornal (variáveis TV, radio e newspaper, respectivamente).

```{r warning=FALSE, message=FALSE}
vendas = readRDS("SmallAdvertising.rds")

vendas
```

Vamos considerar o caso em que queremos construir uma árvore de regressão para prever as vendas baseados apenas na variável TV.

```{r warning=FALSE, message=FALSE}
plot(vendas$TV, vendas$sales, pch = 19,
     xlab = "Orçamento de Publicidade do Produto para a TV",
     ylab = "Vendas do Produto",
     main = "Vendas do produto x Publicidade para a TV")
```

Primeiramente é preciso definir qual valor irá entrar como condição no primeiro nó. O algoritmo realiza isso testando todos os possíveis valores de separação para os dados, e pega o que minimiza a soma dos quadrados dos resíduos. Inicialmente, como o primeiro separador, ele considera a média dos 2 menores valores da Publicidade.

```{r warning=FALSE, message=FALSE}
ordenados = sort(vendas$TV)
mean(ordenados[1:2])
```

Então 44,95 é o primeiro valor a ser testado para a separação dos dados.

```{r warning=FALSE, message=FALSE}
plot(vendas$TV, vendas$sales, pch = 19,
     xlab = "Orçamento de Publicidade do Produto para a TV",
     ylab = "Vendas do Produto",
     main = "Vendas do produto x Publicidade para a TV"); abline(v = 44.95,
                                                                 col = "red")
```

Assim, o primeiro nó será da seguinte forma:

![](images/ArvReg1-01.png){fig-align="center"}

Para a resposta "sim" prevemos que as vendas do produto será de 9,2, o qual é o resultado da média dos valores das vendas para todos os produtos cuja publicidade foi menor do que 44,95 (ou seja, é apenas o valor do primeiro elemento). Para a resposta "Não", então a folha seguinte contém o resultado da média dos valores das vendas para todos os produtos cuja publicidade foi maior do que 44,95, o qual é de 15,05.

Note que fazendo isso teremos resíduos (diferença do valor original e do valor predito pela árvore) muito grandes. O algoritmo eleva esses resíduos ao quadrado e os soma. Esse valor é a soma dos quadrados dos resíduos considerando o nó "Publicidade para a TV \< 44,95?".

Em seguida ele irá para o próximo separador: a média do segundo e do terceiro menores pontos.

```{r warning=FALSE, message=FALSE}
mean(ordenados[2:3])
```

Então 66,95 é o segundo valor a ser testado para a separação dos dados.

```{r warning=FALSE, message=FALSE}
plot(vendas$TV, vendas$sales, pch = 19,
     xlab = "Orçamento de Publicidade do Produto para a TV",
     ylab = "Vendas do Produto",
     main = "Vendas do produto x Publicidade para a TV"); abline(v = 66.95,
                                                                 col = "red")
```

Então o nó considerado será da forma "Publicidade para a TV \< 66,95?".

![](images/ArvReg2.png){fig-align="center"}

O valor de 8,9 corresponde ao resultado da média dos valores das vendas para todos os produtos cuja publicidade foi menor do que 66,95. Então a árvore prevê esse valor de vendas para o produto que obteve uma publicidade para a TV \< 66,95. O valor de 15,77 é o resultado da média dos valores das vendas para todos os produtos cuja publicidade foi maior do que 66,95. Novamente serão obtidos os resíduos dessa predição e eles serão somados.

Então o algoritmo irá para o próximo separador e irá calcular a soma dos quadrados dos resíduos da predição. Isso ocorre sucessivamente até acabarem todos os separadores possíveis para a árvore. O separador vencedor (aquele que irá para o nó raiz) é aquele com a menor soma dos quadrados dos resíduos.

A construção dos próximos nós se dá pela mesma forma que a do nó raiz. O processo de construção da árvore termina quando:

-   Atingimos um número mínimo de observações em uma folha (usualmente é utilizado 20 observações). Não continuamos a divisão após esse número mínimo pois corremos o risco de criar uma árvore sobreajustada à amostra dada;

-   Quando o ganho ao aumentar a árvore é muito pequeno.

Agora vamos para o caso em que tenhamos mais de uma variável preditiva nos dados. Vamos considerar agora que queremos prever as vendas do produto baseado em seus orçamentos de publicidade para TV, rádio e jornal.

Assim como anteriormente, começamos usando o orçamento para a TV para prever as vendas, e pegamos o separador com a menor soma dos quadrados dos resíduos. O melhor separador se torna um candidato para a raiz da árvore. Em seguida, focamos em utilizar o orçamento para o rádio para prever as vendas. Assim como com o orçamento para a TV, tentamos diferentes separadores para a predição e calculamos a soma dos quadrados dos resíduos em cada passo. O melhor separador se torna outro candidato para a raiz. Por último, utilizamos o orçamento para o jornal para prever as vendas, e após tentarmos diferentes separadores pegamos aquele com a menor soma dos quadrados dos resíduos também. Então comparamos a soma dos quadrados dos resíduos de todos os candidatos para a raiz, e o escolhido, novamente, é aquele com a menor soma.

Para os próximos nós o processo de construção também é equivalente ao anterior, exceto que agora nós comparamos a menor soma dos quadrados dos resíduos de cada preditor. E, novamente, quando uma folha atinge um número mínimo de observações, a árvore é finalizada.

### Construindo árvores com o [rpart]{.red-text} e [rpart.plot]{.red-text}

Vamos construir árvores com o comando rpart(). Como argumento da função nós passamos:

-   A variável de interesse a ser prevista em função das variáveis preditoras;
-   A base de dados onde as variáveis se encontram.

Vamos utilizar a base de dados referentes ao primeiro exemplo dado de construção de uma árvore, onde queríamos prever se um indivíduo possui doença cardíaca baseado em características dele.

```{r warning=FALSE, message=FALSE}
library(rpart)
heart_arvore = rpart(HeartDisease~., data = base)
```

Agora vamos plotar a árvore com o comando rpart.plot().

```{r warning=FALSE, message=FALSE}
library(rpart.plot)
rpart.plot(heart_arvore)
```

Observe que a árvore ficou "vazia". O que ela quer dizer com isso é: assuma "Não" sempre para o indivíduo possuir doença cardíaca, e acerte com precisão de 78%. Isso ocorre devido aos valores iniciais do comando rpart.control(), que ajusta os parâmetros da função rpart(). Os principais parâmetros do rpart.control são:

-   minsplit: o número mínimo de observações que devem existir em um nó para que uma divisão seja tentada. Padrão: minsplit = 20;

-   minbucket: o número mínimo de observações em qualquer folha. Padrão: minbucket = minsplit/3;

-   cp (complexity parameter): o mínimo de ganho de ajuste que devemos ter em cada divisão. O principal papel desse parâmetro é economizar tempo de computação removendo as divisões que não valem a pena. Padrão: cp = 0,01;

-   maxdepth: profundidade máxima da árvore (a profundidade da raiz é zero). Não pode ser maior que 30.

**Ex. 1:** Vamos ajustar os parâmetros da árvore e construí-la novamente. Vamos determinar que a profundidade da árvore seja 2, que 0 seja o número mínimo de observações em um nó e que ela seja construída mesmo que não haja ganhos em mais divisões.

```{r warning=FALSE, message=FALSE}
controle = rpart.control(minsplit=0, cp = -1, maxdepth = 2)
heart_arvore = rpart(HeartDisease~., data = base, control = controle)
rpart.plot(heart_arvore)
```

Note que o nó raiz é exatamente aquele que calculamos como o mais puro, o "Thal = Reversable", que é equivalente a "Thal = Fixed ou Normal". Os nós adjacentes também foram o que obtivemos anteriormente como os mais puros.

Cada saída do comando rpart.plot() tem um significado específico:

1.  A primeira saída é a classe estimada pela árvore para as amostras que se encontram naquele nó.

![](images/rpart1.png){fig-align="center"}

2.  A segunda saída é a proporção de indivíduos na classe contrária àquela estimada na primeira saída.

3.  A terceira saída é a porcentagem da amostra que se encontra no atual nó.

![](images/rpart3.png){fig-align="center"}

**Ex. 2:** Vamos agora constuir a árvore mais completa possível, ou seja, uma árvore sobreajustada à amostra, sem restrições em sua profundidade máxima.

```{r warning=FALSE, message=FALSE}
controle = rpart.control(minsplit=0, cp = -1)
heart_arvore = rpart(HeartDisease~., data = base, control = controle)
rpart.plot(heart_arvore)
```

**Ex. 3:** Vamos agora considerar 10 como o número mínimo de observações em um nó e 3 como a profundidade máxima da árvore.

Agora podemos levantar a seguinte questão: como avaliar a precisão do modelo construído? Nesse exemplo nós utilizamos toda a amostra para construir a árvore, apenas para explicar o funcionamente do [rpart]{.red-text}, então não temos uma amostra teste para verificar o quão bom é o modelo. Então para isso teríamos que primeiramente dividir a amostra em treino e teste, depois criar o modelo com a amostra treino e em seguida aplicá-lo na amostra teste, e então, por último, poderíamos utilizar a função confusionMatrix() para obtermos não só a precisão como outras medidas avaliativas do modelo, além, é claro, da matriz de confusão. No tópico abaixo essas etapas serão construídas detalhadamente.

### Construindo árvores com [train]{.red-text}

Podemos utilizar árvores de decisão/regressão como um método de treinamento para os dados através da função train(). Vamos fazer isso utilizando a base de dados College. Este banco possui informações sobre 777 diferentes universidades e faculdades dos EUA. Ela apresenta algumas variáveis como: Apps - número de pedidos recebidos para ingresso, Room.Board - custos de acomodação e alimentação, Books - custos estimados de livros, PhD - quantidade de professores com doutorado, entre outras, e nossa variável de interesse Private, que indica se a universidade é privada ou pública.

```{r warning=FALSE, message=FALSE}
library(readr)
library(dplyr)
college = read_csv("College.csv")
college = college[,-1]
head(college)
```

Vamos, primeiramente, separar a amostra em treino e teste.

```{r warning=FALSE, message=FALSE}
library(caret)
set.seed(100)
noTreino = createDataPartition(y = college$Private, p = 0.7, list = F)
treino = college[noTreino,]
teste = college[-noTreino,]
```

Vamos treinar o modelo pelo método de árvores de decisão. Fazemos isso através do argumento "method = rpart" da função train().

```{r warning=FALSE, message=FALSE}
set.seed(100)
modelo = caret::train(Private~., method = "rpart", data = treino)
modelo
```

Observe que através do train() são testados alguns valores para o cp (complexity parameter) e é eleito aquele com a maior taxa de acurácia. Nesse caso, o cp utilizado será o de aproximadamente 0,0436. Vamos aplicar o modelo no conjunto teste.

```{r warning=FALSE, message=FALSE}
predicao = predict(modelo, teste)

# Transformando em fator para depois construirmos a matriz de confusão:
teste$Private = as.factor(teste$Private)

# Avaliando o modelo utilizando a matriz de confusão:
confusionMatrix(predicao, teste$Private)
```

Obtivemos uma acurácia de 0,8922, o que é razoável para um modelo que utiliza árvores.

```{r warning=FALSE, message=FALSE}
# Desenhando a árvore:
rpart.plot(modelo$finalModel)
```

A limitação de utilizar as árvores através do train() é que o único parâmetro da árvore que pode ser alterado é o cp (\*complexity parameter).

```{r warning=FALSE, message=FALSE}
modelLookup("rpart")
```

Para alterarmos o seu valor utilizamos o comando expand.grid().

```{r warning=FALSE, message=FALSE}
controle = expand.grid(.cp = 0.0001)
modelo = caret::train(Private~., method = "rpart", data = treino, tuneGrid = controle)
modelo
```

Note que com esse valor de cp a árvore fica mais profunda, pois estamos diminuindo o mínimo de ganho de ajuste que devemos ter em cada divisão.

```{r warning=FALSE, message=FALSE}
rpart.plot(modelo$finalModel)
```

## Florestas Aleatórias

As árvores de decisão possuem uma estrutura de fácil compreensão, o que faz com que ela seja bastante utilizada devido a sua boa aparência e interpretação intuitíva. Mas elas possuem uma limitação, o \[sobreajuste\], sendo assim, elas não são muito eficientes com novas amostras. O que fazer então?

As **Florestas Aleatórias** (*Random Forest*) se utilizam de várias árvores de decisão, combinando a simplicidade das árvores com a flexibilidade de um método sem sobreajuste, aumentando assim a precisão do preditor.

Vamos construir uma floresta aleatória usando a base de dados [balloons]{.red-text}.

```{r warning=FALSE, message=FALSE}
balloons = readr::read_csv("balloons.csv")
balloons$inflated = as.factor(balloons$inflated)
str(balloons)
```

Com base na cor do balão, o tamanho dele, se ele é elástico ou não e se quem o está enchendo é uma criança ou um adulto, queremos predizer se o balão vai encher ou não. Portanto, nossa variável de interesse é [Inflated]{.red-text} e queremos construir um classificador.

A primeira coisa que precisamos fazer é criar uma nova amostra do mesmo tamanho da original utilizando \[bootstrap\].

```{r warning=FALSE, message=FALSE}
set.seed(33)
boot1 = caret::createResample(y=balloons$inflated, times=1, list=F)
NovaAmostra1 = balloons[boot1,]
Out_of_bag = balloons[-boot1,]
```

Todas as observações que não forem sorteadas vão entrar no "Out-of-Bag". Temos 4 variáveis fora a de interesse, vamos sortear 2 variáveis para construir o primeiro nó da nossa árvore.

```{r warning=FALSE, message=FALSE}
set.seed(413)
sample(1:4, 2)
```

Vamos calcular o índice Gini para essas duas variáveis.

```{r}
#calculando o indice gini para a variável tamanho
table(NovaAmostra1$size, NovaAmostra1$inflated)
```

```{r warning=FALSE, message=FALSE}
(gini.size = (1-(7/14)^2-(7/14)^2)*(14/20) + (1-(4/6)^2-(2/6)^2)*(6/20))
```

```{r warning=FALSE, message=FALSE}
#calculando o indice gini para a variável idade
table(NovaAmostra1$age, NovaAmostra1$inflated)
```

```{r warning=FALSE, message=FALSE}
(gini.age = (1-(5/14)^2-(9/14)^2)*(14/20) + (1-(6/6)^2-(0/6)^2)*(6/20))
```

A variável idade tem um grau de impureza menor, então ela será a raiz da árvore.

![](images/floresta1.jpeg){fig-align="center"}

Agora das variáveis que ainda não foram usadas, sorteamos mais duas para continuar a árvore.

```{r warning=FALSE, message=FALSE}
set.seed(443)
sample(1:3, 2)
```

```{r warning=FALSE, message=FALSE}
library(dplyr)
NovaAmostra1 = filter(NovaAmostra1, age=="ADULT") 
#calculando o indice gini para a variável tamanho
table(NovaAmostra1$size, NovaAmostra1$inflated)
```

```{r warning=FALSE, message=FALSE}
(gini.size = (1-(4/11)^2-(7/11)^2)*(11/14) + (1-(1/3)^2-(2/3)^2)*(3/14))
```

```{r warning=FALSE, message=FALSE}
#calculando o indice gini para a variável act
table(NovaAmostra1$act, NovaAmostra1$inflated)
```

```{r warning=FALSE, message=FALSE}
(gini.act = (1-(5/5)^2-(0/5)^2)*(5/14) + (1-(0/9)^2-(9/9)^2)*(9/14))
```

Como a variável act tem o menor grau de impureza, ela será o próximo nó.

![](images/floresta2.jpeg){fig-align="center"}

Assim, temos nossa primeira árvore de decisão.

![](images/floresta3.jpeg){fig-align="center"}

A floresta aleatória pode ser utilizada tanto em classificadores como em regressores. A diferença é que em regressores, utilizamos árvores de regressão no lugar de árvores de classificação.

Em seguida vamos construir várias árvores da mesma maneira que a anterior. Para nosso exemplo vamos construir apenas 4 árvores, mas em geral vamos fazer bem mais que isso.

Temos então nossas 4 árvores construidas.

![](images/floresta4.jpeg){fig-align="center"}

![](images/floresta5.jpeg){fig-align="center"}

Para classificar uma nova amostra, devemos passar ela por todas as árvores construidas e rotular a amostra pela categoria resultada mais vezes.

O método de usar bootstrap para criar novas amostras e votos para a tomada de decisão é chamado de **Bagging** (*B*ootstrap+**agg**regate).

As observações de cada amostra que não entraram na construção de cada árvore estão contidas [Out of Bag]{.red-text}. Essas observações servirão para avaliar nosso preditor.

```{r warning=FALSE, message=FALSE}
Out_of_bag = balloons[c(2,4,12,13,15,18,20,
                        1,2,3,5,10,
                        2,4,12,13,15,18,20,
                        2,3,11,13,14,16,19),]
knitr::kable(Out_of_bag)
```

Para avaliar, é preciso passar cada uma das observações do [Out of Bag]{.red-text} por todas as árvores e a predição será feita por votos também. Ao fazer isso, observamos uma precisão de 86%.

A proporção de amostras do Out-of-bag que foram incorretamente classificadas é chamada *Out-of-bag-error*

Agora que sabemos avaliar o modelo, podemos comparar florestas aleatórias construídas com 2 variáveis com as construídas com 3 e outras diferentes configurações. Tipicamente, começamos usando o quadrado do número de variáveis da base e tentamos algumas quantidades abaixo e acima.

### Construindo uma floresta com o randomForest()

O pacote **randomForest** possui as ferramentas adequadas para a criação de uma floresta aleatória. Vamos construir uma floresta com 20 árvores utilizando a base [balloons]{.red-text}.

É importante observar se as váriaveis categóricas estão na classe de fatores.

```{r warning=FALSE, message=FALSE}
balloons = readr::read_csv("balloons.csv")
balloons = na.omit(balloons)
# tratando todas as variaveis 
balloons = dplyr::mutate_if(balloons, is.character, as.factor)
balloons$inflated = as.factor(balloons$inflated)
# construindo floresta com 20 arvores
library(randomForest)
set.seed(23)
modelo = randomForest(inflated ~ ., data=balloons, ntree=20)
```

Agora, vamos avaliar a precisão do modelo.

```{r warning=FALSE, message=FALSE}
# avaliando o modelo
modelo
```

Note que foram construídas 20 árvores utilizando 2 variáveis a cada vez. Essa quantidade de variáveis pode ser alterada usando o argumento **mtry=** dentro do randomForest.

Podemos ver que a precisão do nosso modelo é de 19/20, ou seja, 95%. Qual seria a precisão se fosse feito apenas uma árvore?

```{r warning=FALSE, message=FALSE}
balloons = readr::read_csv("balloons.csv")
# tratando todas as variaveis 
balloons = dplyr::mutate_if(balloons, is.character, as.factor)
balloons$inflated = as.factor(balloons$inflated)
# separando amostras teste/treino
set.seed(45)
inTrain = caret::createDataPartition(balloons$inflated,p=0.5,list=F)
treino = balloons[inTrain,]
teste = balloons[-inTrain,]
# treinando o modelo
controle = rpart::rpart.control(minsplit=0, cp = 0, maxdepth = 1)
set.seed(342)
modelo = rpart::rpart(inflated~., data=treino, control = controle)
# aplicando o modelo no teste
predicao = predict(modelo,teste, type="vector")
predicao = factor(predicao, labels = c(F, T))
# avaliando o erro na amostra treino
confusionMatrix(teste$inflated, predicao)
```

Note que nessa árvore, nosso modelo teve uma precisão de 80%. Bem menor do que o modelo de florestas.

Agora, observe que construimos uma floresta com 20 árvores. O que acontece com o erro do modelo conforme acrescentamos mais árvores?

Vamos avaliar o comportamento do erro conforme acrescentamos mais árvores à floresta. Para isso, utilizaremos a base de dados **spam** para melhor vizualização

```{r warning=FALSE, message=FALSE}
# chamando a base
library(kernlab)
data("spam")
# construindo floresta com 20 arvores
library(randomForest)
set.seed(23)
modelo = randomForest(type ~ ., data=spam, ntree=20)
```

```{r warning=FALSE, message=FALSE}
# observando o comportamento do erro em 20 árvores
erro_OOB <- data.frame(
  Arvores = rep(1:nrow(modelo$err.rate), times=2),
  Type = rep(c("spam", "nonspam"), each=nrow(modelo$err.rate)),
  Erro = c(modelo$err.rate[,"spam"], modelo$err.rate[,"nonspam"]))

ggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +
  geom_line(aes(color=Type),size=1.1) +
  scale_colour_discrete(name = "Tipo",
                         breaks = c("nonspam", "spam"),
                         labels = c("Não Spam", "Spam"))
```

```{r warning=FALSE, message=FALSE}
# construindo floresta com 50 arvores
set.seed(23)
modelo = randomForest(type ~ ., data=spam, ntree=50)
# observando o comportamento do erro em 50 árvores
erro_OOB <- data.frame(
  Arvores=rep(1:nrow(modelo$err.rate), times=2),
  Type=rep(c("spam", "nonspam"), each=nrow(modelo$err.rate)),
  Erro=c(modelo$err.rate[,"spam"],
          modelo$err.rate[,"nonspam"]))

ggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +
  geom_line(aes(color=Type),size=1.1)+
  scale_colour_discrete(name = "Tipo",
                         breaks = c("nonspam", "spam"),
                         labels = c("Não Spam", "Spam"))
```

```{r warning=FALSE, message=FALSE}
# construindo floresta com 100 arvores
set.seed(23)
modelo = randomForest(type ~ ., data=spam, ntree=100)
# observando o comportamento do erro em 100 árvores
erro_OOB <- data.frame(
  Arvores=rep(1:nrow(modelo$err.rate), times=2),
  Type=rep(c("spam", "nonspam"), each=nrow(modelo$err.rate)),
  Erro=c(modelo$err.rate[,"spam"],
          modelo$err.rate[,"nonspam"]))

ggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +
  geom_line(aes(color=Type),size=1.1)+
  scale_colour_discrete(name = "Tipo",
                         breaks = c("nonspam", "spam"),
                         labels = c("Não Spam", "Spam"))
```

```{r warning=FALSE, message=FALSE}
# construindo floresta com 1000 arvores
set.seed(23)
modelo = randomForest(type ~ ., data=spam, ntree=1000)
# observando o comportamento do erro em 1000 árvores
erro_OOB <- data.frame(
  Arvores=rep(1:nrow(modelo$err.rate), times=2),
  Type=rep(c("spam", "nonspam"), each=nrow(modelo$err.rate)),
  Erro=c(modelo$err.rate[,"spam"],
          modelo$err.rate[,"nonspam"]))

ggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +
  geom_line(aes(color=Type),size=1.1)+
  scale_colour_discrete(name = "Tipo",
                         breaks = c("nonspam", "spam"),
                         labels = c("Não Spam", "Spam"))
```

Repare que após uma certa quantidade de árvores, o erro se estabiliza. Sendo assim, não é necessário utilizar grandes quantidades de árvores em todos os casos. É preciso verificar até onde existe ganho.

### Construindo uma floresta com o [train()]{.red-text}

Também é possivel fazer florestas aleatórias usando a função [train]{.red-text} do pacote [caret]{.red-text}. Para isso, é necessário alterar o método de reamostragem para *out of bag* e o método para "rf" (*random forest*). Vamos utilizar a base [wine]{.red-text}, construiremos um regressor para predizer a variável [alcohol]{.red-text}.

```{r message=FALSE, warning=FALSE}
# alterando o metodo de reamostragem
controle = trainControl(method="oob")
# chamando a base
library(readr)
wine = read_csv("winequality-red.csv")
# construindo o modelo com 50 arvores
set.seed(534)
modelo = caret::train(alcohol ~ ., data=wine, method="rf", ntree=50, trControl=controle)
modelo
```

Note o valor "[mtry]{.red-text}" no modelo. Ele indica a quantidade de váriaveis da base que foram utilizadas para treinar o modelo. Repare que ele calcula a RMSE e $R^2$ para diferentes quantidades de variáveis usadas e utiliza no final a quantidade que possuir menor RMSE, no caso mtry=11. Caso queira fixar o número de variáveis usadas, basta usar o seguinte comando.

```{r warning=FALSE}
tng = expand.grid(.mtry=7)
modelo = caret::train(alcohol~., data=wine, method="rf", ntree=50, trControl=controle, tuneGrid=tng)
modelo
```

### *AdaBoost*

O método de treino AdaBoost se baseia na construção de uma floresta aleatória. Entretanto, na floresta construída por esse método as árvores possuem apenas um nó e duas folhas. Essas árvores são chamadas de tocos.

![](images/Floresta_AdaBoost-01.png){fig-align="center"}

Em geral, tocos não são muito bons em fazer classificações precisas, ou seja, eles são classificadores fracos. No entanto, o método AdaBoost os combina de forma a criar um bom aprendiz. Ele faz isso utilizando diferenciais na classificação e na construção das árvores que a floresta aleatória comum não utiliza:

-   Floresta Aleatória: cada árvore de decisão tem um peso igual na classificação final das amostras. Além disso, cada árvore é construída independentemente das outras.

-   AdaBoost: alguns tocos têm mais peso na classificação final do que outros, e a ordem de construção dos tocos importam. Em outras palavras, os erros que o primeito toco comete influenciam em como o segundo toco é construído, os erros que o segundo toco comete influenciam em como o terceiro toco é construído, e assim sucessivamente.

Vamos ver os detalhes práticos de como funciona o AdaBoost utilizando o banco de dados golf. Este banco possui informações sobre condições climáticas e se o indivíduo jogou golf no dia. A ideia é tentar prever se o indivíduo vai jogar golf baseado nas outras variáveis.

```{r}
golf = readRDS("Golf.rds")
golf
```

Primeiramente construímos um toco para cada uma das variáveis e calculamos seus respectivos índices Gini. Vamos começar com a variável Outlook.

```{r message=FALSE, warning=FALSE}
library(dplyr)
golf %>% group_by(Outlook, Play) %>% summarise(N=n())
```

Então temos que "Outlook = Overcast" separa os dados da seguinte forma:

![](images/AB_Overcast.png){fig-align="center"}

**Gini(Outlook = Overcast)** $= \frac{4}{14} \times \left[1 - (\frac{1}{14})^2 - (\frac{0}{14})^2 \right] + \frac{10}{14} \times \left[ 1 - (\frac{5}{10})^2 - (\frac{5}{10})^2 \right] = 0,357$

Vamos agora olhar para "Outlook = Rain":

![](images/AB_Rain.png){fig-align="center"}

**Gini(Outlook = Rain)** $= \frac{5}{14} \times \left[1 - (\frac{3}{5})^2 - (\frac{2}{5})^2 \right] + \frac{9}{14} \times \left[ 1 - (\frac{6}{9})^2 - (\frac{3}{9})^2 \right] = 0,457$

![](images/AB_Sunny.png){fig-align="center"}

Agora vamos para a variável Humidity.

```{r warning=FALSE, message=FALSE}
golf %>% group_by(Humidity, Play) %>% summarise(N=n())
```

Temos que "Humidity = High" separa os dados da seguinte forma:

![](images/AB_High.png){fig-align="center"}

**Gini(Humidity = High)** $= \frac{7}{14} \times \left[1 - (\frac{3}{7})^2 - (\frac{4}{7})^2 \right] + \frac{7}{14} \times \left[ 1 - (\frac{6}{7})^2 - (\frac{1}{7})^2 \right] = 0,367$

Por último, a variável Wind:

```{r warning=FALSE, message=FALSE}
golf %>% group_by(Wind, Play) %>% summarise(N=n())
```

![](images/AB_Wind.png){fig-align="center"}

**Gini(Wind = Strong)** $= \frac{6}{14} \times \left[1 - (\frac{3}{6})^2 - (\frac{3}{6})^2 \right] + \frac{8}{14} \times \left[ 1 - (\frac{6}{8})^2 - (\frac{2}{8})^2 \right] = 0,429$

Logo, os índices Gini calculados foram:

| Variáveis          | Índice Gini |
|--------------------|-------------|
| Outlook = Overcast | 0,357       |
| Outlook = Rain     | 0,457       |
| Outlook = Sunny    | 0,394       |
| Humidity = High    | 0,367       |
| Wind = Strong      | 0,429       |

Selecionamos a variável com o menor índice Gini para ser o primeiro toco da floresta. Nesse caso, o menor índice Gini é o da variável "Outlook = Overcast".

![](images/AB_toco.png){fig-align="center"}

Agora precisamos calcular o peso desse toco na classificação final. Para isso, vamos calcular seu erro total.

O erro total de um toco é calculado pelo número de amostras classificadas erradas dividido pelo total de amostras.

![](images/AB_toco2.png){fig-align="center"}

Para esse toco houve 5 amostras classificadas erradas em um total de 14. Logo,

::: {style="text-align: center;"}
**Erro Total** $= \frac{5}{14}$
:::

Dessa forma podemos calcular o *Amount of Say* do toco, que será seu peso na classificação final.

**Amount of Say** $= \frac{1}{2} \times log \left( \frac{1-\frac{5}{14}}{\frac{5}{14}} \right) = 0,29$

Então 0,29 é o seu peso na classificação final.

Agora vamos construir o próximo toco. Para isso damos um peso maior para as amostras que foram classificadas erroneamente no toco anterior. Essas amostras foram as seguintes:

```{r}
golf %>% filter(Outlook != "Overcast" & Play != "No")
```

Então, para rebalancearmos os pesos das amostras classificadas de forma certa e errada, utilizamos as seguintes fórmulas:

**Peso Amostras Erradas** $=$ **Erro Total** $\times$ $e^{Amount of Say}$

**Peso Amostras Corretas** $=$ **Erro Total** $\times$ $e^{-Amount of Say}$

Assim, para o segundo toco, os pesos serão:

**Peso Amostras Erradas** $= \frac{5}{14} \times e^{0,29} = 0,477$

**Peso Amostras Erradas** $= \frac{5}{14} \times e^{-0,29} = 0,267$

Então temos os pesos para as amostras:

![](images/tabela_adaboost.png){fig-align="center"}

A soma dos pesos das amostras deve ser 1, mas isso não ocorre: note que a soma resulta em 4,788. Dessa forma, precisamos reescalar os pesos. Faremos isso dividindo cada um deles por 4,788.

Feito isso, temos uma nova tabela de pesos:

![](images/tabela_adaboost2.png){fig-align="center"}














