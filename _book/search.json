[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "APRENDIZADO DE MÁQUINA COM R",
    "section": "",
    "text": "Bem-vindo\nEste curso tem como objetivo propagar as ideias básicas de aprendizado de máquina e previsão no *software* estatístico R. A ideia principal é cobrir as técnicas mais usadas como regressão linear, árvores de decisão, e também detalhes básicos e aspectos práticos do aprendizado de máquina. Inicialmente será utilizado alguns códigos básicos do R para alguns modelos de previsão. Contudo, o foco principal será no pacote caret, o qual tem a finalidade de tornar as técnicas de aprendizado mais simples, combinando um grande número de preditores que foram construídos no R."
  },
  {
    "objectID": "index.html#pré-requisitos",
    "href": "index.html#pré-requisitos",
    "title": "APRENDIZADO DE MÁQUINA COM R",
    "section": "Pré-requisitos",
    "text": "Pré-requisitos\nOs pré-requisitos que serão úteis para o curso são: análise exploratória de dados no R, programação básica em R e conhecimentos teóricos básicos sobre modelos de regressão."
  },
  {
    "objectID": "intro.html#o-que-é-o-aprendizado-de-máquina",
    "href": "intro.html#o-que-é-o-aprendizado-de-máquina",
    "title": "Introdução",
    "section": "O que é o Aprendizado de Máquina?",
    "text": "O que é o Aprendizado de Máquina?\nEm 1959, Arthur Samuel definiu o aprendizado de máquina como o “campo de estudo que dá aos computadores a habilidade de aprender sem serem explicitamente programados”. Ou seja, é um método de análise de dados que automatiza a construção de modelos analíticos. É baseado na ideia de que sistemas podem aprender com dados, identificar padrões e tomar decisões com o mínimo de intervenção humana. A importância desse aprendizado se deve principalmente ao fato de que atualmente tem surgido cada vez mais a necessidade de manipulações de grandes volumes e variedades de dados disponíveis."
  },
  {
    "objectID": "intro.html#para-que-serve",
    "href": "intro.html#para-que-serve",
    "title": "Introdução",
    "section": "Para que serve?",
    "text": "Para que serve?\nCom o aprendizado de máquina é possível produzir, rápida e automaticamente, modelos capazes de analisar dados maiores e mais complexos, e entregar resultados mais rápidos e precisos – mesmo em grande escala."
  },
  {
    "objectID": "intro.html#onde-é-usado",
    "href": "intro.html#onde-é-usado",
    "title": "Introdução",
    "section": "Onde é usado?",
    "text": "Onde é usado?\nAo construir modelos precisos há mais chances de identificar boas oportunidades e de evitar riscos desconhecidos. Na prática, podemos citar alguns exemplos reais do uso de aprendizado de máquina:\n\nOs governos locais podem tentar prever os pagamentos de pensão no futuro para que eles saibam se seus mecanismos de geração de receita têm fundos suficientes gerados para cobrir esses pagamentos de pensão.\nO Google pode querer prever se você vai clicar em um anúncio para que ele possa mostrar apenas os anúncios com maior probabilidade de receber cliques e, assim, aumentar a receita.\nA Amazon, a Netflix e outras empresas como essa mostram um filme e querem que você veja um próximo filme. Para fazer isso, eles querem mostrar a você o que você pode estar interessado, para que eles possam mantê-lo assistindo e, novamente, aumentar a receita.\nAs seguradoras empregam grandes grupos de atuários e estatísticos para tentar prever seu risco de todo tipo de coisas diferentes, como por exemplo a morte."
  },
  {
    "objectID": "intro.html#como-funciona",
    "href": "intro.html#como-funciona",
    "title": "Introdução",
    "section": "Como funciona?",
    "text": "Como funciona?\nA funcionalidade do aprendizado de máquina se resume a tentar prever um certo modelo para o conjunto de dados em questão. Há dois modos de isso ser feito: pelo aprendizado supervisionado e pelo aprendizado não supervisionado. Veremos a definição de cada um deles a seguir."
  },
  {
    "objectID": "tipos-am.html#aprendizado-não-supervisionado",
    "href": "tipos-am.html#aprendizado-não-supervisionado",
    "title": "Tipos de Aprendizado de Máquina",
    "section": "Aprendizado não supervisionado",
    "text": "Aprendizado não supervisionado\nNa aprendizagem não supervisionada, temos um conjunto de dados não rotulados e queremos de alguma forma agrupá-los por um certo padrão encontrado. Vejamos alguns exemplos:\n\nExemplo 1: Dada uma imagem de homem/mulher, temos de prever sua idade com base em dados da imagem.\nExemplo 2: Dada as informações sobre que músicas uma pessoa costuma ouvir, sugerir outras que possam agradá-la também."
  },
  {
    "objectID": "tipos-am.html#aprendizado-supervisionado",
    "href": "tipos-am.html#aprendizado-supervisionado",
    "title": "Tipos de Aprendizado de Máquina",
    "section": "Aprendizado supervisionado",
    "text": "Aprendizado supervisionado\nNo aprendizado supervisionado, por outro lado, temos um conjunto de dados já rotulados que sabemos qual é a nossa saída correta e que deve ser semelhante ao conjunto. Queremos assim, com base nesses dados, ser capaz de classificar outros dados do mesmo tipo e que ainda não foram rotulados.\n\nExemplo 1: Dada uma coleção de 1000 pesquisas de uma universidade, encontrar uma maneira de agrupar automaticamente estas pesquisas em grupos que são de alguma forma semelhantes ou relacionadas por diferentes variáveis, tais como a frequência das palavras, frases, contagem de páginas, etc.\nExemplo 2: Dada uma grande amostra de e-mails, encontrar uma maneira de agrupá-los automaticamente em “spam” ou “não spam”, de acordo com as características das palavras, tais como a frequência com que uma certa palavra aparece, a frequência de letras maiúsculas, de cifrões ($), entre outros.\n\nSe os valores da variável rótulo, também chamada de variável de interesse, são valores discretos finitos ou ainda categóricos, então temos um problema de classificação e o algoritmo que criaremos para resolver nosso problema será chamado Classificador.\nSe os valores da Variável de Interesse são valores contínuos, então temos um problema de regressão e o algoritmo que criaremos será chamado Regressor.\nA aprendizagem supervisionada será o principal foco do curso."
  },
  {
    "objectID": "pred.html#pergunta",
    "href": "pred.html#pergunta",
    "title": "Predição",
    "section": "Pergunta",
    "text": "Pergunta\nO nosso objetivo é responder a uma pergunta de tipo “O dado A é do tipo x ou do tipo y?”. Por exemplo, podemos querer saber se é possível detectar automaticamente se um e-mail é um spam ou um “ham”, isto é, não spam. O que na verdade queremos saber é: “É possível usar características quantitativas para classificar um e-mail como spam?”."
  },
  {
    "objectID": "pred.html#amostra-de-entrada",
    "href": "pred.html#amostra-de-entrada",
    "title": "3  Predição",
    "section": "3.2 Amostra de Entrada",
    "text": "3.2 Amostra de Entrada\nUma vez formulada a pergunta, precisamos obter uma amostra de onde tentaremos extrair informações que caracterizam a categoria a qual um dado pertence e então usar essas informações para classificar outros dados não categorizados. O ideal é que se tenha uma amostra grande, assim teremos melhores parâmetros para construir nosso preditor.\nNo caso da pergunta sobre um e-mail ser spam ou não, temos acesso a base de dados “spam” disponível no pacote “kernlab”, onde cada linha dessa base é um e-mail e nas colunas temos a porcentagem de palavras e números contidos em cada e-mail e, entre outras coisas, a nossa variável de interesse “type” que classifica o e-mail como spam ou não:\n\nlibrary(kernlab)\ndata(spam)\nhead(spam)\n\n  make address  all num3d  our over remove internet order mail receive will\n1 0.00    0.64 0.64     0 0.32 0.00   0.00     0.00  0.00 0.00    0.00 0.64\n2 0.21    0.28 0.50     0 0.14 0.28   0.21     0.07  0.00 0.94    0.21 0.79\n3 0.06    0.00 0.71     0 1.23 0.19   0.19     0.12  0.64 0.25    0.38 0.45\n4 0.00    0.00 0.00     0 0.63 0.00   0.31     0.63  0.31 0.63    0.31 0.31\n5 0.00    0.00 0.00     0 0.63 0.00   0.31     0.63  0.31 0.63    0.31 0.31\n6 0.00    0.00 0.00     0 1.85 0.00   0.00     1.85  0.00 0.00    0.00 0.00\n  people report addresses free business email  you credit your font num000\n1   0.00   0.00      0.00 0.32     0.00  1.29 1.93   0.00 0.96    0   0.00\n2   0.65   0.21      0.14 0.14     0.07  0.28 3.47   0.00 1.59    0   0.43\n3   0.12   0.00      1.75 0.06     0.06  1.03 1.36   0.32 0.51    0   1.16\n4   0.31   0.00      0.00 0.31     0.00  0.00 3.18   0.00 0.31    0   0.00\n5   0.31   0.00      0.00 0.31     0.00  0.00 3.18   0.00 0.31    0   0.00\n6   0.00   0.00      0.00 0.00     0.00  0.00 0.00   0.00 0.00    0   0.00\n  money hp hpl george num650 lab labs telnet num857 data num415 num85\n1  0.00  0   0      0      0   0    0      0      0    0      0     0\n2  0.43  0   0      0      0   0    0      0      0    0      0     0\n3  0.06  0   0      0      0   0    0      0      0    0      0     0\n4  0.00  0   0      0      0   0    0      0      0    0      0     0\n5  0.00  0   0      0      0   0    0      0      0    0      0     0\n6  0.00  0   0      0      0   0    0      0      0    0      0     0\n  technology num1999 parts pm direct cs meeting original project   re  edu\n1          0    0.00     0  0   0.00  0       0     0.00       0 0.00 0.00\n2          0    0.07     0  0   0.00  0       0     0.00       0 0.00 0.00\n3          0    0.00     0  0   0.06  0       0     0.12       0 0.06 0.06\n4          0    0.00     0  0   0.00  0       0     0.00       0 0.00 0.00\n5          0    0.00     0  0   0.00  0       0     0.00       0 0.00 0.00\n6          0    0.00     0  0   0.00  0       0     0.00       0 0.00 0.00\n  table conference charSemicolon charRoundbracket charSquarebracket\n1     0          0          0.00            0.000                 0\n2     0          0          0.00            0.132                 0\n3     0          0          0.01            0.143                 0\n4     0          0          0.00            0.137                 0\n5     0          0          0.00            0.135                 0\n6     0          0          0.00            0.223                 0\n  charExclamation charDollar charHash capitalAve capitalLong capitalTotal type\n1           0.778      0.000    0.000      3.756          61          278 spam\n2           0.372      0.180    0.048      5.114         101         1028 spam\n3           0.276      0.184    0.010      9.821         485         2259 spam\n4           0.137      0.000    0.000      3.537          40          191 spam\n5           0.135      0.000    0.000      3.537          40          191 spam\n6           0.000      0.000    0.000      3.000          15           54 spam\n\n\nObtida a amostra, precisamos dividi-la em duas partes que chamaremos de Conjunto de Treino e Conjunto de Teste. O conjunto de treino será usado para construir o algoritmo. É dele que vamos extrair as informações que julgarmos utéis para classificar uma categoria de dado. É importante que o modelo de previsão seja feito com base apenas no conjunto de treino.\n\nset.seed(127)\nindices = sample(dim(spam)[1], size = 2760)\ntreino = spam[indices,]\nteste = spam[-indices,]\n\nApós construido o algoritmo, usaremos o conjunto de teste para obter a estimativa de erro, que será detalhada mais a frente.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Predição</span>"
    ]
  },
  {
    "objectID": "pred.html#características",
    "href": "pred.html#características",
    "title": "3  Predição",
    "section": "3.3 Características",
    "text": "3.3 Características\nTemos que encontrar agora características que possam indicar a categoria dos dados. Podemos, por exemplo, vizualizar algumas variáveis graficamente para obter uma ideia do que podemos fazer. No nosso exemplo de e-mails, podemos querer avaliar se a frequência de palavras “your” em um e-mail pode indicar se ele é um spam ou não.\n\nplot(density(treino$your[treino$type==\"nonspam\"]), col=\"blue\", \n     main = \"Densidade de 'your' em ham (azul) e spam (vermelho)\", \n     xlab = \"Frequência de 'your'\", ylab = \"densidade\")\nlines(density(treino$your[treino$type==\"spam\"]), col=\"red\")\n\n\n\n\n\n\n\n\nPelo gráfico podemos notar que a maioria dos e-mails que são spam têm uma frequência maior da palavra “your”. Por outro lado, aqueles que são classificados como ham (não spam) têm um pico mais alto perto do 0.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Predição</span>"
    ]
  },
  {
    "objectID": "pred.html#algoritmo",
    "href": "pred.html#algoritmo",
    "title": "3  Predição",
    "section": "3.4 Algoritmo",
    "text": "3.4 Algoritmo\nCom base nisso podemos construir um algoritmo para prever se um e-mail é spam ou ham. Podemos estimar um modelo onde queremos encontrar uma constante c tal que se a frequência da palavra “your” for maior que c, então classificamos o e-mail como spam. Caso contrário, classificamos o e-mail como não spam.\nVamos observar graficamente como ficaria esse modelo se c=0.8.\n\nplot(density(treino$your[treino$type==\"nonspam\"]), col=\"blue\", \n     main = \"Densidade de 'your' em ham (azul) e spam (vermelho)\", \n     xlab = \"Frequência de 'your'\", ylab = \"densidade\")\nlines(density(treino$your[treino$type==\"spam\"]), col=\"red\")\nabline(v=0.8,col=\"black\")\n\n\n\n\n\n\n\n\nOs e-mails à direita da linha preta seriam classificados como spam, enquanto que os à esquerda seriam classificados como não spam.\n\n3.4.1 Avaliação\nAgora vamos avaliar nosso modelo de predição.\n\npredicao=ifelse(treino$your&gt;0.8,\"spam\",\"nonspam\")\ntable(predicao,treino$type)/length(treino$type)\n\n         \npredicao    nonspam      spam\n  nonspam 0.4978261 0.1293478\n  spam    0.1155797 0.2572464\n\n\nPodemos ver que quando os e-mails não eram spam e classificamos como “não spam”, de acordo com nosso modelo, em 50% do tempo nós acertamos. Quando os e-mails eram spam e classificamos ele em spam, por volta de 26% do tempo nós acertamos. Então, ao total, nós acertamos por volta de 50+26=76% do tempo. Então nosso algoritmo de previsão tem uma precisão por volta de 76% na amostra treino.\n\npredicao=ifelse(teste$your&gt;0.8,\"spam\",\"nonspam\")\ntable(predicao,teste$type)/length(teste$type)\n\n         \npredicao    nonspam      spam\n  nonspam 0.4910375 0.1434003\n  spam    0.1037480 0.2618142\n\n\nJá na amostra teste acertamos 48+27=75% das vezes. O erro na amostra teste é o que chamamos de erro real. É o erro que esperamos em amostras novas que passarem por nosso preditor.\n\n\n3.4.2 Como construir um bom algoritmo de aprendizado de máquina?\nO “melhor” método de aprendizado de máquina é caracterizado por:\n\nUma boa base de dados;\nReter informações relevantes;\nSer bem interpretável;\nFácil de ser explicado e entendido;\nSer preciso;\nFácil de se construir e de se testar em pequenas amostras;\nFácil aplicar a um grande conjunto de dados.\n\nOs erros mais comuns, que se deve tomar um certo cuidado, são:\n\nTentar automatizar a seleção de variáveis (características) de uma maneira que não permita que você entenda como essas variáveis estão sendo aplicadas para fazer previsões;\nNão prestar atenção a peculiaridades específicas de alguns dados, como comportamentos estranhos de variáveis específicas;\nJogar fora informações desnecessariamente.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Predição</span>"
    ]
  },
  {
    "objectID": "design-pred.html",
    "href": "design-pred.html",
    "title": "4  Design de predição",
    "section": "",
    "text": "1. Defina sua taxa de erro (benchmark).\nPor hora iremos utilizar uma taxa de erro genérica, mas em um próximo iremos falar sobre quais são as diferentes taxas de erro possíveis que você pode escolher.\nPor exemplo, podemos calcular o chamado erro majoritário que é o limite máximo abaixo do qual o erro de um classificador deve estar. Ele é dado por 1−p, onde p é a proporção da categoria mais requente na variável de interesse. Por exemplo, se a variável de interesse possui 2 categorias: A e B. Se 85% dos dados estão rotulados na categoria A e 15% na categoria B, entao temos que a categoria A é a classe majoritária e 100%−85%=15% é o erro majoritário.\nCaso o erro do preditor seja superior ao erro majoritário, seria melhor classificar toda nova amostra na classe majoritária, certo? Depende.\nDigamos que um psicólogo quer construir um classificador para prever se uma pessoa tem ou não ideação suicida, ou seja, pensa ou planeja suicídio. Suponha que ele tem uma base de dados com 1000 observações cuja variável de interesse “Tem ideação suicida?” está rotulada com “sim” ou “não” e 97% das observações, no caso indivíduos/pacientes, não possuem tal característica e portanto 3% dos indivíduos possuem. Criado o preditor, observamos que o erro é de 5%, assim como mostrado a seguir:\n\nAs partes em vermelho mostram o erro cometido por ambos os métodos. Agora note as pessoas que possuem ideação suicída porém foram classficadas como não possuidoras dessa característica. Quanto isso afetará no dignóstico do psicólogo?\n2. Divida os dados em Treino e Teste, ou Treino, Teste e Validação (opcional).\nComo já comentado, o conjunto de treino deve ser criado para construir seu modelo e o conjunto de testes para avaliar seu modelo. Fazemos isso com o intuito de criarmos um modelo que se ajuste bem a qualquer base de dados, e não apenas à nossa. É comum usar 70% da amostra como treino e 30% como teste, mas isso não é uma regra. Podemos também repartir os dados em treino, teste e validação(*). É importante ficar claro que quem está conduzindo as análises é quem fica encarregado de decidir o que fica melhor para cada amostra.\n3. Definimos quais variáveis serão utilizadas para estimação dos parâmetros do classificador/regressor (função preditora).\nNem sempre utilizar todas as variáveis do banco de dados é importante para o modelo. Pode acontecer de termos variáveis que não ajudam na predição, como por exemplo aquelas com uma variância quase zero (frequência muito alta de um único valor). Iremos estudar algumas formas de selecionar as melhores variáveis para o modelo em breve.\n4. Definimos o método que será utilizado para construção do classificador/regressor.\nIsso poderá ser feito, por exemplo, utilizando o método de validação cruzada (cross-validation), que será explicado detalhadamente em um capítulo mais à frente.\n5. Obtenção do melhor modelo.\nUtilizando a amostra TREINO, definimos os parâmetros da função preditora (classificador/regressor), obtendo o modelo final.\n6. Aplicamos o modelo final na amostra TESTE (uma única vez), para estimar o erro do preditor.\nAplicamos o modelo final obtido na amostra de teste apenas uma vez. Se aplicarmos várias vezes até encontrar o melhor modelo, estaremos, de certa forma, utilizando a amostra de teste para treinar o modelo, o que influenciaria o ajuste do modelo com base nos resultados do teste. Isso não é desejável, pois o objetivo da amostra de teste é servir como uma “nova amostra” para estimar a taxa de erro do modelo.\n(*) Opcionalmente poderá ser criado um conjunto de validação, com o intuito de servir como um “pré-teste”, que também será usado para avaliar seu modelo. Quando repartimos o conjunto de dados dessa forma, utilizamos o treino para construir o modelo, avaliamos o modelo na validação (ou seja, o ajuste do modelo é influenciado por ela), e se o resultado não for bom, retornamos ao treino para ajustar um outro modelo. Então novamente testamos o modelo na validação, e assim sucessivamente até acharmos um modelo que se adequou bem tanto ao treino quanto à validação. Aí, finalmente, aplicamos ele ao conjunto teste, avaliando na prática a sua qualidade.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Design de predição</span>"
    ]
  },
  {
    "objectID": "erros-amostrais.html#erro-dentro-da-amostra-in-sample-error",
    "href": "erros-amostrais.html#erro-dentro-da-amostra-in-sample-error",
    "title": "Erros Amostrais",
    "section": "Erro dentro da Amostra (In Sample Error)",
    "text": "Erro dentro da Amostra (In Sample Error)\nÉ a taxa de erro que você recebe no mesmo conjunto de dados usado para criar seu preditor. Na literatura às vezes é chamado de erro de resubstituição. Em outras palavras, é quando seu algoritmo de previsão se ajusta ao que você coletou num conjunto de dados específico. E assim, quando você recebe um novo conjunto de dados, a precisão diminuirá."
  },
  {
    "objectID": "erros-amostrais.html#erro-fora-da-amostra-out-of-sample-error",
    "href": "erros-amostrais.html#erro-fora-da-amostra-out-of-sample-error",
    "title": "5  Erros Amostrais",
    "section": "5.2 Erro fora da Amostra (Out of Sample Error)",
    "text": "5.2 Erro fora da Amostra (Out of Sample Error)\nÉ a taxa de erro que você recebe em um novo conjunto de dados. Na literatura às vezes é chamado de erro de generalização. Uma vez que coletamos uma amostra de dados e construímos um modelo para ela, podemos querer testá-lo em uma nova amostra, por exemplo uma amostra coletada em um horário diferente ou em um local diferente. Daí podemos analisar o quão bem o algoritmo executará a predição nesse novo conjunto de dados.\n\n5.2.1 Algumas ideias-chave\n\nQuase sempre o erro fora da amostra é o que interessa.\nErro dentro da amostra é menor que o erro fora da amostra.\nUm erro frequente é ajustar muito o algoritmo aos dados que temos. Em outras palavras, criar um modelo sobreajustado (também chamado de overfitting(*)).\n(*) Overfitting é um termo usado na estatística para descrever quando um modelo estatístico se ajusta muito bem a um conjunto de dados anteriormente observado e, como consequência, se mostra ineficaz para prever novos resultados.\n\nVejamos um exemplo de erro dentro da amostra vs erro fora da amostra:\n\nset.seed(131)\n\n# Vamos selecionar as linhas da base de dados spam através de uma amostra de tamanho 10 das 4601 linhas\n# dos dados:\nspamMenor = spam[sample(dim(spam)[1], size = 10), ]\n\n# Vamos criar um vetor composto pelos rótulos \"1\" e \"2\". \n# Se um e-mail da nossa amostra for spam, recebe \"1\", se não for spam, recebe \"2\".\nspamRotulos = (spamMenor$type == \"spam\")*1 + 1\n\n# Na nossa base a variável capitalAve representa a média de letras maiúsculas por linha.\nplot(spamMenor$capitalAve, col = spamRotulos, xlab = \"Quantidade de Letras Maiúsculas\",\n     ylab = \"Frequência\", main = \"Letras Maiúsculas em spam (vermelho) e em ham (preto)\",\n     pch = 19)\n\n\n\n\n\n\n\n\nPodemos notar que, em geral, as mensagens classificadas como spam possuem uma frequência maior de letras maiúsculas do que as mensagens classificadas como não spam. Com base nisso queremos construir um preditor, onde podemos classificar e-mails como spam se a frequência de letras maiúsculas for maior que uma determida constante, e não spam caso contrário.\nVeja que se separarmos os dados pela frequência de letras maiúsculas maior que 2,5 e classificarmos o que está acima como spam e abaixo como não spam, ainda teríamos duas observações que não são spam acima da linha.\n\nplot(spamMenor$capitalAve, col = spamRotulos, xlab = \"Quantidade de Letras Maiúsculas\",\n     ylab = \"Frequência\", main = \"Letras Maiúsculas em spam (vermelho) e em ham (preto)\",\n     pch = 19)\nabline(h = 2.5, lty = 3, col = \"blue\")\n\n\n\n\n\n\n\n\nEntão o melhor para esse caso é criar o seguinte modelo:\n\nletras maiúsculas &gt; 2,5 e &lt; 3,8 ⇒ spam;\nletras maiúsculas &lt; 2,5 ou &gt; 3,8 ⇒ não spam.\n\nplot(spamMenor$capitalAve, col = spamRotulos, xlab = \"Quantidade de Letras Maiúsculas\",\n     ylab = \"Frequência\", main = \"Letras Maiúsculas em spam (vermelho) e em ham (preto)\",\n     pch = 19)\nabline(h = c(2.5, 3.8), lty = 3, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n# construindo o modelo sobreajustado\nmodelo.sobreajustado = function(x){\n  predicao = rep(NA, length(x))\n  predicao[(x&gt;=2.5 & x&lt;=3.8)] = \"spam\"\n  predicao[(x&lt;2.5 | x&gt;3.8)] = \"nonspam\"\n  return(predicao)\n}\n# avaliando o modelo sobreajustado\nresultado = modelo.sobreajustado(spamMenor$capitalAve)\ntable(resultado, spamMenor$type)\n\n         \nresultado nonspam spam\n  nonspam       7    0\n  spam          0    3\n\n\nNote que obtivemos uma precisão perfeita nessa amostra, como já era esperado. Nesse caso, o erro dentro da amostra é de 0%. Mas será que esse modelo é o mais eficiente em outros dados também?\nVamos usar essa segunda regra para criarmos um modelo mais geral:\n\nletras maiúsculas &gt; 2,5 ⇒ spam;\nletras maiúsculas &lt;= 2,5 ⇒ não spam.\n\nplot(spamMenor$capitalAve, col = spamRotulos, xlab = \"Quantidade de Letras Maiúsculas\",\n     ylab = \"Frequência\", main = \"Letras Maiúsculas em spam (vermelho) e em ham (preto)\",\n     pch = 19)\nabline(h = 2.5, lty = 3, col = \"blue\")\n\n\n\n\n\n\n\n\n\n\n# construindo o modelo geral\nmodelo.geral = function(x){\n  predicao = rep(NA, length(x))\n  predicao[x&gt;=2.5] = \"spam\"\n  predicao[x&lt;2.5] = \"nonspam\"\n  return(predicao)\n}\n# avaliando o modelo geral\nresultado2 = modelo.geral(spamMenor$capitalAve)\ntable(resultado2, spamMenor$type)\n\n          \nresultado2 nonspam spam\n   nonspam       5    0\n   spam          2    3\n\n\nObserve que dessa forma temos um erro dentro da amostra de 20%. Vamos agora aplicar esses dois modelos para toda a base de dados:\n\ntable(modelo.sobreajustado(spam$capitalAve), spam$type)\n\n         \n          nonspam spam\n  nonspam    2297 1385\n  spam        491  428\n\n\n\ntable(modelo.geral(spam$capitalAve), spam$type)\n\n         \n          nonspam spam\n  nonspam    2042  540\n  spam        746 1273\n\n\nOlhando para a precisão de nossos modelos:\n\nsum(modelo.sobreajustado(spam$capitalAve) == spam$type)\n\n[1] 2725\n\n\n\nsum(modelo.geral(spam$capitalAve) == spam$type)\n\n[1] 3315\n\n\nObserve que utilizando o modelo sobreajustado obtivemos um erro fora da amostra de 40,77%, enquanto que com o modelo geral esse erro foi de 27,95%. Note que se queremos construir um modelo que melhor representa qualquer amostra que pegarmos, um modelo não sobreajustado possuirá uma precisão maior.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Erros Amostrais</span>"
    ]
  },
  {
    "objectID": "caret.html",
    "href": "caret.html",
    "title": "6  Avaliando Preditores - Introdução ao Pacote Caret",
    "section": "",
    "text": "6.1 Avaliando Classificadores\nVamos utilizar a base de dados spam novamente para realizarmos o procedimento de predição para um e-mail (se ele é spam ou não spam), dessa vez utilizando o pacote caret.\nPara fazer a separação da amostra em treino e teste, vamos particionar a base de dados com a função createDataPartition(). Em problemas de classificação, a função createDataPartition() garante que a mesma proporção de cada classe observada no banco de dados seja mantida nas amostras de treino e teste. Ou seja, se o banco de dados tiver 70% de elementos do tipo A e 30% do tipo B, as amostras treino e teste terão cada uma 70% de elementos do tipo A e 30% do tipo B.\nPara problemas de regressão, createDataPartition() cria uma partição estratificada com base na variável dependente contínua, dividindo os dados de forma a representar bem a distribuição dos valores da variável de resposta em ambas as amostras de treino e teste.\nlibrary(caret)\nlibrary(kernlab)\ndata(spam)\nset.seed(371)\nnoTreino = createDataPartition(y = spam$type, p = 0.75, list = F)\nEssa função retorna os números das linhas a serem selecionadas para o treino. Os principais argumentos são:\nAgora vamos separar as amostras que irão para o conjunto de treino e as que irão para o conjunto de teste.\n# Separando as linhas para o treino:\ntreino = spam[noTreino,]\n# Separando as linhas para o teste:\nteste = spam[-noTreino,]\nApós feita a separação das amostras treino e teste, podemos realizar o treinamento do modelo. Para isso é preciso escolher um dos modelos para ser utilizado. Uma lista com todos os modelos implementados no pacote caret pode ser vista com o seguinte comando:\nnames(getModelInfo())\n\n  [1] \"ada\"                 \"AdaBag\"              \"AdaBoost.M1\"        \n  [4] \"adaboost\"            \"amdai\"               \"ANFIS\"              \n  [7] \"avNNet\"              \"awnb\"                \"awtan\"              \n [10] \"bag\"                 \"bagEarth\"            \"bagEarthGCV\"        \n [13] \"bagFDA\"              \"bagFDAGCV\"           \"bam\"                \n [16] \"bartMachine\"         \"bayesglm\"            \"binda\"              \n [19] \"blackboost\"          \"blasso\"              \"blassoAveraged\"     \n [22] \"bridge\"              \"brnn\"                \"BstLm\"              \n [25] \"bstSm\"               \"bstTree\"             \"C5.0\"               \n [28] \"C5.0Cost\"            \"C5.0Rules\"           \"C5.0Tree\"           \n [31] \"cforest\"             \"chaid\"               \"CSimca\"             \n [34] \"ctree\"               \"ctree2\"              \"cubist\"             \n [37] \"dda\"                 \"deepboost\"           \"DENFIS\"             \n [40] \"dnn\"                 \"dwdLinear\"           \"dwdPoly\"            \n [43] \"dwdRadial\"           \"earth\"               \"elm\"                \n [46] \"enet\"                \"evtree\"              \"extraTrees\"         \n [49] \"fda\"                 \"FH.GBML\"             \"FIR.DM\"             \n [52] \"foba\"                \"FRBCS.CHI\"           \"FRBCS.W\"            \n [55] \"FS.HGD\"              \"gam\"                 \"gamboost\"           \n [58] \"gamLoess\"            \"gamSpline\"           \"gaussprLinear\"      \n [61] \"gaussprPoly\"         \"gaussprRadial\"       \"gbm_h2o\"            \n [64] \"gbm\"                 \"gcvEarth\"            \"GFS.FR.MOGUL\"       \n [67] \"GFS.LT.RS\"           \"GFS.THRIFT\"          \"glm.nb\"             \n [70] \"glm\"                 \"glmboost\"            \"glmnet_h2o\"         \n [73] \"glmnet\"              \"glmStepAIC\"          \"gpls\"               \n [76] \"hda\"                 \"hdda\"                \"hdrda\"              \n [79] \"HYFIS\"               \"icr\"                 \"J48\"                \n [82] \"JRip\"                \"kernelpls\"           \"kknn\"               \n [85] \"knn\"                 \"krlsPoly\"            \"krlsRadial\"         \n [88] \"lars\"                \"lars2\"               \"lasso\"              \n [91] \"lda\"                 \"lda2\"                \"leapBackward\"       \n [94] \"leapForward\"         \"leapSeq\"             \"Linda\"              \n [97] \"lm\"                  \"lmStepAIC\"           \"LMT\"                \n[100] \"loclda\"              \"logicBag\"            \"LogitBoost\"         \n[103] \"logreg\"              \"lssvmLinear\"         \"lssvmPoly\"          \n[106] \"lssvmRadial\"         \"lvq\"                 \"M5\"                 \n[109] \"M5Rules\"             \"manb\"                \"mda\"                \n[112] \"Mlda\"                \"mlp\"                 \"mlpKerasDecay\"      \n[115] \"mlpKerasDecayCost\"   \"mlpKerasDropout\"     \"mlpKerasDropoutCost\"\n[118] \"mlpML\"               \"mlpSGD\"              \"mlpWeightDecay\"     \n[121] \"mlpWeightDecayML\"    \"monmlp\"              \"msaenet\"            \n[124] \"multinom\"            \"mxnet\"               \"mxnetAdam\"          \n[127] \"naive_bayes\"         \"nb\"                  \"nbDiscrete\"         \n[130] \"nbSearch\"            \"neuralnet\"           \"nnet\"               \n[133] \"nnls\"                \"nodeHarvest\"         \"null\"               \n[136] \"OneR\"                \"ordinalNet\"          \"ordinalRF\"          \n[139] \"ORFlog\"              \"ORFpls\"              \"ORFridge\"           \n[142] \"ORFsvm\"              \"ownn\"                \"pam\"                \n[145] \"parRF\"               \"PART\"                \"partDSA\"            \n[148] \"pcaNNet\"             \"pcr\"                 \"pda\"                \n[151] \"pda2\"                \"penalized\"           \"PenalizedLDA\"       \n[154] \"plr\"                 \"pls\"                 \"plsRglm\"            \n[157] \"polr\"                \"ppr\"                 \"pre\"                \n[160] \"PRIM\"                \"protoclass\"          \"qda\"                \n[163] \"QdaCov\"              \"qrf\"                 \"qrnn\"               \n[166] \"randomGLM\"           \"ranger\"              \"rbf\"                \n[169] \"rbfDDA\"              \"Rborist\"             \"rda\"                \n[172] \"regLogistic\"         \"relaxo\"              \"rf\"                 \n[175] \"rFerns\"              \"RFlda\"               \"rfRules\"            \n[178] \"ridge\"               \"rlda\"                \"rlm\"                \n[181] \"rmda\"                \"rocc\"                \"rotationForest\"     \n[184] \"rotationForestCp\"    \"rpart\"               \"rpart1SE\"           \n[187] \"rpart2\"              \"rpartCost\"           \"rpartScore\"         \n[190] \"rqlasso\"             \"rqnc\"                \"RRF\"                \n[193] \"RRFglobal\"           \"rrlda\"               \"RSimca\"             \n[196] \"rvmLinear\"           \"rvmPoly\"             \"rvmRadial\"          \n[199] \"SBC\"                 \"sda\"                 \"sdwd\"               \n[202] \"simpls\"              \"SLAVE\"               \"slda\"               \n[205] \"smda\"                \"snn\"                 \"sparseLDA\"          \n[208] \"spikeslab\"           \"spls\"                \"stepLDA\"            \n[211] \"stepQDA\"             \"superpc\"             \"svmBoundrangeString\"\n[214] \"svmExpoString\"       \"svmLinear\"           \"svmLinear2\"         \n[217] \"svmLinear3\"          \"svmLinearWeights\"    \"svmLinearWeights2\"  \n[220] \"svmPoly\"             \"svmRadial\"           \"svmRadialCost\"      \n[223] \"svmRadialSigma\"      \"svmRadialWeights\"    \"svmSpectrumString\"  \n[226] \"tan\"                 \"tanSearch\"           \"treebag\"            \n[229] \"vbmpRadial\"          \"vglmAdjCat\"          \"vglmContRatio\"      \n[232] \"vglmCumulative\"      \"widekernelpls\"       \"WM\"                 \n[235] \"wsrf\"                \"xgbDART\"             \"xgbLinear\"          \n[238] \"xgbTree\"             \"xyf\"\nPara o nosso exemplo, vamos utilizar regressão logística, que possui no caret a alcunha “glm” (generalized linear model).\nAgora vamos criar o nosso modelo, utilizando apenas a amostra treino. Para isso vamos usar o comando train().\nmodelo = train(type ~ ., data = treino, method = \"glm\")\nNo primeiro argumento colocamos qual variável estamos tentando prever em função de qual(is). No nosso caso, queremos prever “type” em função (“~”) de todas as outras, por isso utilizamos o ponto “.”. Em seguida dizemos de qual base de dados queremos construir o modelo e por último o método de treinamento utilizado.\nAgora vamos dar uma olhada como ficou nosso modelo.\nmodelo\n\nGeneralized Linear Model \n\n3451 samples\n  57 predictor\n   2 classes: 'nonspam', 'spam' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 3451, 3451, 3451, 3451, 3451, 3451, ... \nResampling results:\n\n  Accuracy   Kappa    \n  0.9224544  0.8365594\nPodemos observar que utilizamos uma amostra de tamanho 3451 no treino e 57 variáveis para prever a qual classe um e-mail pertence, spam ou não spam. O que a função faz é ajustar o modelo selecionado (glm no nosso caso) nos dados de treino, buscando otimizar uma métrica pré determinada (o padrão para classificação é acurácia). Quando o modelo necessita de ajuste de hiperparâmetros, a função utiliza métodos de reamostragem para selecionar o melhor modelo. O padrão é reamostragem por bootstrapping com 25 replicações. Trataremos deste tema posteriormente.\nUma vez que ajustamos o modelo podemos aplicá-lo na amostra teste, para estimarmos a precisão do classificador. Para isso utilizamos o comando predict(). Dentro da função nós passamos o modelo que ajustamos no treino e em qual base de dados gostaríamos de realizar a predição.\npredicao = predict(modelo, newdata = teste)\nhead(predicao, n=30)\n\n [1] spam    spam    spam    spam    spam    spam    spam    nonspam nonspam\n[10] spam    spam    spam    nonspam nonspam spam    spam    spam    spam   \n[19] spam    spam    spam    spam    spam    spam    spam    spam    spam   \n[28] spam    spam    spam   \nLevels: nonspam spam\nAo fazermos isso obtemos uma série de predições para as classes dos e-mails do conjunto teste. Podemos então realizar a avaliação do modelo comparando os resultados da predição com as reais classes dos e-mails, por meio do comando confusionMatrix().",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Avaliando Preditores - Introdução ao Pacote Caret</span>"
    ]
  },
  {
    "objectID": "caret.html#matriz-de-confusão-confusion-matrix",
    "href": "caret.html#matriz-de-confusão-confusion-matrix",
    "title": "Avaliando Preditores - Introdução ao Pacote Caret",
    "section": "Matriz de Confusão (Confusion Matrix)",
    "text": "Matriz de Confusão (Confusion Matrix)\nA matriz de confusão é a matriz de comparação feita após a predição, onde as linhas correspondem ao que foi previsto e as colunas correspondem à verdade conhecida.\nExemplo: A matriz de confusão para o problema de predição dos e-mails em spam ou não spam fica da seguinta forma:\n\nOnde na primeira coluna se encontram os elementos que possuem a característica de interesse (os e-mails que são spam), e, respectivamente nas linhas, os que foram corretamente identificados - o qual são chamados de Verdadeiros Positivos (VP) - e os que foram erroneamente identificados - os Falsos Negativos (FP). Na segunda coluna se encontram os elementos que não possuem a característica de interesse (os e-mails que são ham) e, respectivamente nas linhas, os que foram erroneamente identificados - o qual são chamados de Falsos Positivos (FN) - e os que foram corretamente identificados - os Verdadeiros Negativos (VN).\nCom as devidas classificações a matriz de confusão fica da seguinte forma:\n\nDentro da função passamos as predições que obtemos pelo modelo ajustado e as reais classificações dos e-mails do conjunto teste.\n\nconfusionMatrix(predicao, teste$type)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction nonspam spam\n   nonspam     659   55\n   spam         38  398\n                                          \n               Accuracy : 0.9191          \n                 95% CI : (0.9018, 0.9342)\n    No Information Rate : 0.6061          \n    P-Value [Acc &gt; NIR] : &lt; 2e-16         \n                                          \n                  Kappa : 0.8295          \n                                          \n Mcnemar's Test P-Value : 0.09709         \n                                          \n            Sensitivity : 0.9455          \n            Specificity : 0.8786          \n         Pos Pred Value : 0.9230          \n         Neg Pred Value : 0.9128          \n             Prevalence : 0.6061          \n         Detection Rate : 0.5730          \n   Detection Prevalence : 0.6209          \n      Balanced Accuracy : 0.9120          \n                                          \n       'Positive' Class : nonspam         \n                                          \n\n\nA função retorna a matriz de confusão e alguns dados estatísticos, como por exemplo a Precisão (Accuracy), o Intervalo de Confiança com 95% de confiança (95% CI), a Sensibilidade (Sensitivity), Especificidade (Specificity), entre outros.\nPodemos notar que o GLM foi um bom modelo de treinamento para os nossos dados pois obtivemos altas taxas de acertos: uma precisão de 0,94, 0,96 de sensitividade e 0,90 de especificidade. Vamos ver melhor algumas dessas estatísticas:\nDefinição (Sensibilidade): A sensibilidade de um método de predição é a porcentagem dos elementos da amostra que possuem a característica de interesse e foram corretamente identificados. Para o nosso exemplo dos e-mails, a sensabilidade é a porcentagem dos e-mails que são spam e foram classificados pelo nosso algoritmo de predição como spam.\nOu seja, podemos escrever \\(Sensibilidade = \\frac{VP}{VP+FN}\\)\nDefinição (Especificidade): A especificidade de um método de predição é a porcentagem dos elementos da amostra que não possuem a característica de interesse e foram corretamente identificados. Para o nosso exemplo dos e-mails, a especificidade é a porcentagem dos e-mails que são “ham” e o algoritmo de predição os classificou como tal.\nOu seja, podemos escrever \\(Especificidade = \\frac{VN}{VN+FP}\\)\nQuando obtemos as sensibilidades e as especificidades de diferentes preditores, naturalmente surge o questionamente: qual deles é melhor para estimar as verdadeiras características de interesse? A resposta depende do que é mais importante para o problema.\nSe identificar corretamente os positivos for mais importante, utilizamos o preditor com maior sensibilidade. Se identificar corretamente os negativos for mais importante, utilizamos o preditor com maior especificidade.\nOutra medida para avaliar a qualidade do nosso preditor é a precisão (Accuracy). Ela avalia a porcentagem de acertos que tivemos em geral. Ou seja, somamos o número de Verdadeiros Positivos com o número de Verdadeiros Negativos e dividimos pelo tamanho da amostra. \\(Precisão = \\frac{VP+VN}{VP+VN+FN+FP}\\)\nPara demais medidas da matriz de confusão consulte o [apêndice].\n\nAvaliando Regressores\nAgora vamos utilizar a base de dados faithful para tentar prever o tempo de espera (waiting) entre uma erupção e outra de um gêiser dado a duração das erupções (eruption).\n\ndata(\"faithful\")\nhead(faithful)\n\n  eruptions waiting\n1     3.600      79\n2     1.800      54\n3     3.333      74\n4     2.283      62\n5     4.533      85\n6     2.883      55\n\n\nPrimeiro, vamos separar a amostra em treino e teste.\n\nset.seed(39)\nnoTreino = createDataPartition(y=faithful$waiting, p=0.7, groups = 5, list=F)\ntreino = faithful[noTreino,]; teste = faithful[-noTreino,]\n\nQuando o argumento y é numérico, a amostra é dividida em grupos com base nos percentis e é feita uma amostragem estratificada. O número de percentis é definido pelo argumento groups.\nAgora temos que treinar nosso modelo. Para esse exemplo vamos usar a Regressão Linear (LM - Linear Regression).\n\nOs métodos disponíveis e seus usos podem ser encontrados no guia do caret.\n\nVamos treinar nosso modelo utilizando a amostra treino.\n\nmodelo = caret::train(waiting~eruptions, data = treino, method = \"lm\")\n\nNovamente, colocamos a variável que tentamos prever em função das outras. No caso, só temos duas variáveis então não precisamos colocar o ponto como no [classificador].\n\nmodelo\n\nLinear Regression \n\n192 samples\n  1 predictor\n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 192, 192, 192, 192, 192, 192, ... \nResampling results:\n\n  RMSE      Rsquared  MAE     \n  6.060639  0.805468  4.948071\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n\n\nPodemos ver que temos 192 observações no conjunto treino e 1 preditor.\nAgora vamos aplicar nosso modelo na amostra teste para avaliar o erro dele.\n\npredicao = predict(modelo, newdata = teste)\n\nAssim como no classificador, a função predict nos retorna a previsão dos tempos entre as erupções dado os tempos das durações das erupções."
  },
  {
    "objectID": "caret.html#mse",
    "href": "caret.html#mse",
    "title": "Avaliando Preditores - Introdução ao Pacote Caret",
    "section": "MSE",
    "text": "MSE\nAssim como há diversas formas de compararmos a qualidade dos classificadores, há também diversas formas de compararmos regressores. O que estudaremos agora é o MSE (mean squared error - erro quadrático médio). Mais formas de comparação de regressores também serão vistas futuramente.\nO MSE é a média de quanto os valores previstos para as observações se distanciaram dos valores verdadeiros dessa observação. Obtemos ele somando essas distâncias entre os valores previstos e os reais ao quadrado e dividindo por n.\n\\[\nMSE = \\frac{1}{n}\\sum_{i=1}^{n} \\left( Yreal_i - Yestimado_i \\right)^2\n\\]\n\nEx.: O erro quadrático médio para o problema de tempo de erupção do gêiser.\n\ndata(\"faithful\")\nhead(faithful)\n\n  eruptions waiting\n1     3.600      79\n2     1.800      54\n3     3.333      74\n4     2.283      62\n5     4.533      85\n6     2.883      55\n\n\n\n# Gráfico do tempo entre as erupções em função do tempo de erupção do gêiseres\nplot(faithful$eruptions, faithful$waiting, pch = 20, ylab=\"Tempo entre Erupções\",\n     xlab = \"Tempo de Erupção\", main = \"Tempo entre as erupções em função do tempo de erupção do gêiser\")\n\n\n\n\nPodemos notar que há uma relação linear positiva entre as variáveis. Vamos então ajustar um modelo de regressão linear.\n\nmodelo = lm(faithful$waiting~faithful$eruptions)\nplot(y = faithful$waiting, x = faithful$eruptions, pch = 20, ylab=\"Tempo entre erupções\",\n     xlab = \"Tempo de erupção\", main = \"Tempo entre as erupções em função do tempo de erupção do gêiser\")\nabline(modelo, col = \"red\", lwd = 2)\n\n\n\n\nNa reta de regressão temos todos os valores previstos para o tempo de erupção de acordo com os tempos de espera. Podemos então calcular o MSE para o nosso modelo utilizando o comando mse().\n\nmse = sum((teste$waiting-predicao)**2)/nrow(teste)\nmse\n\n[1] 32.41941\n\n\nEntão temos que, em média, o valor estimado para a variável de interesse no conjunto de teste se distancia do valor real observado em 32,41941 escores. Note que esta é uma medida que soma as distâncias ao quadrado, por isso o MSE é um número relativamente grande."
  },
  {
    "objectID": "teste-link.html",
    "href": "teste-link.html",
    "title": "APRENDIZADO DE MÁQUINA COM R",
    "section": "",
    "text": "Base Heart\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(downloadthis)\n\ndata = read.csv(\"/Users/luana.moreno/Documents/projeto-uff/Projeto de Pesquisa em Ciencia de Dados/Heart.csv\")\n\ndata %&gt;%\n  download_this(\n    output_name = \"Heart\",\n    output_extension = \".csv\",\n    button_label = \"Base Heart\",\n    button_type = \"primary\",\n    has_icon = TRUE,\n    icon = \"fa fa-save\"\n  )\n\n Base Heart"
  },
  {
    "objectID": "caret.html#avaliando-classificadores",
    "href": "caret.html#avaliando-classificadores",
    "title": "6  Avaliando Preditores - Introdução ao Pacote Caret",
    "section": "",
    "text": "y = é a variável resposta; será mantida a mesma proporção de cada classe nos conjuntos treino e teste. Para o nosso exemplo, será a variável type. Sendo assim, tanto no treino como no teste teremos a mesma proporção de e-mails spam e não spam.\np = porcentagem da amostra que será utilizada para o treino. Para o nosso exemplo, escolhemos 75%, mas a decisão final é do pesquisador.\nlist = argumento do tipo logical, se TRUE → os resultados serão mostrados em uma lista, se FALSE → os resultados serão mostrados em uma matriz.\n\n\nOBS: Esse comando deve ser utilizado apenas quando os dados são amostras independentes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nCaso deseje utilizar apenas algumas das variáveis explicativas, basta detalhar quais variáveis devem ser consideradas no modelo, como o exemplo abaixo:\n\nmodelo2 = train(type ~ your+money+capitalAve, data = treino, method = \"glm\")\n\n\n\n\n\n\n\n\n\n\n6.1.1 Matriz de Confusão (Confusion Matrix)\nA matriz de confusão é a matriz de comparação feita após a predição, onde as linhas correspondem ao que foi previsto e as colunas correspondem à verdade conhecida.\nExemplo: A matriz de confusão para o problema de predição dos e-mails em spam ou não spam fica da seguinta forma:\n\nOnde na primeira coluna se encontram os elementos que possuem a característica de interesse (os e-mails que são spam), e, respectivamente nas linhas, os que foram corretamente identificados - o qual são chamados de Verdadeiros Positivos (VP) - e os que foram erroneamente identificados - os Falsos Negativos (FP). Na segunda coluna se encontram os elementos que não possuem a característica de interesse (os e-mails que são ham) e, respectivamente nas linhas, os que foram erroneamente identificados - o qual são chamados de Falsos Positivos (FN) - e os que foram corretamente identificados - os Verdadeiros Negativos (VN).\nCom as devidas classificações a matriz de confusão fica da seguinte forma:\n\nDentro da função passamos as predições que obtemos pelo modelo ajustado e as reais classificações dos e-mails do conjunto teste.\n\nconfusionMatrix(predicao, teste$type)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction nonspam spam\n   nonspam     659   55\n   spam         38  398\n                                          \n               Accuracy : 0.9191          \n                 95% CI : (0.9018, 0.9342)\n    No Information Rate : 0.6061          \n    P-Value [Acc &gt; NIR] : &lt; 2e-16         \n                                          \n                  Kappa : 0.8295          \n                                          \n Mcnemar's Test P-Value : 0.09709         \n                                          \n            Sensitivity : 0.9455          \n            Specificity : 0.8786          \n         Pos Pred Value : 0.9230          \n         Neg Pred Value : 0.9128          \n             Prevalence : 0.6061          \n         Detection Rate : 0.5730          \n   Detection Prevalence : 0.6209          \n      Balanced Accuracy : 0.9120          \n                                          \n       'Positive' Class : nonspam         \n                                          \n\n\nA função retorna a matriz de confusão e alguns dados estatísticos, como por exemplo a Precisão (Accuracy), o Intervalo de Confiança com 95% de confiança (95% CI), a Sensibilidade (Sensitivity), Especificidade (Specificity), entre outros.\nPodemos notar que o GLM foi um bom modelo de treinamento para os nossos dados pois obtivemos altas taxas de acertos: uma precisão de 0,94, 0,96 de sensitividade e 0,90 de especificidade. Vamos ver melhor algumas dessas estatísticas:\nDefinição (Sensibilidade): A sensibilidade de um método de predição é a porcentagem dos elementos da amostra que possuem a característica de interesse e foram corretamente identificados. Para o nosso exemplo dos e-mails, a sensabilidade é a porcentagem dos e-mails que são spam e foram classificados pelo nosso algoritmo de predição como spam.\nOu seja, podemos escrever \\(Sensibilidade = \\frac{VP}{VP+FN}\\)\nDefinição (Especificidade): A especificidade de um método de predição é a porcentagem dos elementos da amostra que não possuem a característica de interesse e foram corretamente identificados. Para o nosso exemplo dos e-mails, a especificidade é a porcentagem dos e-mails que são “ham” e o algoritmo de predição os classificou como tal.\nOu seja, podemos escrever \\(Especificidade = \\frac{VN}{VN+FP}\\)\nQuando obtemos as sensibilidades e as especificidades de diferentes preditores, naturalmente surge o questionamente: qual deles é melhor para estimar as verdadeiras características de interesse? A resposta depende do que é mais importante para o problema.\nSe identificar corretamente os positivos for mais importante, utilizamos o preditor com maior sensibilidade. Se identificar corretamente os negativos for mais importante, utilizamos o preditor com maior especificidade.\nOutra medida para avaliar a qualidade do nosso preditor é a precisão (Accuracy). Ela avalia a porcentagem de acertos que tivemos em geral. Ou seja, somamos o número de Verdadeiros Positivos com o número de Verdadeiros Negativos e dividimos pelo tamanho da amostra. \\(Precisão = \\frac{VP+VN}{VP+VN+FN+FP}\\)\nPara demais medidas da matriz de confusão consulte o [apêndice].",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Avaliando Preditores - Introdução ao Pacote Caret</span>"
    ]
  },
  {
    "objectID": "caret.html#avaliando-regressores",
    "href": "caret.html#avaliando-regressores",
    "title": "6  Avaliando Preditores - Introdução ao Pacote Caret",
    "section": "6.2 Avaliando Regressores",
    "text": "6.2 Avaliando Regressores\nAgora vamos utilizar a base de dados faithful para tentar prever o tempo de espera (waiting) entre uma erupção e outra de um gêiser dado a duração das erupções (eruption).\n\ndata(\"faithful\")\nhead(faithful)\n\n  eruptions waiting\n1     3.600      79\n2     1.800      54\n3     3.333      74\n4     2.283      62\n5     4.533      85\n6     2.883      55\n\n\nPrimeiro, vamos separar a amostra em treino e teste.\n\nset.seed(39)\nnoTreino = createDataPartition(y=faithful$waiting, p=0.7, groups = 5, list=F)\ntreino = faithful[noTreino,]; teste = faithful[-noTreino,]\n\nQuando o argumento y é numérico, a amostra é dividida em grupos com base nos percentis e é feita uma amostragem estratificada. O número de percentis é definido pelo argumento groups.\nAgora temos que treinar nosso modelo. Para esse exemplo vamos usar a Regressão Linear (LM - Linear Regression).\n\nOs métodos disponíveis e seus usos podem ser encontrados no guia do caret.\n\nVamos treinar nosso modelo utilizando a amostra treino.\n\nmodelo = caret::train(waiting~eruptions, data = treino, method = \"lm\")\n\nNovamente, colocamos a variável que tentamos prever em função das outras. No caso, só temos duas variáveis então não precisamos colocar o ponto como no [classificador].\n\nmodelo\n\nLinear Regression \n\n192 samples\n  1 predictor\n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 192, 192, 192, 192, 192, 192, ... \nResampling results:\n\n  RMSE      Rsquared  MAE     \n  6.060639  0.805468  4.948071\n\nTuning parameter 'intercept' was held constant at a value of TRUE\n\n\nPodemos ver que temos 192 observações no conjunto treino e 1 preditor.\nAgora vamos aplicar nosso modelo na amostra teste para avaliar o erro dele.\n\npredicao = predict(modelo, newdata = teste)\n\nAssim como no classificador, a função predict nos retorna a previsão dos tempos entre as erupções dado os tempos das durações das erupções.\n\n6.2.1 MSE\nAssim como há diversas formas de compararmos a qualidade dos classificadores, há também diversas formas de compararmos regressores. O que estudaremos agora é o MSE (mean squared error - erro quadrático médio). Mais formas de comparação de regressores também serão vistas futuramente.\nO MSE é a média de quanto os valores previstos para as observações se distanciaram dos valores verdadeiros dessa observação. Obtemos ele somando essas distâncias entre os valores previstos e os reais ao quadrado e dividindo por n.\n\\[\nMSE = \\frac{1}{n}\\sum_{i=1}^{n} \\left( Yreal_i - Yestimado_i \\right)^2\n\\]\n\nEx.: O erro quadrático médio para o problema de tempo de erupção do gêiser.\n\ndata(\"faithful\")\nhead(faithful)\n\n  eruptions waiting\n1     3.600      79\n2     1.800      54\n3     3.333      74\n4     2.283      62\n5     4.533      85\n6     2.883      55\n\n\n\n# Gráfico do tempo entre as erupções em função do tempo de erupção do gêiseres\nplot(faithful$eruptions, faithful$waiting, pch = 20, ylab=\"Tempo entre Erupções\",\n     xlab = \"Tempo de Erupção\", main = \"Tempo entre as erupções em função do tempo de erupção do gêiser\")\n\n\n\n\n\n\n\n\nPodemos notar que há uma relação linear positiva entre as variáveis. Vamos então ajustar um modelo de regressão linear.\n\nmodelo = lm(faithful$waiting~faithful$eruptions)\nplot(y = faithful$waiting, x = faithful$eruptions, pch = 20, ylab=\"Tempo entre erupções\",\n     xlab = \"Tempo de erupção\", main = \"Tempo entre as erupções em função do tempo de erupção do gêiser\")\nabline(modelo, col = \"red\", lwd = 2)\n\n\n\n\n\n\n\n\nNa reta de regressão temos todos os valores previstos para o tempo de erupção de acordo com os tempos de espera. Podemos então calcular o MSE para o nosso modelo utilizando o comando mse().\n\nmse = sum((teste$waiting-predicao)**2)/nrow(teste)\nmse\n\n[1] 32.41941\n\n\nEntão temos que, em média, o valor estimado para a variável de interesse no conjunto de teste se distancia do valor real observado em 32,41941 escores. Note que esta é uma medida que soma as distâncias ao quadrado, por isso o MSE é um número relativamente grande.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Avaliando Preditores - Introdução ao Pacote Caret</span>"
    ]
  },
  {
    "objectID": "cross-valid.html#alguns-métodos-de-reamostragem",
    "href": "cross-valid.html#alguns-métodos-de-reamostragem",
    "title": "7  Cross Validation (Validação Cruzada)",
    "section": "",
    "text": "7.1.1 K-fold\nEste método consiste em fatiar os dados em k pedaços iguais. Utilizamos um pedaço para o teste e os demais para o treino. Então realizamos esse procedimento k vezes, de modo que em cada repetição um novo pedaço seja utilizado para o teste. Para avaliar o erro nós tiramos a média de todos os erros de todas as replicações.\nExemplo: K-fold com 10 partes:\n\n\n\n\n\nQuanto maior o k escolhido obtemos menos viés, porém mais variância. Em outras palavras, você terá uma estimativa muito precisa do viés entre os valores previstos e os valores verdadeiros, porém altamente variável. Agora quanto menor o k escolhido, mais viés e menos variância. Ou seja, não iremos necessariamente obter uma boa estimativa do viés, mas ela será menos variável.\nOBS: Quando o k é igual ao tamanho da amostra, o método é também conhecido como leave-one-out.\nEx.: vamos utilizar reamostragem por k-fold no conjunto de dados spam.\n\nlibrary(caret)\nlibrary(kernlab)\ndata(spam)\nnoTreino = createDataPartition(y = spam$type, p = 0.75, list = F)\ntreino = spam[noTreino,]\nteste = spam[-noTreino,]\n# Para fazer a reamostragem por k-fold vamos utilizar o comando createFolds():\nfolds = createFolds(y = spam$type, k = 10, list = T, returnTrain = T)\n\nOs principais argumentos da função createFolds() são:\n\ny = a variável de interesse (no nosso caso, o tipo do e-mail);\nk = o número (inteiro) de partições que você deseja.\nlist = argumento do tipo logical. Se TRUE → os resultados serão mostrados em uma lista, se FALSE → os resultados serão mostrados em uma matriz.\nreturnTrain = argumento do tipo logical. Se TRUE, retorna amostras treino. Se FALSE, retorna amostras teste.\n\nVamos verificar o tamanho de cada partição da nossa amostra treino:\n\nsapply(folds,length)\n\nFold01 Fold02 Fold03 Fold04 Fold05 Fold06 Fold07 Fold08 Fold09 Fold10 \n  4141   4142   4142   4140   4140   4140   4141   4141   4141   4141 \n\n\nAgora vamos fazer o mesmo para a amostra teste:\n\nfolds = createFolds(y = spam$type, k = 10, list = T, returnTrain = F)\nsapply(folds,length)\n\nFold01 Fold02 Fold03 Fold04 Fold05 Fold06 Fold07 Fold08 Fold09 Fold10 \n   461    460    460    460    460    461    460    459    460    460 \n\n\nOutra opção de realizar a reamostragem por k-fold é aplicá-la diretamente na função train.\n\ncontrole = trainControl(method = \"cv\", number = 10)\nmodelo = caret::train(type ~ ., data = spam, method = \"glm\", trControl = controle)\n\n\n\n7.1.2 Repeated K-fold\nO repeated k-fold se resume a repetir o método k-fold várias vezes, com o objetivo de melhorar nossa reamostragem.\nEx.: Vamos aplicar um método de treino 3 vezes em 10 folds.\n\ncontrole = trainControl(method = \"repeatedcv\", number = 10, repeats = 3)\nmodelo = caret::train(type ~ ., data = spam, method = \"glm\", trControl = controle)\n\n\n\n7.1.3 Bootstrap\nO bootstrap é uma técnica de reamostragem com o propósito de reduzir desvios e realizar amostragem dos dados de treino com repetições. Já vimos anteriormente que este é o método default do comando train(), onde é feito 25 reamostragens por bootstrap.\nEmbora esse seja o padrão podemos alterar através do comando trainControl(). Por exemplo, vamos alterar o número de reamostragens de 25 para 10.\n\ncontrole = trainControl(method = \"boot\", number = 10)\nmodelo = train(type ~ ., data = spam, method = \"glm\", trControl = controle)\n\nPodemos também realizarmos bootstrap fora da função train(), utilizando o comando createResample().\n\nfolds = createResample(y = spam$type, times = 10, list = F)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cross Validation (Validação Cruzada)</span>"
    ]
  },
  {
    "objectID": "comp-func.html",
    "href": "comp-func.html",
    "title": "8  Comparando Funções Preditoras",
    "section": "",
    "text": "Como já foi dito em capítulos anteriores, existem diversas formas de comparar preditores. Nesse capítulo, vamos estudar um meio de fazer isso e ver mais detalhadamente as medidas de comparação que o R retorna ao usarmos esse método.\n\n8.0.1 Exemplo de Comparação de Regressores - base faithful\nVamos usar a base de dados faithful já presente no R.\n\ndata(\"faithful\")\n# verificando a estrutura da base\nstr(faithful)\n\n'data.frame':   272 obs. of  2 variables:\n $ eruptions: num  3.6 1.8 3.33 2.28 4.53 ...\n $ waiting  : num  79 54 74 62 85 55 88 85 51 85 ...\n\n\nNote que a base apresenta apenas duas variáveis: eruptions, que contém uma amostra corresponde ao tempo em minutos que o gêiser Old Faithful permanece em erupção e waiting, que contém uma amostra correspondente ao tempo em minutos até a próxima erupção. Vamos tentar prever a variável waiting através da variável eruptions. Note ainda que a variável de interesse é quantitativa contínua, portanto queremos construir um regressor.\nVamos treinar nosso modelo utilizando 3 métodos separadamente: linear model, Projection Pursuit Regression e k-Nearest Neighbor. Para fazer a comparação, vamos colocar a mesma semente antes de cada treino para que todos sejam feitos da mesma forma e assim torne a comparação mais “justa”. Note também que estamos usando toda a base de dados pra treinar o medelo. Isso porque estamos apenas avaliando o melhor modelo.\n\nlibrary(caret)\n# usando o método de validação cruzada tiramos a dependência da amostra\nTC = trainControl(method=\"repeatedcv\", number=10,repeats=3)\nset.seed(371)\nmodelo_lm = train(waiting~eruptions, data=faithful, method=\"lm\", trControl=TC)\nset.seed(371)\nmodelo_ppr = train(waiting~eruptions, data=faithful, method=\"ppr\", trControl=TC)\nset.seed(371)\nmodelo_knn = train(waiting~eruptions, data=faithful, method=\"knn\", trControl=TC)\n\nAgora, como sabemos qual desses é o melhor modelo para nosso Regressor?\n\nresultados = resamples(list(LM=modelo_lm, PPR=modelo_ppr, KNN=modelo_knn))\nsummary(resultados)\n\n\nCall:\nsummary.resamples(object = resultados)\n\nModels: LM, PPR, KNN \nNumber of resamples: 30 \n\nMAE \n        Min.  1st Qu.   Median     Mean  3rd Qu.     Max. NA's\nLM  3.816660 4.396526 4.723050 4.792316 5.063279 6.087023    0\nPPR 3.847465 4.329571 4.638090 4.728487 5.133559 5.980745    0\nKNN 3.565922 4.380002 4.717796 4.735160 5.167973 5.909983    0\n\nRMSE \n        Min.  1st Qu.   Median     Mean  3rd Qu.     Max. NA's\nLM  4.769227 5.375918 5.919905 5.877351 6.204474 7.037539    0\nPPR 4.775950 5.258969 5.871960 5.725215 6.099465 6.865713    0\nKNN 4.564997 5.308376 5.828188 5.773268 6.275956 6.892789    0\n\nRsquared \n         Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA's\nLM  0.7232859 0.7855436 0.8198045 0.8154236 0.8443912 0.8715797    0\nPPR 0.7461656 0.7964453 0.8243005 0.8241913 0.8567375 0.8812427    0\nKNN 0.7636897 0.7964592 0.8227743 0.8218778 0.8453996 0.8771367    0\n\n\nRepare que foi calculada três diferentes medidas: “MAE”, “RMSE”, e “Rsquared”.\nO Erro Médio Absoluto (MAE - Mean Absolute Error) é dado pelo média dos desvios absolutos. \\[MAE = \\frac{\\sum\\limits_{i=1}^{n}\\mid estimado_i - real_i\\mid}{n}\\quad, i=1,2,...,n.\\]\nA Raiz do Erro Quadrático Médio (RMSE - Root Mean Squared Error), como o nome já diz, não é nada mais que a raiz quadrada do Erro Quadrático Médio já citado no capítulo de [Tipos de Erro]. \\[RMSE=\\sqrt{MSE}=\\sqrt{\\frac{\\sum\\limits_{i=1}^{n} \\left( estimado_i-real_i \\right)^{2}}{n}}\\quad, i=1,2,...,n.\\]\nO Coeficiente de Determinação, Também chamado de \\(R^2\\) (R squared), é dado pela razão entre o MSE e a Variância subtraído de 1. \\[R^2 =1- \\frac{MSE}{Var}= 1-\\frac{\\sum\\limits_{i=1}^{n} (real_i - estimado_i)^2}{\\sum\\limits_{i=1}^{n} (real_i - média)^2}\\quad, i=1,2,...,n.\\]\nPortanto, queremos o modelo que possua MAE e RMSE baixo e \\(R^2\\) alto. Para vizualizar melhor, podemos construir um boxplot comparativo da seguinte forma:\n\n# Ajustando as escalas dos gráficos:\nescala &lt;- list(x=list(relation=\"free\"), y=list(relation=\"free\"))\n# Plotando os dados:\nbwplot(resultados, scales=escala)\n\n\n\n\n\n\n\n\n\nOs boxplots revelam que o modelo linear apresenta a uma mediana ruim nas três métricas comparativas, com os dados mais dispersos, especialmente no \\(R^2\\), indicando alta variabilidade. Em contrapartida, tanto o KNN quanto o PPR mostram uma concentração maior dos dados no RMSE e no \\(R^2\\). A análise sugere que o NN oferece um desempenho ligeiramente superior ao PPR, mas uma investigação mais detalhada é necessária para confirmar essa diferença.\n\nlibrary(lattice)\n# Comparando o comportamento de cada fold nos modelos KNN e PPR\nxyplot(resultados, models=c(\"PPR\", \"KNN\"))\n\n\n\n\n\n\n\n\nNote que a maior parte dos folds está acima da diagonal, indicando que o KNN tem um erro absoluto médio (MAE) menor que o PPR. Vamos olhar novamente para o cálculo que fizemos mais acima.\n\nresultados = resamples(list(LM=modelo_lm, PPR=modelo_ppr, KNN=modelo_knn))\nsummary(resultados)\n\n\nCall:\nsummary.resamples(object = resultados)\n\nModels: LM, PPR, KNN \nNumber of resamples: 30 \n\nMAE \n        Min.  1st Qu.   Median     Mean  3rd Qu.     Max. NA's\nLM  3.816660 4.396526 4.723050 4.792316 5.063279 6.087023    0\nPPR 3.847465 4.329571 4.638090 4.728487 5.133559 5.980745    0\nKNN 3.565922 4.380002 4.717796 4.735160 5.167973 5.909983    0\n\nRMSE \n        Min.  1st Qu.   Median     Mean  3rd Qu.     Max. NA's\nLM  4.769227 5.375918 5.919905 5.877351 6.204474 7.037539    0\nPPR 4.775950 5.258969 5.871960 5.725215 6.099465 6.865713    0\nKNN 4.564997 5.308376 5.828188 5.773268 6.275956 6.892789    0\n\nRsquared \n         Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA's\nLM  0.7232859 0.7855436 0.8198045 0.8154236 0.8443912 0.8715797    0\nPPR 0.7461656 0.7964453 0.8243005 0.8241913 0.8567375 0.8812427    0\nKNN 0.7636897 0.7964592 0.8227743 0.8218778 0.8453996 0.8771367    0\n\n\nPodemos notar que o KNN tem uma posição melhor que o PPR em todas as medidas. Como saber se essa diferença é significativa? Vamos calcular as diferenças entre os dois modelos e avaliar através do p-valor.\n\n#Calcular diferença entre modelos, e realizar\n#testes de hipótese para as diferenças.\ndiferencas = diff(resultados)\nsummary(diferencas)\n\n\nCall:\nsummary.diff.resamples(object = diferencas)\n\np-value adjustment: bonferroni \nUpper diagonal: estimates of the difference\nLower diagonal: p-value for H0: difference = 0\n\nMAE \n    LM   PPR       KNN      \nLM        0.063829  0.057156\nPPR 0.18           -0.006673\nKNN 1.00 1.00               \n\nRMSE \n    LM       PPR      KNN     \nLM            0.15214  0.10408\nPPR 0.002181          -0.04805\nKNN 0.422993 0.946570         \n\nRsquared \n    LM      PPR       KNN      \nLM          -0.008768 -0.006454\nPPR 0.01111            0.002313\nKNN 0.54786 1.00000            \n\n\nObserve que, para cada medida, acima da diagonal temos a diferença entre os modelos e abaixo da diagonal o p-valor do teste de comparação entre eles. Portanto, se considerarmos um nível de significância de 1%, é razoável dizer que os modelos PPR e KKN produzem resultados significativamente diferentes. Sendo assim, escolheriamos o método KNN para treinar nosso modelo.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparando Funções Preditoras</span>"
    ]
  },
  {
    "objectID": "erros-amostrais.html",
    "href": "erros-amostrais.html",
    "title": "5  Erros Amostrais",
    "section": "",
    "text": "5.1 Erro dentro da Amostra (In Sample Error)\nA taxa de erro dentro da amostra refere-se ao erro calculado no mesmo conjunto de dados utilizado para treinar o modelo preditivo. Na literatura, isso é frequentemente denominado como “erro de resubstituição”. Em outras palavras, essa taxa de erro mede o quanto algoritmo de previsão se ajusta exatamente aos mesmos dados utilizados para o treinamento do modelo. No entanto, quando o modelo é aplicado a um novo conjunto de dados, é esperado que essa precisão diminua.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Erros Amostrais</span>"
    ]
  },
  {
    "objectID": "metodos-de-treino-baseados-em-arvore.html",
    "href": "metodos-de-treino-baseados-em-arvore.html",
    "title": "10  Métodos de Treino Baseados em Árvore",
    "section": "",
    "text": "10.1 Árvores de Decisão\nUma árvore de decisão, em geral, pergunta uma questão e classifica o elemento baseado na resposta. Ela utiliza os dados de cada indivíduo para criar uma regra de separação, que posteriormente será utilizada para rotular novas amostras.\nAs árvores de decisão podem ser aplicadas aos problemas de regressão e classificação. Primeiro vamos considerar os problemas de classificação, e depois passamos para a regressão.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Métodos de Treino Baseados em Árvore</span>"
    ]
  },
  {
    "objectID": "metodos-de-treino-baseados-em-arvore.html#em-classificação",
    "href": "metodos-de-treino-baseados-em-arvore.html#em-classificação",
    "title": "10  Métodos de Treino Baseados em Árvore",
    "section": "10.2 em Classificação",
    "text": "10.2 em Classificação\nVejamos a seguir um exemplo de árvore de decisão para um problema de classificação.\n\n\n\n\n\nNomenclatura:\n\nNó Raiz ou Raiz: é a variável que se encontra no topo da árvore;\nNós Internos ou Nós: são as variáveis intermediárias, que possuem tanto setas apontandas para elas como saindo delas;\nNós Folhas ou Nós Terminais ou Folhas: possuem apenas setas apontadas para elas. Representam a decisão final da árvore.\n\n\n\n\n\n\nNo processo de construção de uma árvore de decisão é importante ressaltar que a separação dos dados deve envolver apenas duas respostas: “Sim” ou “Não”. Também é preciso definir a ordem das variáveis, como a variável com que se deve começar, qual deve ser a seguinte, e assim por diante. A solução para isso é obtida através do nível de impureza das variáveis.\nDizemos que uma variável é impura quando ela não consegue separar bem os dados em uma árvore de decisão. Para calcularmos a impureza de uma variável utilizamos o indíce Gini, que varia entre 0 (mais puro possível) e 0,5 (mais impuro possível). Primeiramente calculamos o índice Gini para cada nó da variável, e em seguida obtemos o índice Gini da variável como uma média ponderada. O índice Gini de um nó é obtido por:\nGini(nó) = 1 - \\(p_{S}^2\\) - \\(p_{N}^2\\), onde \\(p_{S^2}\\) é a proporção de “sim” da resposta da variável de interesse e\\(p_{N}\\) a proporção de “não” da resposta da variável de interesse.\nO índice Gini da variável é dado pela média do índice Gini para os nós referentes às respostas “Sim” e “Não” ponderada pela proporção dos elementos em cada nó.\nGini(variável) = Gini(nó\\(_1\\)) \\(\\times\\) \\(P_1\\) + Gini(nó\\(_2\\)) \\(\\times\\) \\(P_2\\)\n\nbase = readRDS(\"SmallHeart.rds\")\nhead(base)\n\n  Sex  ChestPain       Thal HeartDisease\n1   1    typical      fixed           No\n2   0 nontypical     normal           No\n3   1 nontypical     normal           No\n4   0 nontypical     normal           No\n5   1 nontypical reversable           No\n6   1 nontypical reversable          Yes\n\n\nNosso objetivo é prever se um indivíduo tem ou não uma doença cardíaca (variável “HeartDisease”), baseado nas outras variáveis. As variáveis explicativas são as seguintes:\n\nSex: indica o sexo do indivíduo, onde “M” = Masculino e “F” = Feminino;\nChestPain: referente ao indivíduo sentir dor no peito, onde “typical” = típico e “nontypical” = não típico;\nThal: indica se o indivíduo possui Talassemia, onde “normal” = não possui, “fixed” = talassemia irreversível e “reversable” = talassemia reversível.\n\nVamos verificar o quão bem as variáveis isoladamente são capazes de prever se o paciente possui ou não doença cardíaca. Vamos começar pela variável “Sex”.\n\nsummary(base$Sex)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  1.0000  0.6944  1.0000  1.0000 \n\n\nNote que temos 22 indivíduos do sexo feminino e 50 indivíduos do sexo masculino. Como a resposta de um nó da árvore deve ser “Sim” ou “Não”, vamos utilizar a variável “Sex=M”.\n\nlibrary(dplyr)\n\n\n# Verificando quantos indivíduos possuem doença cardíaca de acordo com o sexo:\n\nbase %&gt;% group_by(Sex, HeartDisease) %&gt;% summarise(N=n())\n\n# A tibble: 4 × 3\n# Groups:   Sex [2]\n    Sex HeartDisease     N\n  &lt;int&gt; &lt;chr&gt;        &lt;int&gt;\n1     0 No              20\n2     0 Yes              2\n3     1 No              36\n4     1 Yes             14\n\n\nEntão a variável “Sex=M” separa os pacientes da seguinte forma:\n\n\n\n\n\nNote que a maioria dos pacientes com doença cardíaca terminaram na folha referente ao sexo masculino, mas a maioria dos que não possuem doença também. Já podemos ter uma ideia que essa variável não é tão boa em separar os dados, mas para averiguarmos essa hipótese vamos calcular o índice gini dela.\nPrimeiramente vamos calcular o índice Gini do nó “Sex = M Sim”:\n\\(Gini(Sex = M Sim)\\) = 1 - \\(\\left(\\frac{14}{50}\\right)^2\\) - \\(\\left(\\frac{36}{50}\\right)^2\\) = \\(0,403\\)\nAgora vamos calcular o índice Gini do nó “Sex = M Não”:\n\\(Gini(Sex = M Não)\\) = 1 - \\(\\left(\\frac{2}{22}\\right)^2\\) - \\(\\left(\\frac{20}{22}\\right)^2\\) = \\(0,166\\)\nO índice Gini da variável “Sex = M” é dado pela média do índice Gini dos nós referentes às respostas “Sim” e “Não” ponderada pela frequência dos indivíduos em cada nó.\n\\(Gini(Sex = M)\\) = \\(0,403\\)\\(\\times\\)\\(\\left(\\frac{50}{72}\\right)\\) + \\(0,166\\) \\(\\times\\) \\(\\left(\\frac{22}{72}\\right)\\) = \\(0,331\\)\nComo o índice Gini da variável “Sex = M” ficou mais próximo de 0,5 do que de 0, podemos constatar que ela é uma variável com baixa pureza. Note que se tivéssemos escolhido a variável “Sex = F” o índice Gini obtido seria o mesmo, pois “Sex = F Sim” é equivalente a “Sex = M Não” e “Sex = F Não” é equivalente a “Sex = M Sim”. ou seja, as contas seriam as mesmas.\nAgora vamos realizar o mesmo processo para a variável “ChestPain”, ou seja, vamos verificar o quão bem ela é capaz de prever se o paciente possui doença cardíaca.\n\nbase %&gt;% group_by(ChestPain) %&gt;% summarise(N=n())\n\n# A tibble: 2 × 2\n  ChestPain      N\n  &lt;chr&gt;      &lt;int&gt;\n1 nontypical    49\n2 typical       23\n\n\nNote que temos 23 indivíduos que sentem dor no peito tipicamente e 49 indivíduos que não sentem tipicamente. Vamos verificar quantos deles possuem doença cardíaca:\n\nbase %&gt;% group_by(ChestPain, HeartDisease) %&gt;% summarise(N=n())\n\n# A tibble: 4 × 3\n# Groups:   ChestPain [2]\n  ChestPain  HeartDisease     N\n  &lt;chr&gt;      &lt;chr&gt;        &lt;int&gt;\n1 nontypical No              40\n2 nontypical Yes              9\n3 typical    No              16\n4 typical    Yes              7\n\n\nVamos considerar a variável “ChestPain = Typical”. Ela separa os dados da seguinte forma:\n\n\n\n\n\nNote que quase metade dos pacientes que possuem dor no peito têm doença cardíaca. Dos que não sentem a dor no peito, quase \\(\\frac{1}{4}\\) apenas possui a doença.\nVamos calcular o índice Gini do nó “ChestPain = Typical Sim”:\n\\(Gini(ChestPain = Typical Sim)\\) = 1 -\\(\\left(\\frac{7}{23}\\right)^2\\) -\\(\\left(\\frac{16}{23}\\right)^2\\) =\\(0,423\\)\nAgora vamos calcular o índice Gini do nó “ChestPain = Typical Não”:\n\\(Gini(ChestPain = Typical Não)\\) = 1 -\\(\\left(\\frac{9}{49}\\right)^2\\) -\\(\\left(\\frac{40}{49}\\right)^2\\) =\\(0,299\\)\nO índice Gini da variável “ChestPain = Typical” é dado pela média do índice Gini dos nós referentes às respostas “Sim” e “Não” ponderada pela frequência dos indivíduos em cada nó.\n\\(Gini(Sex = M)\\) = \\(0,423\\)\\(\\times\\)\\(\\left(\\frac{23}{72}\\right)\\) +\\(0,299\\)\\(\\times\\)\\(\\left(\\frac{49}{72}\\right)\\) =\\(0,339\\)\nNote que ela obteve um índice Gini um pouco maior do que a variável “Sex = M”. Isso indica que a variável “Sex = M” é mais pura do que a variável “ChestPain = Typical”.\nAgora falta apenas obter o índice Gini da variável “Thal”. Mas diferentemente das outras 2 ela não possui apenas 2 níveis, e sim 3: “normal”, “fixed” e “reversable”.\n\nbase %&gt;% group_by(Thal) %&gt;% summarise(N=n())\n\n# A tibble: 3 × 2\n  Thal           N\n  &lt;chr&gt;      &lt;int&gt;\n1 fixed          4\n2 normal        52\n3 reversable    16\n\n\nNesse caso vamos ter que calcular o índice Gini para todas as combinações possíveis: “Thal = normal”, “Thal = fixed”, “Thal = reversable”, “Thal = normal ou fixed”, “Thal = normal ou reversable”, “Thal = fixed ou reversable”. Porém note que o índice Gini da variável “Thal = normal” é equivalente ao da variável “Thal = fixed ou reversable”, pois “Thal = normal Sim” é o mesmo que “Thal = fixed ou reversable Não”. Da mesma forma isso vale para as variáveis “Thal = fixed” e “Thal = normal ou reversable”, e “Thal = reversable” e “Thal = normal ou fixed”. Com isso conseguimos economizar algumas contas.\n\nbase %&gt;% group_by(Thal, HeartDisease) %&gt;% summarise(N=n())\n\n# A tibble: 6 × 3\n# Groups:   Thal [3]\n  Thal       HeartDisease     N\n  &lt;chr&gt;      &lt;chr&gt;        &lt;int&gt;\n1 fixed      No               3\n2 fixed      Yes              1\n3 normal     No              44\n4 normal     Yes              8\n5 reversable No               9\n6 reversable Yes              7\n\n\nVamos, primeiramente, olhar para a variável “Thal = normal”. Ela separa os dados da seguinte forma:\n\n\n\n\n\nNote que a maioria dos pacientes que possuem doença cardíaca estão no grupo dos que possuem “Thal = normal”.\nVamos calcular o índice Gini do nó “Thal = Normal Sim”:\n\\(Gini(Thal = Normal Sim)\\) = 1 -\\(\\left(\\frac{8}{52}\\right)^2\\) -\\(\\left(\\frac{44}{52}\\right)^2\\) =\\(0,260\\)\nAgora vamos calcular o índice Gini do nó “Thal = Normal Não”:\n\\(Gini(Thal = Normal Não)\\) = 1 -\\(\\left(\\frac{8}{20}\\right)^2\\) -\\(\\left(\\frac{12}{20}\\right)^2\\) =\\(0,480\\)\nEntão o índice Gini da variável “Thal = Normal” fica da seguinte forma:\n\\(Gini(Thal = Normal)\\) =\\(0,260\\)\\(\\times\\)\\(\\left(\\frac{52}{70}\\right)\\) +\\(0,480\\)\\(\\times\\)\\(\\left(\\frac{20}{72}\\right)\\) =\\(0,321\\)\nAgora vamos olhar para a variável “Thal = Fixed”. Ela separa os dados da seguinte forma:\n\n\n\n\n\nVamos calcular o índice Gini do nó “Thal = Fixed Sim”:\n\\(Gini(Thal = Fixed Sim)\\) = 1 -\\(\\left(\\frac{1}{4}\\right)^2\\) -\\(\\left(\\frac{3}{4}\\right)^2\\) =\\(0,375\\)\nAgora vamos calcular o índice Gini do nó “Thal = Fixed Não”:\n\\(Gini(Thal = Fixed Não)\\) = 1 -\\(\\left(\\frac{15}{68}\\right)^2\\) -\\(\\left(\\frac{53}{68}\\right)^2\\) =\\(0,344\\)\nEntão o índice Gini da variável “Thal = Fixed” fica da seguinte forma:\n\\(Gini(Thal = Fixed)\\) =\\(0,375\\)\\(\\times\\)\\(\\left(\\frac{4}{72}\\right)\\) +\\(0,344\\)\\(\\times\\)\\(\\left(\\frac{68}{72}\\right)\\) =\\(0,346\\)\nPor último, vamos olhar para a variável “Thal = Reversable”.\n\n\n\n\n\nVamos calcular o índice Gini do nó “Thal = Reversable Sim”:\n\\(Gini(Thal = Reversable Sim)\\) = 1 -\\(\\left(\\frac{7}{16}\\right)^2\\) -\\(\\left(\\frac{9}{16}\\right)^2\\) =\\(0,492\\)\nAgora vamos calcular o índice Gini do nó “Thal = Reversable Não”:\n\\(Gini(Thal = Reversable Não)\\) = 1 -\\(\\left(\\frac{9}{56}\\right)^2\\) -\\(\\left(\\frac{47}{56}\\right)^2\\) =\\(0,269\\)\nEntão o índice Gini da variável “Thal = Reversable” fica da seguinte forma:\n\\(Gini(Thal = Reversable)\\) =\\(0,492\\)\\(\\times\\)\\(\\left(\\frac{16}{72}\\right)\\) +\\(0,269\\)\\(\\times\\)\\(\\left(\\frac{56}{72}\\right)\\) =\\(0,319\\)\nResumindo, os índices Ginis de todas as variáveis são:\n\n\n\nVariáveis\nÍndice Gini\n\n\n\n\nSex = M\n0,331\n\n\nChestPain = Typical\n0,339\n\n\nThal = Normal\n0,321\n\n\nThal = Fixed\n0,346\n\n\nThal = Reversable\n0,319\n\n\n\nA variável “Thal = Reversable” é a que possui o menor índice Gini, portanto ela é a mais pura. Ela ficará no topo da árvore de decisão, ou seja, será o nó raiz.\n\n\n\n\n\nO próximo passo é definir as variáveis que ficarão no nó “Thal = Reversable Sim” e “Thal = Reversable Não”. Para isso temos que olhar para a base de dados com os indivíduos do grupo “Thal = Reversable Sim” e “Thal = Reversable Não”, respectivamente.\n\n# Grupo de indivíduos \"Thal = Reversable Sim\":\nbase1 = base %&gt;% filter(Thal == \"reversable\")\nhead(base1)\n\n  Sex  ChestPain       Thal HeartDisease\n1   1 nontypical reversable           No\n2   1 nontypical reversable          Yes\n3   1    typical reversable           No\n4   1 nontypical reversable           No\n5   1 nontypical reversable          Yes\n6   1    typical reversable          Yes\n\n\nAgora temos que calcular o índice Gini para todas as variáveis referentes a esse grupo. A que for mais pura entrará no nó “Thal = Reversable Sim”. Poupando os cálculos, vamos obter que o menor índice Gini é o da variável “ChestPain = Typical”.\n\n# Grupo de indivíduos \"Thal = Reversable Não\":\nbase2 = base %&gt;% filter(Thal != \"reversable\")\nhead(base2)\n\n  Sex  ChestPain   Thal HeartDisease\n1   1    typical  fixed           No\n2   0 nontypical normal           No\n3   1 nontypical normal           No\n4   0 nontypical normal           No\n5   1 nontypical normal           No\n6   1    typical normal           No\n\n\nAgora calculamos também o índice Gini para todas as variáveis referentes a esse grupo. Após os cálculos necessários veremos que o menor índice Gini é o da variável “ChestPain = Nontypical”.\nDessa forma, podemos dar continuidade a nossa árvore.\n\n\n\n\n\nApós obtidos esses novos nós, o processo continua se repetindo, obtendo novos nós e/ou folhas para a árvore, até a construção chegar ao fim.\nPergunta: quando o processo de construção de uma árvore chega ao fim? O processo de construção pode terminar por 3 fatores:\n\nQuando a pureza do nó é maior do que o de qualquer variável que adicionamos;\nQuando atingimos folhas 100% puras (índice Gini = 0);\nQuando o ganho ao aumentar a árvore é muito pequeno.\n\nO ganho ao aumentar a árvore pode ser resumido como um conjunto de atributos presentes na árvore que retornem o maior ganho de informações. Essa questão será melhor abordada posteriormente, juntamente com a questão de como podar as árvores (que está intimamente relacionada ao ganho) no subcapítulo XGBoost.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Métodos de Treino Baseados em Árvore</span>"
    ]
  },
  {
    "objectID": "metodos-de-treino-baseados-em-arvore.html#em-regressão",
    "href": "metodos-de-treino-baseados-em-arvore.html#em-regressão",
    "title": "10  Métodos de Treino Baseados em Árvore",
    "section": "10.3 Em Regressão",
    "text": "10.3 Em Regressão\nAgora iremos discutir o processo de construção de uma árvore de regressão. Em uma árvore de regressão, diferentemente de uma árvore para classificação, cada folha possui um valor numérico (ao invés de categorias como “Sim” ou “Não”, como no exemplo anterior da base SmallHeart). Vejamos a seguir um exemplo de árvore de decisão para um problema de regressão.\n\n\n\n\n\nEsse valor numérico presente nas folhas não é nada menos que a média do valor da variável de interesse a ser prevista para os elementos que satisfazem a condição do nó. Por exemplo, na árvore de regressão acima a primeira folha dá como resultado uma eficácia de 5%: essa foi a média observada da eficácia do medicamento em pacientes com mais de 50 anos de idade. Para a segunda folha, a com eficácia de 20%: esse valor é a média da eficácia do medicamento em um indivíduo com menos de 50 anos de idade e que toma uma dosagem maior do que 29mg foi de 20%. O processo é o mesmo para as outras folhas.\nA grande pergunta é qual valor colocar no nó como condição. Para exemplificar como funciona o processo, vamos começar com um exemplo simples:\nEx.: Vamos carregar o banco de dados “SmallAdvertising”. Este banco possui informações sobre as vendas de um produto em 10 mercados diferentes (variável sales), além de orçamentos de publicidade para esse produto em cada um dos mercados para três mídias diferentes: TV, rádio e jornal (variáveis TV, radio e newspaper, respectivamente).\n\nvendas = readRDS(\"SmallAdvertising.rds\")\n\nvendas\n\n      TV radio newspaper sales\n1  200.0   2.6      21.2  10.6\n2   66.1   5.8      24.2   8.6\n3  215.0  24.0       4.0  17.4\n4   23.8  35.1      65.9   9.2\n5   97.5   7.6       7.2   9.7\n6  204.0  32.9      46.0  19.0\n7  195.0  47.7      52.9  22.4\n8   67.8  36.6     114.0  12.5\n9  281.0  39.6      55.8  24.4\n10  69.2  20.5      18.3  11.3\n11 147.0  23.9      19.1  14.6\n\n\nVamos considerar o caso em que queremos construir uma árvore de regressão para prever as vendas baseados apenas na variável TV.\n\nplot(vendas$TV, vendas$sales, pch = 19,\n     xlab = \"Orçamento de Publicidade do Produto para a TV\",\n     ylab = \"Vendas do Produto\",\n     main = \"Vendas do produto x Publicidade para a TV\")\n\n\n\n\n\n\n\n\nPrimeiramente é preciso definir qual valor irá entrar como condição no primeiro nó. O algoritmo realiza isso testando todos os possíveis valores de separação para os dados, e pega o que minimiza a soma dos quadrados dos resíduos. Inicialmente, como o primeiro separador, ele considera a média dos 2 menores valores da Publicidade.\n\nordenados = sort(vendas$TV)\nmean(ordenados[1:2])\n\n[1] 44.95\n\n\nEntão 44,95 é o primeiro valor a ser testado para a separação dos dados.\n\nplot(vendas$TV, vendas$sales, pch = 19,\n     xlab = \"Orçamento de Publicidade do Produto para a TV\",\n     ylab = \"Vendas do Produto\",\n     main = \"Vendas do produto x Publicidade para a TV\"); abline(v = 44.95,\n                                                                 col = \"red\")\n\n\n\n\n\n\n\n\nAssim, o primeiro nó será da seguinte forma:\n\n\n\n\n\nPara a resposta “sim” prevemos que as vendas do produto será de 9,2, o qual é o resultado da média dos valores das vendas para todos os produtos cuja publicidade foi menor do que 44,95 (ou seja, é apenas o valor do primeiro elemento). Para a resposta “Não”, então a folha seguinte contém o resultado da média dos valores das vendas para todos os produtos cuja publicidade foi maior do que 44,95, o qual é de 15,05.\nNote que fazendo isso teremos resíduos (diferença do valor original e do valor predito pela árvore) muito grandes. O algoritmo eleva esses resíduos ao quadrado e os soma. Esse valor é a soma dos quadrados dos resíduos considerando o nó “Publicidade para a TV &lt; 44,95?”.\nEm seguida ele irá para o próximo separador: a média do segundo e do terceiro menores pontos.\n\nmean(ordenados[2:3])\n\n[1] 66.95\n\n\nEntão 66,95 é o segundo valor a ser testado para a separação dos dados.\n\nplot(vendas$TV, vendas$sales, pch = 19,\n     xlab = \"Orçamento de Publicidade do Produto para a TV\",\n     ylab = \"Vendas do Produto\",\n     main = \"Vendas do produto x Publicidade para a TV\"); abline(v = 66.95,\n                                                                 col = \"red\")\n\n\n\n\n\n\n\n\nEntão o nó considerado será da forma “Publicidade para a TV &lt; 66,95?”.\n\n\n\n\n\nO valor de 8,9 corresponde ao resultado da média dos valores das vendas para todos os produtos cuja publicidade foi menor do que 66,95. Então a árvore prevê esse valor de vendas para o produto que obteve uma publicidade para a TV &lt; 66,95. O valor de 15,77 é o resultado da média dos valores das vendas para todos os produtos cuja publicidade foi maior do que 66,95. Novamente serão obtidos os resíduos dessa predição e eles serão somados.\nEntão o algoritmo irá para o próximo separador e irá calcular a soma dos quadrados dos resíduos da predição. Isso ocorre sucessivamente até acabarem todos os separadores possíveis para a árvore. O separador vencedor (aquele que irá para o nó raiz) é aquele com a menor soma dos quadrados dos resíduos.\nA construção dos próximos nós se dá pela mesma forma que a do nó raiz. O processo de construção da árvore termina quando:\n\nAtingimos um número mínimo de observações em uma folha (usualmente é utilizado 20 observações). Não continuamos a divisão após esse número mínimo pois corremos o risco de criar uma árvore sobreajustada à amostra dada;\nQuando o ganho ao aumentar a árvore é muito pequeno.\n\nAgora vamos para o caso em que tenhamos mais de uma variável preditiva nos dados. Vamos considerar agora que queremos prever as vendas do produto baseado em seus orçamentos de publicidade para TV, rádio e jornal.\nAssim como anteriormente, começamos usando o orçamento para a TV para prever as vendas, e pegamos o separador com a menor soma dos quadrados dos resíduos. O melhor separador se torna um candidato para a raiz da árvore. Em seguida, focamos em utilizar o orçamento para o rádio para prever as vendas. Assim como com o orçamento para a TV, tentamos diferentes separadores para a predição e calculamos a soma dos quadrados dos resíduos em cada passo. O melhor separador se torna outro candidato para a raiz. Por último, utilizamos o orçamento para o jornal para prever as vendas, e após tentarmos diferentes separadores pegamos aquele com a menor soma dos quadrados dos resíduos também. Então comparamos a soma dos quadrados dos resíduos de todos os candidatos para a raiz, e o escolhido, novamente, é aquele com a menor soma.\nPara os próximos nós o processo de construção também é equivalente ao anterior, exceto que agora nós comparamos a menor soma dos quadrados dos resíduos de cada preditor. E, novamente, quando uma folha atinge um número mínimo de observações, a árvore é finalizada.\n\n10.3.1 Construindo árvores com o rpart e rpart.plot\nVamos construir árvores com o comando rpart(). Como argumento da função nós passamos:\n\nA variável de interesse a ser prevista em função das variáveis preditoras;\nA base de dados onde as variáveis se encontram.\n\nVamos utilizar a base de dados referentes ao primeiro exemplo dado de construção de uma árvore, onde queríamos prever se um indivíduo possui doença cardíaca baseado em características dele.\n\nlibrary(rpart)\nheart_arvore = rpart(HeartDisease~., data = base)\n\nAgora vamos plotar a árvore com o comando rpart.plot().\n\nlibrary(rpart.plot)\nrpart.plot(heart_arvore)\n\n\n\n\n\n\n\n\nObserve que a árvore ficou “vazia”. O que ela quer dizer com isso é: assuma “Não” sempre para o indivíduo possuir doença cardíaca, e acerte com precisão de 78%. Isso ocorre devido aos valores iniciais do comando rpart.control(), que ajusta os parâmetros da função rpart(). Os principais parâmetros do rpart.control são:\n\nminsplit: o número mínimo de observações que devem existir em um nó para que uma divisão seja tentada. Padrão: minsplit = 20;\nminbucket: o número mínimo de observações em qualquer folha. Padrão: minbucket = minsplit/3;\ncp (complexity parameter): o mínimo de ganho de ajuste que devemos ter em cada divisão. O principal papel desse parâmetro é economizar tempo de computação removendo as divisões que não valem a pena. Padrão: cp = 0,01;\nmaxdepth: profundidade máxima da árvore (a profundidade da raiz é zero). Não pode ser maior que 30.\n\nEx. 1: Vamos ajustar os parâmetros da árvore e construí-la novamente. Vamos determinar que a profundidade da árvore seja 2, que 0 seja o número mínimo de observações em um nó e que ela seja construída mesmo que não haja ganhos em mais divisões.\n\ncontrole = rpart.control(minsplit=0, cp = -1, maxdepth = 2)\nheart_arvore = rpart(HeartDisease~., data = base, control = controle)\nrpart.plot(heart_arvore)\n\n\n\n\n\n\n\n\nNote que o nó raiz é exatamente aquele que calculamos como o mais puro, o “Thal = Reversable”, que é equivalente a “Thal = Fixed ou Normal”. Os nós adjacentes também foram o que obtivemos anteriormente como os mais puros.\nCada saída do comando rpart.plot() tem um significado específico:\n\nA primeira saída é a classe estimada pela árvore para as amostras que se encontram naquele nó.\n\n\n\n\n\n\n\nA segunda saída é a proporção de indivíduos na classe contrária àquela estimada na primeira saída.\nA terceira saída é a porcentagem da amostra que se encontra no atual nó.\n\n\n\n\n\n\nEx. 2: Vamos agora constuir a árvore mais completa possível, ou seja, uma árvore sobreajustada à amostra, sem restrições em sua profundidade máxima.\n\ncontrole = rpart.control(minsplit=0, cp = -1)\nheart_arvore = rpart(HeartDisease~., data = base, control = controle)\nrpart.plot(heart_arvore)\n\n\n\n\n\n\n\n\nEx. 3: Vamos agora considerar 10 como o número mínimo de observações em um nó e 3 como a profundidade máxima da árvore.\nAgora podemos levantar a seguinte questão: como avaliar a precisão do modelo construído? Nesse exemplo nós utilizamos toda a amostra para construir a árvore, apenas para explicar o funcionamente do rpart, então não temos uma amostra teste para verificar o quão bom é o modelo. Então para isso teríamos que primeiramente dividir a amostra em treino e teste, depois criar o modelo com a amostra treino e em seguida aplicá-lo na amostra teste, e então, por último, poderíamos utilizar a função confusionMatrix() para obtermos não só a precisão como outras medidas avaliativas do modelo, além, é claro, da matriz de confusão. No tópico abaixo essas etapas serão construídas detalhadamente.\n\n\n10.3.2 Construindo árvores com train\nPodemos utilizar árvores de decisão/regressão como um método de treinamento para os dados através da função train(). Vamos fazer isso utilizando a base de dados College. Este banco possui informações sobre 777 diferentes universidades e faculdades dos EUA. Ela apresenta algumas variáveis como: Apps - número de pedidos recebidos para ingresso, Room.Board - custos de acomodação e alimentação, Books - custos estimados de livros, PhD - quantidade de professores com doutorado, entre outras, e nossa variável de interesse Private, que indica se a universidade é privada ou pública.\n\nlibrary(readr)\nlibrary(dplyr)\ncollege = read_csv(\"College.csv\")\ncollege = college[,-1]\nhead(college)\n\n# A tibble: 6 × 18\n  Private  Apps Accept Enroll Top10perc Top25perc F.Undergrad P.Undergrad\n  &lt;chr&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1 Yes      1660   1232    721        23        52        2885         537\n2 Yes      2186   1924    512        16        29        2683        1227\n3 Yes      1428   1097    336        22        50        1036          99\n4 Yes       417    349    137        60        89         510          63\n5 Yes       193    146     55        16        44         249         869\n6 Yes       587    479    158        38        62         678          41\n# ℹ 10 more variables: Outstate &lt;dbl&gt;, Room.Board &lt;dbl&gt;, Books &lt;dbl&gt;,\n#   Personal &lt;dbl&gt;, PhD &lt;dbl&gt;, Terminal &lt;dbl&gt;, S.F.Ratio &lt;dbl&gt;,\n#   perc.alumni &lt;dbl&gt;, Expend &lt;dbl&gt;, Grad.Rate &lt;dbl&gt;\n\n\nVamos, primeiramente, separar a amostra em treino e teste.\n\nlibrary(caret)\nset.seed(100)\nnoTreino = createDataPartition(y = college$Private, p = 0.7, list = F)\ntreino = college[noTreino,]\nteste = college[-noTreino,]\n\nVamos treinar o modelo pelo método de árvores de decisão. Fazemos isso através do argumento “method = rpart” da função train().\n\nset.seed(100)\nmodelo = caret::train(Private~., method = \"rpart\", data = treino)\nmodelo\n\nCART \n\n545 samples\n 17 predictor\n  2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 545, 545, 545, 545, 545, 545, ... \nResampling results across tuning parameters:\n\n  cp          Accuracy   Kappa    \n  0.04362416  0.9081649  0.7588635\n  0.20134228  0.8721337  0.6609327\n  0.51006711  0.8325440  0.5238781\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was cp = 0.04362416.\n\n\nObserve que através do train() são testados alguns valores para o cp (complexity parameter) e é eleito aquele com a maior taxa de acurácia. Nesse caso, o cp utilizado será o de aproximadamente 0,0436. Vamos aplicar o modelo no conjunto teste.\n\npredicao = predict(modelo, teste)\n\n# Transformando em fator para depois construirmos a matriz de confusão:\nteste$Private = as.factor(teste$Private)\n\n# Avaliando o modelo utilizando a matriz de confusão:\nconfusionMatrix(predicao, teste$Private)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  No Yes\n       No   44   6\n       Yes  19 163\n                                        \n               Accuracy : 0.8922        \n                 95% CI : (0.845, 0.929)\n    No Information Rate : 0.7284        \n    P-Value [Acc &gt; NIR] : 7.796e-10     \n                                        \n                  Kappa : 0.7088        \n                                        \n Mcnemar's Test P-Value : 0.0164        \n                                        \n            Sensitivity : 0.6984        \n            Specificity : 0.9645        \n         Pos Pred Value : 0.8800        \n         Neg Pred Value : 0.8956        \n             Prevalence : 0.2716        \n         Detection Rate : 0.1897        \n   Detection Prevalence : 0.2155        \n      Balanced Accuracy : 0.8315        \n                                        \n       'Positive' Class : No            \n                                        \n\n\nObtivemos uma acurácia de 0,8922, o que é razoável para um modelo que utiliza árvores.\n\n# Desenhando a árvore:\nrpart.plot(modelo$finalModel)\n\n\n\n\n\n\n\n\nA limitação de utilizar as árvores através do train() é que o único parâmetro da árvore que pode ser alterado é o cp (*complexity parameter).\n\nmodelLookup(\"rpart\")\n\n  model parameter                label forReg forClass probModel\n1 rpart        cp Complexity Parameter   TRUE     TRUE      TRUE\n\n\nPara alterarmos o seu valor utilizamos o comando expand.grid().\n\ncontrole = expand.grid(.cp = 0.0001)\nmodelo = caret::train(Private~., method = \"rpart\", data = treino, tuneGrid = controle)\nmodelo\n\nCART \n\n545 samples\n 17 predictor\n  2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 545, 545, 545, 545, 545, 545, ... \nResampling results:\n\n  Accuracy   Kappa    \n  0.9108212  0.7723318\n\nTuning parameter 'cp' was held constant at a value of 1e-04\n\n\nNote que com esse valor de cp a árvore fica mais profunda, pois estamos diminuindo o mínimo de ganho de ajuste que devemos ter em cada divisão.\n\nrpart.plot(modelo$finalModel)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Métodos de Treino Baseados em Árvore</span>"
    ]
  },
  {
    "objectID": "metodos-de-treino-baseados-em-arvore.html#florestas-aleatórias",
    "href": "metodos-de-treino-baseados-em-arvore.html#florestas-aleatórias",
    "title": "10  Métodos de Treino Baseados em Árvore",
    "section": "10.4 Florestas Aleatórias",
    "text": "10.4 Florestas Aleatórias\nAs árvores de decisão possuem uma estrutura de fácil compreensão, o que faz com que ela seja bastante utilizada devido a sua boa aparência e interpretação intuitíva. Mas elas possuem uma limitação, o sobreajuste, sendo assim, elas não são muito eficientes com novas amostras. O que fazer então?\nAs Florestas Aleatórias (Random Forest) se utilizam de várias árvores de decisão, combinando a simplicidade das árvores com a flexibilidade de um método sem sobreajuste, aumentando assim a precisão do preditor.\nVamos construir uma floresta aleatória usando a base de dados balloons.\n\nballoons = readr::read_csv(\"balloons.csv\")\nballoons$inflated = as.factor(balloons$inflated)\nstr(balloons)\n\nspc_tbl_ [100 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ color   : chr [1:100] \"YELLOW\" \"YELLOW\" \"YELLOW\" \"YELLOW\" ...\n $ size    : chr [1:100] \"SMALL\" \"SMALL\" \"SMALL\" NA ...\n $ act     : chr [1:100] \"STRETCH\" \"STRETCH\" \"STRETCH\" \"STRETCH\" ...\n $ age     : chr [1:100] \"ADULT\" \"ADULT\" \"ADULT\" \"ADULT\" ...\n $ inflated: Factor w/ 2 levels \"FALSE\",\"TRUE\": 2 2 2 2 2 2 2 2 2 2 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   color = col_character(),\n  ..   size = col_character(),\n  ..   act = col_character(),\n  ..   age = col_character(),\n  ..   inflated = col_logical()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nCom base na cor do balão, o tamanho dele, se ele é elástico ou não e se quem o está enchendo é uma criança ou um adulto, queremos predizer se o balão vai encher ou não. Portanto, nossa variável de interesse é Inflated e queremos construir um classificador.\nA primeira coisa que precisamos fazer é criar uma nova amostra do mesmo tamanho da original utilizando bootstrap.\n\nset.seed(33)\nboot1 = caret::createResample(y=balloons$inflated, times=1, list=F)\nNovaAmostra1 = balloons[boot1,]\nOut_of_bag = balloons[-boot1,]\n\nTodas as observações que não forem sorteadas vão entrar no “Out-of-Bag”. Temos 4 variáveis fora a de interesse, vamos sortear 2 variáveis para construir o primeiro nó da nossa árvore.\n\nset.seed(413)\nsample(1:4, 2)\n\n[1] 4 3\n\n\nVamos calcular o índice Gini para essas duas variáveis.\n\n#calculando o indice gini para a variável tamanho\ntable(NovaAmostra1$size, NovaAmostra1$inflated)\n\n       \n        FALSE TRUE\n  LARGE    29   18\n  SMALL    28   22\n\n\n\n(gini.size = (1-(7/14)^2-(7/14)^2)*(14/20) + (1-(4/6)^2-(2/6)^2)*(6/20))\n\n[1] 0.4833333\n\n\n\n#calculando o indice gini para a variável idade\ntable(NovaAmostra1$age, NovaAmostra1$inflated)\n\n       \n        FALSE TRUE\n  ADULT    26   43\n  C         3    0\n  CHILD    28    0\n\n\n\n(gini.age = (1-(5/14)^2-(9/14)^2)*(14/20) + (1-(6/6)^2-(0/6)^2)*(6/20))\n\n[1] 0.3214286\n\n\nA variável idade tem um grau de impureza menor, então ela será a raiz da árvore.\n\n\n\n\n\nAgora das variáveis que ainda não foram usadas, sorteamos mais duas para continuar a árvore.\n\nset.seed(443)\nsample(1:3, 2)\n\n[1] 3 2\n\n\n\nlibrary(dplyr)\nNovaAmostra1 = filter(NovaAmostra1, age==\"ADULT\") \n#calculando o indice gini para a variável tamanho\ntable(NovaAmostra1$size, NovaAmostra1$inflated)\n\n       \n        FALSE TRUE\n  LARGE    15   18\n  SMALL    11   22\n\n\n\n(gini.size = (1-(4/11)^2-(7/11)^2)*(11/14) + (1-(1/3)^2-(2/3)^2)*(3/14))\n\n[1] 0.4588745\n\n\n\n#calculando o indice gini para a variável act\ntable(NovaAmostra1$act, NovaAmostra1$inflated)\n\n         \n          FALSE TRUE\n  DIP        26    0\n  STRETCH     0   43\n\n\n\n(gini.act = (1-(5/5)^2-(0/5)^2)*(5/14) + (1-(0/9)^2-(9/9)^2)*(9/14))\n\n[1] 0\n\n\nComo a variável act tem o menor grau de impureza, ela será o próximo nó.\n\n\n\n\n\nAssim, temos nossa primeira árvore de decisão.\n\n\n\n\n\nA floresta aleatória pode ser utilizada tanto em classificadores como em regressores. A diferença é que em regressores, utilizamos árvores de regressão no lugar de árvores de classificação.\nEm seguida vamos construir várias árvores da mesma maneira que a anterior. Para nosso exemplo vamos construir apenas 4 árvores, mas em geral vamos fazer bem mais que isso.\nTemos então nossas 4 árvores construidas.\n\n\n\n\n\n\n\n\n\n\nPara classificar uma nova amostra, devemos passar ela por todas as árvores construidas e rotular a amostra pela categoria resultada mais vezes.\nO método de usar bootstrap para criar novas amostras e votos para a tomada de decisão é chamado de Bagging (Bootstrap+aggregate).\nAs observações de cada amostra que não entraram na construção de cada árvore estão contidas Out of Bag. Essas observações servirão para avaliar nosso preditor.\n\nOut_of_bag = balloons[c(2,4,12,13,15,18,20,\n                        1,2,3,5,10,\n                        2,4,12,13,15,18,20,\n                        2,3,11,13,14,16,19),]\nknitr::kable(Out_of_bag)\n\n\n\n\ncolor\nsize\nact\nage\ninflated\n\n\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nNA\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nNA\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nSTRETCH\nC\nFALSE\n\n\nYELLOW\nSMALL\nDIP\nADULT\nFALSE\n\n\nYELLOW\nSMALL\nDIP\nADULT\nFALSE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nNA\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nNA\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nSTRETCH\nC\nFALSE\n\n\nYELLOW\nSMALL\nDIP\nADULT\nFALSE\n\n\nYELLOW\nSMALL\nDIP\nADULT\nFALSE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nADULT\nTRUE\n\n\nYELLOW\nSMALL\nSTRETCH\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nNA\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nSTRETCH\nCHILD\nFALSE\n\n\nYELLOW\nSMALL\nDIP\nADULT\nFALSE\n\n\nYELLOW\nSMALL\nDIP\nADULT\nFALSE\n\n\n\n\n\nPara avaliar, é preciso passar cada uma das observações do Out of Bag por todas as árvores e a predição será feita por votos também. Ao fazer isso, observamos uma precisão de 86%.\nA proporção de amostras do Out-of-bag que foram incorretamente classificadas é chamada Out-of-bag-error\nAgora que sabemos avaliar o modelo, podemos comparar florestas aleatórias construídas com 2 variáveis com as construídas com 3 e outras diferentes configurações. Tipicamente, começamos usando o quadrado do número de variáveis da base e tentamos algumas quantidades abaixo e acima.\n\n10.4.1 Construindo uma floresta com o randomForest()\nO pacote randomForest possui as ferramentas adequadas para a criação de uma floresta aleatória. Vamos construir uma floresta com 20 árvores utilizando a base balloons.\nÉ importante observar se as váriaveis categóricas estão na classe de fatores.\n\nballoons = readr::read_csv(\"balloons.csv\")\nballoons = na.omit(balloons)\n# tratando todas as variaveis \nballoons = dplyr::mutate_if(balloons, is.character, as.factor)\nballoons$inflated = as.factor(balloons$inflated)\n# construindo floresta com 20 arvores\nlibrary(randomForest)\nset.seed(23)\nmodelo = randomForest(inflated ~ ., data=balloons, ntree=20)\n\nAgora, vamos avaliar a precisão do modelo.\n\n# avaliando o modelo\nmodelo\n\n\nCall:\n randomForest(formula = inflated ~ ., data = balloons, ntree = 20) \n               Type of random forest: classification\n                     Number of trees: 20\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 0%\nConfusion matrix:\n      FALSE TRUE class.error\nFALSE    59    0           0\nTRUE      0   38           0\n\n\nNote que foram construídas 20 árvores utilizando 2 variáveis a cada vez. Essa quantidade de variáveis pode ser alterada usando o argumento mtry= dentro do randomForest.\nPodemos ver que a precisão do nosso modelo é de 19/20, ou seja, 95%. Qual seria a precisão se fosse feito apenas uma árvore?\n\nballoons = readr::read_csv(\"balloons.csv\")\n# tratando todas as variaveis \nballoons = dplyr::mutate_if(balloons, is.character, as.factor)\nballoons$inflated = as.factor(balloons$inflated)\n# separando amostras teste/treino\nset.seed(45)\ninTrain = caret::createDataPartition(balloons$inflated,p=0.5,list=F)\ntreino = balloons[inTrain,]\nteste = balloons[-inTrain,]\n# treinando o modelo\ncontrole = rpart::rpart.control(minsplit=0, cp = 0, maxdepth = 1)\nset.seed(342)\nmodelo = rpart::rpart(inflated~., data=treino, control = controle)\n# aplicando o modelo no teste\npredicao = predict(modelo,teste, type=\"vector\")\npredicao = factor(predicao, labels = c(F, T))\n# avaliando o erro na amostra treino\nconfusionMatrix(teste$inflated, predicao)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction FALSE TRUE\n     FALSE    17   13\n     TRUE      0   20\n                                          \n               Accuracy : 0.74            \n                 95% CI : (0.5966, 0.8537)\n    No Information Rate : 0.66            \n    P-Value [Acc &gt; NIR] : 0.1475785       \n                                          \n                  Kappa : 0.5113          \n                                          \n Mcnemar's Test P-Value : 0.0008741       \n                                          \n            Sensitivity : 1.0000          \n            Specificity : 0.6061          \n         Pos Pred Value : 0.5667          \n         Neg Pred Value : 1.0000          \n             Prevalence : 0.3400          \n         Detection Rate : 0.3400          \n   Detection Prevalence : 0.6000          \n      Balanced Accuracy : 0.8030          \n                                          \n       'Positive' Class : FALSE           \n                                          \n\n\nNote que nessa árvore, nosso modelo teve uma precisão de 80%. Bem menor do que o modelo de florestas.\nAgora, observe que construimos uma floresta com 20 árvores. O que acontece com o erro do modelo conforme acrescentamos mais árvores?\nVamos avaliar o comportamento do erro conforme acrescentamos mais árvores à floresta. Para isso, utilizaremos a base de dados spam para melhor vizualização\n\n# chamando a base\nlibrary(kernlab)\ndata(\"spam\")\n# construindo floresta com 20 arvores\nlibrary(randomForest)\nset.seed(23)\nmodelo = randomForest(type ~ ., data=spam, ntree=20)\n\n\n# observando o comportamento do erro em 20 árvores\nerro_OOB &lt;- data.frame(\n  Arvores = rep(1:nrow(modelo$err.rate), times=2),\n  Type = rep(c(\"spam\", \"nonspam\"), each=nrow(modelo$err.rate)),\n  Erro = c(modelo$err.rate[,\"spam\"], modelo$err.rate[,\"nonspam\"]))\n\nggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +\n  geom_line(aes(color=Type),size=1.1) +\n  scale_colour_discrete(name = \"Tipo\",\n                         breaks = c(\"nonspam\", \"spam\"),\n                         labels = c(\"Não Spam\", \"Spam\"))\n\n\n\n\n\n\n\n\n\n# construindo floresta com 50 arvores\nset.seed(23)\nmodelo = randomForest(type ~ ., data=spam, ntree=50)\n# observando o comportamento do erro em 50 árvores\nerro_OOB &lt;- data.frame(\n  Arvores=rep(1:nrow(modelo$err.rate), times=2),\n  Type=rep(c(\"spam\", \"nonspam\"), each=nrow(modelo$err.rate)),\n  Erro=c(modelo$err.rate[,\"spam\"],\n          modelo$err.rate[,\"nonspam\"]))\n\nggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +\n  geom_line(aes(color=Type),size=1.1)+\n  scale_colour_discrete(name = \"Tipo\",\n                         breaks = c(\"nonspam\", \"spam\"),\n                         labels = c(\"Não Spam\", \"Spam\"))\n\n\n\n\n\n\n\n\n\n# construindo floresta com 100 arvores\nset.seed(23)\nmodelo = randomForest(type ~ ., data=spam, ntree=100)\n# observando o comportamento do erro em 100 árvores\nerro_OOB &lt;- data.frame(\n  Arvores=rep(1:nrow(modelo$err.rate), times=2),\n  Type=rep(c(\"spam\", \"nonspam\"), each=nrow(modelo$err.rate)),\n  Erro=c(modelo$err.rate[,\"spam\"],\n          modelo$err.rate[,\"nonspam\"]))\n\nggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +\n  geom_line(aes(color=Type),size=1.1)+\n  scale_colour_discrete(name = \"Tipo\",\n                         breaks = c(\"nonspam\", \"spam\"),\n                         labels = c(\"Não Spam\", \"Spam\"))\n\n\n\n\n\n\n\n\n\n# construindo floresta com 1000 arvores\nset.seed(23)\nmodelo = randomForest(type ~ ., data=spam, ntree=1000)\n# observando o comportamento do erro em 1000 árvores\nerro_OOB &lt;- data.frame(\n  Arvores=rep(1:nrow(modelo$err.rate), times=2),\n  Type=rep(c(\"spam\", \"nonspam\"), each=nrow(modelo$err.rate)),\n  Erro=c(modelo$err.rate[,\"spam\"],\n          modelo$err.rate[,\"nonspam\"]))\n\nggplot(data=erro_OOB, aes(x=Arvores, y=Erro)) +\n  geom_line(aes(color=Type),size=1.1)+\n  scale_colour_discrete(name = \"Tipo\",\n                         breaks = c(\"nonspam\", \"spam\"),\n                         labels = c(\"Não Spam\", \"Spam\"))\n\n\n\n\n\n\n\n\nRepare que após uma certa quantidade de árvores, o erro se estabiliza. Sendo assim, não é necessário utilizar grandes quantidades de árvores em todos os casos. É preciso verificar até onde existe ganho.\n\n\n10.4.2 Construindo uma floresta com o train()\nTambém é possivel fazer florestas aleatórias usando a função train do pacote caret. Para isso, é necessário alterar o método de reamostragem para out of bag e o método para “rf” (random forest). Vamos utilizar a base wine, construiremos um regressor para predizer a variável alcohol.\n\n# alterando o metodo de reamostragem\ncontrole = trainControl(method=\"oob\")\n# chamando a base\nlibrary(readr)\nwine = read_csv(\"winequality-red.csv\")\n# construindo o modelo com 50 arvores\nset.seed(534)\nmodelo = caret::train(alcohol ~ ., data=wine, method=\"rf\", ntree=50, trControl=controle)\nmodelo\n\nRandom Forest \n\n1599 samples\n  11 predictor\n\nNo pre-processing\nResampling results across tuning parameters:\n\n  mtry  RMSE       Rsquared \n   2    0.5507286  0.7327588\n   6    0.5119701  0.7690503\n  11    0.5025861  0.7774390\n\nRMSE was used to select the optimal model using the smallest value.\nThe final value used for the model was mtry = 11.\n\n\nNote o valor “mtry” no modelo. Ele indica a quantidade de váriaveis da base que foram utilizadas para treinar o modelo. Repare que ele calcula a RMSE e \\(R^2\\) para diferentes quantidades de variáveis usadas e utiliza no final a quantidade que possuir menor RMSE, no caso mtry=11. Caso queira fixar o número de variáveis usadas, basta usar o seguinte comando.\n\ntng = expand.grid(.mtry=7)\nmodelo = caret::train(alcohol~., data=wine, method=\"rf\", ntree=50, trControl=controle, tuneGrid=tng)\nmodelo\n\nRandom Forest \n\n1599 samples\n  11 predictor\n\nNo pre-processing\nResampling results:\n\n  RMSE       Rsquared \n  0.5024407  0.7775677\n\nTuning parameter 'mtry' was held constant at a value of 7\n\n\n\n\n10.4.3 AdaBoost\nO método de treino AdaBoost se baseia na construção de uma floresta aleatória. Entretanto, na floresta construída por esse método as árvores possuem apenas um nó e duas folhas. Essas árvores são chamadas de tocos.\n\n\n\n\n\nEm geral, tocos não são muito bons em fazer classificações precisas, ou seja, eles são classificadores fracos. No entanto, o método AdaBoost os combina de forma a criar um bom aprendiz. Ele faz isso utilizando diferenciais na classificação e na construção das árvores que a floresta aleatória comum não utiliza:\n\nFloresta Aleatória: cada árvore de decisão tem um peso igual na classificação final das amostras. Além disso, cada árvore é construída independentemente das outras.\nAdaBoost: alguns tocos têm mais peso na classificação final do que outros, e a ordem de construção dos tocos importam. Em outras palavras, os erros que o primeito toco comete influenciam em como o segundo toco é construído, os erros que o segundo toco comete influenciam em como o terceiro toco é construído, e assim sucessivamente.\n\nVamos ver os detalhes práticos de como funciona o AdaBoost utilizando o banco de dados golf. Este banco possui informações sobre condições climáticas e se o indivíduo jogou golf no dia. A ideia é tentar prever se o indivíduo vai jogar golf baseado nas outras variáveis.\n\ngolf = readRDS(\"Golf.rds\")\ngolf\n\n    Outlook Humidity   Wind Play\n1     Sunny     High   Weak   No\n2     Sunny     High Strong   No\n3  Overcast     High   Weak  Yes\n4      Rain     High   Weak  Yes\n5      Rain   Normal   Weak  Yes\n6      Rain   Normal Strong   No\n7  Overcast   Normal Strong  Yes\n8     Sunny     High   Weak   No\n9     Sunny   Normal   Weak  Yes\n10     Rain   Normal   Weak  Yes\n11    Sunny   Normal Strong  Yes\n12 Overcast     High Strong  Yes\n13 Overcast   Normal   Weak  Yes\n14     Rain     High Strong   No\n\n\nPrimeiramente construímos um toco para cada uma das variáveis e calculamos seus respectivos índices Gini. Vamos começar com a variável Outlook.\n\nlibrary(dplyr)\ngolf %&gt;% group_by(Outlook, Play) %&gt;% summarise(N=n())\n\n# A tibble: 5 × 3\n# Groups:   Outlook [3]\n  Outlook  Play      N\n  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;\n1 Overcast Yes       4\n2 Rain     No        2\n3 Rain     Yes       3\n4 Sunny    No        3\n5 Sunny    Yes       2\n\n\nEntão temos que “Outlook = Overcast” separa os dados da seguinte forma:\n\n\n\n\n\nGini(Outlook = Overcast) \\(= \\frac{4}{14} \\times \\left[1 - (\\frac{1}{14})^2 - (\\frac{0}{14})^2 \\right] + \\frac{10}{14} \\times \\left[ 1 - (\\frac{5}{10})^2 - (\\frac{5}{10})^2 \\right] = 0,357\\)\nVamos agora olhar para “Outlook = Rain”:\n\n\n\n\n\nGini(Outlook = Rain) \\(= \\frac{5}{14} \\times \\left[1 - (\\frac{3}{5})^2 - (\\frac{2}{5})^2 \\right] + \\frac{9}{14} \\times \\left[ 1 - (\\frac{6}{9})^2 - (\\frac{3}{9})^2 \\right] = 0,457\\)\n\n\n\n\n\nAgora vamos para a variável Humidity.\n\ngolf %&gt;% group_by(Humidity, Play) %&gt;% summarise(N=n())\n\n# A tibble: 4 × 3\n# Groups:   Humidity [2]\n  Humidity Play      N\n  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt;\n1 High     No        4\n2 High     Yes       3\n3 Normal   No        1\n4 Normal   Yes       6\n\n\nTemos que “Humidity = High” separa os dados da seguinte forma:\n\n\n\n\n\nGini(Humidity = High) \\(= \\frac{7}{14} \\times \\left[1 - (\\frac{3}{7})^2 - (\\frac{4}{7})^2 \\right] + \\frac{7}{14} \\times \\left[ 1 - (\\frac{6}{7})^2 - (\\frac{1}{7})^2 \\right] = 0,367\\)\nPor último, a variável Wind:\n\ngolf %&gt;% group_by(Wind, Play) %&gt;% summarise(N=n())\n\n# A tibble: 4 × 3\n# Groups:   Wind [2]\n  Wind   Play      N\n  &lt;chr&gt;  &lt;chr&gt; &lt;int&gt;\n1 Strong No        3\n2 Strong Yes       3\n3 Weak   No        2\n4 Weak   Yes       6\n\n\n\n\n\n\n\nGini(Wind = Strong) \\(= \\frac{6}{14} \\times \\left[1 - (\\frac{3}{6})^2 - (\\frac{3}{6})^2 \\right] + \\frac{8}{14} \\times \\left[ 1 - (\\frac{6}{8})^2 - (\\frac{2}{8})^2 \\right] = 0,429\\)\nLogo, os índices Gini calculados foram:\n\n\n\nVariáveis\nÍndice Gini\n\n\n\n\nOutlook = Overcast\n0,357\n\n\nOutlook = Rain\n0,457\n\n\nOutlook = Sunny\n0,394\n\n\nHumidity = High\n0,367\n\n\nWind = Strong\n0,429\n\n\n\nSelecionamos a variável com o menor índice Gini para ser o primeiro toco da floresta. Nesse caso, o menor índice Gini é o da variável “Outlook = Overcast”.\n\n\n\n\n\nAgora precisamos calcular o peso desse toco na classificação final. Para isso, vamos calcular seu erro total.\nO erro total de um toco é calculado pelo número de amostras classificadas erradas dividido pelo total de amostras.\n\n\n\n\n\nPara esse toco houve 5 amostras classificadas erradas em um total de 14. Logo,\n\nErro Total\\(= \\frac{5}{14}\\)\n\nDessa forma podemos calcular o Amount of Say do toco, que será seu peso na classificação final.\nAmount of Say \\(= \\frac{1}{2} \\times log \\left( \\frac{1-\\frac{5}{14}}{\\frac{5}{14}} \\right) = 0,29\\)\nEntão 0,29 é o seu peso na classificação final.\nAgora vamos construir o próximo toco. Para isso damos um peso maior para as amostras que foram classificadas erroneamente no toco anterior. Essas amostras foram as seguintes:\n\ngolf %&gt;% filter(Outlook != \"Overcast\" & Play != \"No\")\n\n  Outlook Humidity   Wind Play\n1    Rain     High   Weak  Yes\n2    Rain   Normal   Weak  Yes\n3   Sunny   Normal   Weak  Yes\n4    Rain   Normal   Weak  Yes\n5   Sunny   Normal Strong  Yes\n\n\nEntão, para rebalancearmos os pesos das amostras classificadas de forma certa e errada, utilizamos as seguintes fórmulas:\nPeso Amostras Erradas\\(=\\) Erro Total\\(\\times\\)\\(e^{Amount of Say}\\)\nPeso Amostras Corretas\\(=\\) Erro Total\\(\\times\\)\\(e^{-Amount of Say}\\)\nAssim, para o segundo toco, os pesos serão:\nPeso Amostras Erradas\\(= \\frac{5}{14} \\times e^{0,29} = 0,477\\)\nPeso Amostras Erradas\\(= \\frac{5}{14} \\times e^{-0,29} = 0,267\\)\nEntão temos os pesos para as amostras:\n\n\n\n\n\nA soma dos pesos das amostras deve ser 1, mas isso não ocorre: note que a soma resulta em 4,788. Dessa forma, precisamos reescalar os pesos. Faremos isso dividindo cada um deles por 4,788.\nFeito isso, temos uma nova tabela de pesos:\n\n\n\n\n\nDefinidos os pesos, em seguida realizamos uma reamostragem via bootstrap (uma amostragem da própria amostra, com reposição) do mesmo tamanho da base de dados original. A probabilidade de um elemento da amostra ser sorteado é o peso dele.\n\n# Numerando os elementos da amostra:\namostra = 1:14\n\n# Definindo as probabilidades dos elementos serem sorteados:\npesos = rep(c(0.056, 0.099, 0.056, 0.099, 0.056), times = c(3,2,3,3,3))\n\n# Realizando o bootstrap:\nset.seed(271)\nsample(amostra, size = 14, replace = T, prob = pesos)\n\n [1] 11  7  5  5  9 10  9 11  1 11 13 12  6  3\n\n\nEntão temos uma nova amostra formada pelos elementos sorteados na reamostragem:\n\n\n\n\n\nAgora, com essa nova amostra, fixamos pesos uniformes para os elementos e repetimos o processo de criação para o próximo toco. Em seguida verificamos os elementos que foram classificados de forma errada, aumentamos seus pesos no banco de dados e repetimos o processo de bootstrap, construindo, assim, o próximo toco. O processo se repete até que a floresta de tocos esteja concluída.\nFinalizada a floresta, realizamos a classificação final dos elementos somando os pesos dos tocos para cada classificação e selecionando o maior deles. Por exemplo, em uma floresta com 10 árvores onde 5 delas classificam a amostra na categoria de interesse como “positivo” e 5 delas classificam essa mesma amostra como “negativo”, se a soma dos pesos das que classificaram a amostra como “positivo” for 2,7 e a das que classificaram a amostra como “negativo” for 0,84, a amostra será classificada como “positivo”.\n\n\n10.4.4 Adaboost com o pacote adabag\nAgora que já sabemos como funciona o adaboost, vamos botá-lo em prática através do pacote adabag. Vamos utilizar a base de dados spam.\nInicialmente vamos separar a amostra em treino e teste.\n\nlibrary(kernlab)\ndata(spam)\nset.seed(16)\nnoTreino = createDataPartition(y = spam$type, p = 0.7, list = F)\ntreino = spam[noTreino,]\nteste = spam[-noTreino,]\n\nAntes de realizarmos o adaboost precisamos definir a profundidade máxima que as árvores da floresta terão. Faremos isso através do comando rpart.control(). Como o objetivo é construir uma floresta de tocos, as árvores terão todas profundidade 1.\n\nlibrary(rpart)\ncontrole = rpart.control(maxdepth = 1)\n\nAgora vamos aplicar o método adaboost no conjunto treino utilizando o comando boosting().\n\nlibrary(adabag)\nset.seed(16)\nmodelo = boosting(formula = type~., data = treino, boos = T, mfinal = 100,\n                  coeflearn = \"Breiman\", control = controle)\n\nOs principais argumentos dessa função são:\n\nformula = uma fórmula especificando qual variável queremos prever em função de qual(is);\ndata = base de dados onde se encontram as variáveis;\nboos = argumento do tipo logical onde, se TRUE (default), utiliza bootstrap para criar uma nova amostra treino para a próxima árvore baseado nos erros da árvore anterior;\nmfinal = número de árvores da floresta;\ncoeflearn = define qual fórmula será utilizada para o Amount of Say de cada árvore. A que vimos é a fórmula de Breiman (default);\ncontrol = opções que controlam detalhes do algoritmo rpart.\n\nPara visualizarmos qualquer árvore da floresta utilizamos o comando rpart.plot().\n\nlibrary(rpart.plot)\n\n# Visualizando a primeira árvore construída:\nrpart.plot(modelo$trees[[1]])\n\n\n\n\n\n\n\n\nPor último, vamos aplicar o modelo na amostra teste e em seguida avaliar o modelo através da matriz de confusão.\n\npredicao = predict(modelo, teste)\n\n# Podemos obter a matriz de confusão com o seguinte comando:\npredicao$confusion\n\n               Observed Class\nPredicted Class nonspam spam\n        nonspam     807   61\n        spam         29  482\n\n\nOu utilizamos a função confusionMatrix() para, além da matriz de confusão, obtermos demais medidas avaliativas do modelo.\n\n# Transformando em fator para utilizar a função confusionMatrix():\npredicao$class = as.factor(predicao$class)\nteste$type = as.factor(teste$type)\n\n# Matriz de confusão e demais medidas avaliativas:\nconfusionMatrix(predicao$class, teste$type, positive = \"spam\")\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction nonspam spam\n   nonspam     807   61\n   spam         29  482\n                                          \n               Accuracy : 0.9347          \n                 95% CI : (0.9204, 0.9472)\n    No Information Rate : 0.6062          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.8619          \n                                          \n Mcnemar's Test P-Value : 0.001084        \n                                          \n            Sensitivity : 0.8877          \n            Specificity : 0.9653          \n         Pos Pred Value : 0.9432          \n         Neg Pred Value : 0.9297          \n             Prevalence : 0.3938          \n         Detection Rate : 0.3495          \n   Detection Prevalence : 0.3706          \n      Balanced Accuracy : 0.9265          \n                                          \n       'Positive' Class : spam            \n                                          \n\n\nRepare que obtivemos uma ótima precisão e especificidade. A sensibilidade não foi tão boa quanto elas, mas talvez deva melhorar se aumentarmos o número de árvores da floresta.\n\n\n10.4.5 Adaboost com o train\nTambém podemos utilizar o adaboost através da função train(). Para isso basta escolhermos a opção “AdaBoost.M1” no argumento referente ao método de treino que será utilizado. Vamos fazer isso utilizando a base de dados College.\n\ncollege = readr::read_csv(\"College.csv\")\ncollege = college[,-1]\n\n# Separando a amostra em treino e teste:\nset.seed(100)\nnoTreino = caret::createDataPartition(y = college$Private, p = 0.7, list = F)\ntreino = college[noTreino,]\nteste = college[-noTreino,]\n\n# Para utilizar o adaboost no train primeiramente precisamos fixar os parâmetros maxdepth,\n# coeflearn e mfinal:N\ncontrole = expand.grid(maxdepth = 1, coeflearn = \"Breiman\", mfinal = 10)\n\n# Treinando o modelo com o adaboost:\nset.seed(100)\nmodelo = caret::train(Private~., method = \"AdaBoost.M1\", data = treino, tuneGrid = controle)\nmodelo\n\nAdaBoost.M1 \n\n545 samples\n 17 predictor\n  2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 545, 545, 545, 545, 545, 545, ... \nResampling results:\n\n  Accuracy   Kappa    \n  0.9216357  0.7980984\n\nTuning parameter 'mfinal' was held constant at a value of 10\nTuning\n parameter 'maxdepth' was held constant at a value of 1\nTuning\n parameter 'coeflearn' was held constant at a value of Breiman\n\n\nVamos aplicar o modelo no conjunto teste e avaliá-lo através da matriz de confusão.\n\npredicao = predict(modelo, teste)\n\n# Transformando em fator para depois construirmos a matriz de confusão:\nteste$Private = as.factor(teste$Private)\n\n# Construindo a matriz de confusão:\nconfusionMatrix(predicao, teste$Private)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction  No Yes\n       No   53   9\n       Yes  10 160\n                                        \n               Accuracy : 0.9181        \n                 95% CI : (0.8751, 0.95)\n    No Information Rate : 0.7284        \n    P-Value [Acc &gt; NIR] : 3.803e-13     \n                                        \n                  Kappa : 0.792         \n                                        \n Mcnemar's Test P-Value : 1             \n                                        \n            Sensitivity : 0.8413        \n            Specificity : 0.9467        \n         Pos Pred Value : 0.8548        \n         Neg Pred Value : 0.9412        \n             Prevalence : 0.2716        \n         Detection Rate : 0.2284        \n   Detection Prevalence : 0.2672        \n      Balanced Accuracy : 0.8940        \n                                        \n       'Positive' Class : No            \n                                        \n\n\nNote que obtivemos bons resultados mesmo utilizando apenas 10 árvores. A acurácia, em particular, foi maior que 0,9, o que já é um bom indicativo de que o modelo se adequou bem aos dados.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Métodos de Treino Baseados em Árvore</span>"
    ]
  },
  {
    "objectID": "metodos-de-treino-baseados-em-arvore.html#gradiente-boosting",
    "href": "metodos-de-treino-baseados-em-arvore.html#gradiente-boosting",
    "title": "10  Métodos de Treino Baseados em Árvore",
    "section": "10.5 Gradiente Boosting",
    "text": "10.5 Gradiente Boosting\n\n10.5.1 em Regressão\nDe acordo com Jerome Friedman, o criador do Gradiente Boosting, evidências empíricas mostram que dar pequenos passos ou ir gradativamente na direção correta resulta em melhores predições na amostra teste, ou seja, menor variância.\nPara entendermos como funciona o Gradiente Boosting, considere a seguinte base de dados.\n\n##   Altura      Cor Sexo Peso\n## 1    1.6     Azul    M   88\n## 2    1.6    Verde    F   76\n## 3    1.5     Azul    F   56\n## 4    1.8 Vermelho    M   75\n## 5    1.5    Verde    M   77\n## 6    1.4     Azul    F   57\n\nA primeira coisa a fazer é definir um número máximo de folhas de cada árvore. Para nosso exemplo, vamos definir 4 folhas, mas em geral, é definido uma quantidade de 8 a 32 folhas. Feito isso, tiramos uma média dos pesos dos indivíduos e essa será nossa primeira árvore, uma árvore só com a raiz.\n\n\n\n\n\nAgora, calculamos o Pseudo-Resíduo, o erro de previsão de cada indivíduo, da forma Pseudo-Resíduo \\(=\\) Valor Real \\(-\\) Valor Predito para cada observação. Então, por exemplo, o pseudo-resíduo da primeira observação vai ficar \\(88 - 71.5 = 16,5\\).\n\n##   Altura      Cor Sexo Peso Ps..Res..1\n## 1    1.6     Azul    M   88       16.5\n## 2    1.6    Verde    F   76        4.5\n## 3    1.5     Azul    F   56      -15.5\n## 4    1.8 Vermelho    M   75        3.5\n## 5    1.5    Verde    M   77        5.5\n## 6    1.4     Azul    F   57      -14.5\n\nO termo pseudo-resíduo é baseado em Regressão Linear, onde o resíduo é a diferença entre os valores observados e estimados. O termo “pseudo” serve para lembrar que estamos fazendo Gradiente Boosting e não Regressão Linear.\nO próximo passo é, utilizando as variáveis explicativas (Altura, Cor e Sexo), construir uma árvore de decisão respeitando o máximo de folhas definido anteriormente. Mas ela deve predizer o pseudo-resíduo e não o Peso.\n\n\n\n\n\nNote que temos mais observações do que folhas, sendo assim, podemos ter mais que um resultado em cada uma. Nesse caso, substituímos os valores pela média das folhas.\n\n\n\n\n\nAgora somamos o resultado das duas árvores para classificar na primeira observação, por exemplo, a predição seria \\(71,5 + 16,5 = 88\\). Acertamos exatamente o valor real. Isso é bom? Não. Já vimos como não é bom ter um modelo muito ajustado. Temos pouco viés, mas provavelmente alta variância.\nO Gradiente Boosting lida com esse problema usando uma taxa de aprendizado para reescalar a contribuição da nova árvore. A taxa de aprendizado é um número entre 0 e 1 e deve ser multiplicado ao valor da segunda árvore em diante. Para esse exemplo, vamos adotar uma taxa de 0.1, assim a predição da primeira observação seria \\(71,5 + (0,1 \\times 16,5) = 73,15\\). A predição não ficou tão boa, mas é um pouco melhor do que o resultado de apenas uma árvore.\nFeito isso, recalculamos os valores do pseudo-resíduo.\n\n##   Altura      Cor Sexo Peso Ps..Res..1 Ps..Res..2\n## 1    1.6     Azul    M   88       16.5      14.85\n## 2    1.6    Verde    F   76        4.5       4.05\n## 3    1.5     Azul    F   56      -15.5     -14.00\n## 4    1.8 Vermelho    M   75        3.5       3.05\n## 5    1.5    Verde    M   77        5.5       5.05\n## 6    1.4     Azul    F   57      -14.5     -13.00\n\nRepare que o valor do segundo pseudo-resíduo diminuiu em módulo em relação ao primeiro, ou seja, nos aproximamos mais do valor correto do que da primeira vez.\nAgora, utilizando novamente as variáveis explicativas, construímos outra árvore agora para predizer o segundo pseudo-resíduo.\n\n\n\n\n\nNote que a estrutura da segunda árvore construída ficou semelhante a primeira. Isso não acontece sempre, mas pode acontecer.\nAgora, a classificação da primeira observação ficaria \\(71.5+(0.116.5)+(0.114.85)=74.635\\) um pouco mais perto do verdadeiro valor. Repetimos esse procedimento quantas vezes se queira ou até não ter redução significante dos valores do pseudo-resíduo. Dessa forma temos uma sequência de árvores que caminham em direção ao valor correto em passos pequenos.\nÉ importante notar que todas as árvores devem possuir a mesma taxa de aprendizado.\n\n\n10.5.2 Construindo um regressor com o pacote gbm\nPara nosso exemplo, vamos utilizar a base de dados Wage do pacote ISLR. Para isso, vamos precisar limpar os dados removendo variáveis de variância zero.\n\n# lendo a base de dados\nlibrary(ISLR)\ndata(\"Wage\")\n# removendo variaveis de variancia zero\nvvz = nearZeroVar(Wage,saveMetrics = F)\nvvz\n\n[1] 6\n\n\n\nWage = Wage[,-vvz]\n\nDividimos a base nos conjuntos de treino e teste.\n\nset.seed(100)\nnoTreino = createDataPartition(Wage$wage,p=0.7,list=F)\ntreino = Wage[noTreino,]\nteste = Wage[-noTreino,]\n\nAgora vamos aplicar o gradiente boosting com a função gbm()\n\nlibrary(gbm)\nset.seed(100)\nmodelo = gbm(wage~.,data=treino, distribution=\"gaussian\",\n              n.trees =300,interaction.depth = 20)\nmodelo\n\ngbm(formula = wage ~ ., distribution = \"gaussian\", data = treino, \n    n.trees = 300, interaction.depth = 20)\nA gradient boosted model with gaussian loss function.\n300 iterations were performed.\nThere were 9 predictors of which 9 had non-zero influence.\n\n\nOs principais argumentos da função gbm() são:\n\ndistribution: gaussian se for regressão, multinomial se for um classificação, bernoulli se for classificação 0-1.\nn.trees: número de árvores da floresta.\ninteraction.depth: profundidade máxima das árvores.\n\nVamos aplicar o modelo na amostra teste, e avaliar o resultado.\n\npredicao = predict(modelo, teste, n.trees=300)\n# avaliando\npostResample(predicao,teste$wage)\n\n     RMSE  Rsquared       MAE \n0.7297289 0.9996961 0.1742759 \n\n\nNote que utilizamos 300 árvores. Mas pode ser que não seja necessário essa quantidade de árvores pra alcançar esses valores de\\(R^2\\), RMSE e MAE. Para saber a quantidade ideal de árvores, isto é, quando erro se estabiliza, podemos utilizar a função gbm.perf().\n\ngbm.perf(modelo)\n\n\n\n\n\n\n\n\n[1] 48\nattr(,\"smoother\")\nCall:\nloess(formula = object$oobag.improve ~ x, enp.target = min(max(4, \n    length(x)/10), 50))\n\nNumber of Observations: 300 \nEquivalent Number of Parameters: 24.11 \nResidual Standard Error: 5.161 \n\n\nSendo assim, com apenas 50 árvores teríamos chegado a um resultado razoável.\n\npredicao2 = predict(modelo, teste, n.trees=50)\npostResample(predicao2,teste$wage)\n\n     RMSE  Rsquared       MAE \n1.0759904 0.9993670 0.2823224 \n\n\nPodemos ver que o RMSE e o MAE aumentaram um pouco, porém o\\(R^2\\) foi praticamente o mesmo. E como tivemos um custo computacional muito menor, podemos concluir que esse modelo com 50 árvores acaba sendo melhor do que o com 300.\n\n\n10.5.3 em Classificação\nConsidere a seguinte base de dados\n\n## # A tibble: 6 x 4\n##   `Gosta de Pipoca` Idade `Cor Favorita` `Troll 2`\n##   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;    \n## 1 Sim                  12 Azul           Ama      \n## 2 Sim                  87 Verde          Ama      \n## 3 Nao                  44 Azul           Odeia    \n## 4 Sim                  19 Vermelho       Odeia    \n## 5 Nao                  32 Verde          Ama      \n## 6 Nao                  14 Azul           Ama\n\nQueremos predizer se uma pessoa ama o filme Troll 2 baseado em seu gosto por pipoca, idade e cor favorita. Assim como em regressão, começamos o método de Gradiente Boosting usando uma árvore raiz que represente nossa predição inicial para cada observação. Em regressão usamos a média das observações, em classificação vamos usar o log(chances). Olhando na base de dados, podemos dizer que as chances de alguém amar Troll 2 é chances \\(= \\frac{\\text{quantidade de indivíduos que amaram}}{\\text{quantidade de indivíduos que odiaram}} = \\frac{4}{2}\\), e portanto, o\\(log(chances) = log(\\frac{4}{2}) = 0,6932\\) e é isso que colocaremos na folha inicial.\n\n\n\n\n\nO jeito mais fácil de usar o log(chances) para classificar é convertendo em probabilidade, e fazemos isso usando a seguinte função:\n\nProbabilidade \\(= \\frac{e^{log(chances)}}{1 + e^{log(chances)}}\\)\n\nSendo assim, a Probabilidade de alguém amar Troll 2 \\(= \\frac{e^{log(\\frac{4}{2})}}{1 + e^{log(\\frac{4}{2})}} = \\frac{2}{3} = 0,6667\\).\n\n\n\n\n\nÉ importante notar que o log(chances) e a probabilidade só ficaram iguais por causa da aproximação.\nVamos criar o seguinte classificador:\n\nProbabilidade acima de 0,5: classificamos que ama Troll 2;\nProbabilidade menor ou igual a 0,5: classificamos que odeia Troll 2.\n\nComo a probabilidade ficou maior que 0,5 classificamos todos no treino como indivíduos que amam Troll 2.\nEmbora 0,5 seja um limite usual para tomada de decisão baseada em probabilidade, poderiamos tranquilamente usar um valor diferente.\nMas a classificação não ficou muito boa já que 2 indivíduos foram classificados erroneamente. Podemos mensurar quão ruim foi a predição calculando o pseudo-resíduo = observado - predito. Para essa conta, perceba que se um indivíduo ama Troll 2, então a probabilidade dele amar Troll 2 é 1. Semelhantemente, se ele odeia, a probabilidade dele amar é 0. Assim, calculamos os pseudo-resíduos.\n\n## # A tibble: 6 x 5\n##   `Gosta de Pipoca` Idade `Cor Favorita` `Troll 2` `Ps. Res. 1`\n##   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;            &lt;dbl&gt;\n## 1 Sim                  12 Azul           Ama                0.3\n## 2 Sim                  87 Verde          Ama                0.3\n## 3 Nao                  44 Azul           Odeia             -0.7\n## 4 Sim                  19 Vermelho       Odeia             -0.7\n## 5 Nao                  32 Verde          Ama                0.3\n## 6 Nao                  14 Azul           Ama                0.3\n\nAgora construímos uma árvore utilizando as variáveis explicativas para predizer o pseudo-resíduo. Assim como o Gradiente Boosting para regressão, temos que definir um número máximo de folhas em cada árvore. Aqui vamos limitar a 3 folhas, mas na prática geralmente é um número entre 8 e 32.\n\n\n\n\n\nEm regressão, os valores das folhas representavam os resíduos. Mas em classificação isso é mais complexo. Isso porque a predição está em log(chances) e as folhas são provenientes de probabilidade. Portanto não podemos apenas somá-las para uma nova predição sem alguma transformação. A transformação mais comum por folha é:\n\n\\(\\frac{\\sum \\text{residuos}}{\\sum{[probabilidade \\space anterior \\space \\times \\space (1 - probabilidade \\space anterior)]}}\\)\n\nAssim, da esquerda pra direita, para primeira folha temos:\n\\(\\frac{\\sum \\text{residuos}}{\\sum{[probabilidade \\space anterior \\space \\times \\space (1 - probabilidade \\space anterior)]}} = \\frac{-0.7}{0.7 \\times (0.3)} = -0.3333\\), para a segunda\n\\(\\frac{\\sum \\text{residuos}}{\\sum{[probabilidade \\space anterior \\space \\times \\space (1 - probabilidade \\space anterior)]}} = \\frac{0.3 - 0.7}{0.7 \\times (1 - 0.7) + 0.7 \\times (1-0.7)} = -0.9524\\), e para a última\n\\(\\frac{\\sum \\text{residuos}}{\\sum{[probabilidade \\space anterior \\space \\times \\space (1 - probabilidade \\space anterior)]}} = \\frac{0.3 + 0.3 + 0.3}{0.7 \\times (1 - 0.7) + 0.7 \\times (1-0.7) + 0.7 \\times (1-0.7)} = 1.4286\\)\nPor enquanto, a probabilidade anterior é a mesma para todos, mas a partir da próxima árvore isso muda.\n\n\n\n\n\nAgora que todas as folhas foram alteradas, podemos somar os resultados escalados pela taxa de aprendizado. Nesse exemplo, vamos usar uma taxa alta, 0.8. Mas geralmente se usa 0.1. E então calculamos o novo\n\\(log(chances) = log(chances) \\space anterior + taxa \\space de \\space aprendizado \\space \\times \\space log(chances)\\) obtido na árvore.\nPara primeira observação, por exemplo, fica \\(log(chances) = 0.7 = (0.8 \\times 1.4) = 1.82\\) e então convertemos em probabilidade \\(\\frac{e^{1.82}}{1 + e^{1.82}} = 0.8606\\). Então, note que fizemos progresso, já que o indivíduo em questão ama Troll 2. Antes ele foi classificado corretamente mas com probabilidade 0.7, agora ele foi classificado corretamente mas com probabilidade 0.9.\n\n## # A tibble: 6 x 5\n##   `Gosta de Pipoca` Idade `Cor Favorita` `Troll 2` `Prob. Predita`\n##   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;               &lt;dbl&gt;\n## 1 Sim                  12 Azul           Ama                   0.9\n## 2 Sim                  87 Verde          Ama                   0.5\n## 3 Nao                  44 Azul           Odeia                 0.5\n## 4 Sim                  19 Vermelho       Odeia                 0.1\n## 5 Nao                  32 Verde          Ama                   0.9\n## 6 Nao                  14 Azul           Ama                   0.9\n\nPode ser que a previsão fique pior, como no caso do segundo indivíduo. E essa é a razão de construírmos várias árvores e não só uma.\nCalculamos os novos pseudo-resíduos que agora serão diferentes para cada observação.\n\n## # A tibble: 6 x 5\n##   `Gosta de Pipoca` Idade `Cor Favorita` `Troll 2` `Ps. Res. 2`\n##   &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;            &lt;dbl&gt;\n## 1 Sim                  12 Azul           Ama                0.1\n## 2 Sim                  87 Verde          Ama                0.5\n## 3 Nao                  44 Azul           Odeia             -0.5\n## 4 Sim                  19 Vermelho       Odeia             -0.1\n## 5 Nao                  32 Verde          Ama                0.1\n## 6 Nao                  14 Azul           Ama                0.1\n\nConstruímos uma segunda árvore agora para prever os novos pseudo-resíduos e fazemos a transformação para log(chances) para cada folha.\n\n\n\n\n\nCombinamos com as árvores anteriores para obter um valor de saída e transformamos em Probabilidade para classificar. Por exemplo, a primeira observação ficaria:\n\\(log(chances)=0.7+(0.81.4)+(0.80.6)=2.3\\)\ne então, convertendo em probabilidade:\n\\(\\frac{e^{1.82}}{1+e^{1.82}} = 0.9089\\)\nDessa forma, continuamos construíndo quantas árvores forem necessárias.\n\n\n10.5.4 Construindo um classificador com o pacote gbm\nO gradiente boosting para classificação no R é semelhante ao para regressão, atentando para o argumento distribution, que deve ser igual a “bernoulli” se a variável de interesse tiver apenas duas respostas possíveis (como no caso da bse Troll 2) ou “multinomial” se a variável tiver mais de duas respostas possíveis. Por exemplo, considere a base Vehicle do pacote mlbench. Nela, estamos interessados em classificar a variável Class, que pode ser bus, opel, saab ou van.\n\n# lendo a base\nlibrary(mlbench)\ndata(Vehicle)\n# dividindo em treino e teste\nlibrary(caret)\nset.seed(100)\nnoTreino = createDataPartition(Vehicle$Class,p=0.7,list=F)\ntreino = Vehicle[noTreino,]\nteste = Vehicle[-noTreino,]\n# treinando o modelo\nlibrary(gbm)\nset.seed(100)\nmodelo = gbm(Class~.,data=treino,distribution=\"multinomial\",\n              n.trees = 100,interaction.depth = 8)\n\nQuando aplicamos o predict(), o que recebemos de retorno são um conjunto de probabilidades (ou o log(chances)), e não a classificação final. Cabe ao pesquisador definir a regra de classificação final.\n\npredicao = predict(modelo, teste, n.trees = 100, type = 'response')\n\n\n# Criando a regra de classificacao\nk = dim(teste)[1]\nclasse = c()\nfor (i in 1:k){\n  classe[i] = names(which.max(predicao[i,1:4,1])) \n}\nhead(classe)\n\n[1] \"van\"  \"van\"  \"opel\" \"van\"  \"bus\"  \"saab\"\n\n\n\n# verificando quantidade de arvores necessarias\ngbm.perf(modelo)\n\n\n\n\n\n\n\n\n[1] 16\nattr(,\"smoother\")\nCall:\nloess(formula = object$oobag.improve ~ x, enp.target = min(max(4, \n    length(x)/10), 50))\n\nNumber of Observations: 100 \nEquivalent Number of Parameters: 8.32 \nResidual Standard Error: 0.0121 \n\n\n\n# avaliando o modelo \nconfusionMatrix(data=as.factor(classe), reference=as.factor(teste$Class))\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction bus opel saab van\n      bus   62    2    0   1\n      opel   0   39   23   1\n      saab   3   20   39   0\n      van    0    2    3  57\n\nOverall Statistics\n                                          \n               Accuracy : 0.7817          \n                 95% CI : (0.7256, 0.8311)\n    No Information Rate : 0.2579          \n    P-Value [Acc &gt; NIR] : &lt;2e-16          \n                                          \n                  Kappa : 0.709           \n                                          \n Mcnemar's Test P-Value : 0.1453          \n\nStatistics by Class:\n\n                     Class: bus Class: opel Class: saab Class: van\nSensitivity              0.9538      0.6190      0.6000     0.9661\nSpecificity              0.9840      0.8730      0.8770     0.9741\nPos Pred Value           0.9538      0.6190      0.6290     0.9194\nNeg Pred Value           0.9840      0.8730      0.8632     0.9895\nPrevalence               0.2579      0.2500      0.2579     0.2341\nDetection Rate           0.2460      0.1548      0.1548     0.2262\nDetection Prevalence     0.2579      0.2500      0.2460     0.2460\nBalanced Accuracy        0.9689      0.7460      0.7385     0.9701\n\n\nNote que o modelo obteve uma precisão razoável de 75,79%.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Métodos de Treino Baseados em Árvore</span>"
    ]
  },
  {
    "objectID": "metodos-de-treino-baseados-em-arvore.html#xgboost",
    "href": "metodos-de-treino-baseados-em-arvore.html#xgboost",
    "title": "10  Métodos de Treino Baseados em Árvore",
    "section": "10.6 XGBoost",
    "text": "10.6 XGBoost\nO XGBoost é a abreviação de Extreme Gradient Boost. Ele foi desenvolvido para suportar um grande volume de dados de forma eficiente. Geralmente é 10 vezes mais rápido que o Gradiente Boosting.\n\n10.6.1 Em Regressão\nApesar do XGBoost ser usado para lidar com bases grandes, vamos usar uma base de dados bem pequena só para entendermos melhor como ele funciona. Para isso considere a seguinte situação: queremos predizer o peso de um indivíduo em função de sua altura.\n\n# lendo e vizualizando a base\nlibrary(readr)\npeso = read_csv2(\"peso-altura.csv\")\nlibrary(ggplot2)\nggplot(peso, aes(x=Altura, y=Peso)) + geom_point(lwd=5, colour = \"deeppink3\") + \n  theme_minimal() + ylim(c(50,90)) + xlim(c(1.3,1.9))\n\n\n\n\n\n\n\n\nO primeiro passo é fazer uma predição inicial, que pode ser qualquer uma. O default é usar 0,5, mas como estamos falando de peso, vamos utilizar a predição inicial “Peso = 70”.\n\n\n\n\n\nAgora precisamos calcular os resíduos (diferença entre o valor real e o valor predito) que vão nos mostrar quão boa é essa predição.\n\nlibrary(dplyr)\n(peso = peso %&gt;% mutate( residuos = Peso-70 ))\n\n# A tibble: 5 × 3\n  Altura  Peso residuos\n   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;\n1     17    88       18\n2     16    76        6\n3     15    56      -14\n4     18    75        5\n5     14    60      -10\n\n\nAssim como no Gradiente Boosting, o próximo passo é construir uma árvore para predizer os resíduos. Mas o XGBoost utiliza uma árvore de regressão diferente que vamos chamar de árvore XGB. Existem muitas formas de construir uma árvore XGB. Vamos aprender a mais comum. A árvore XGB inicia com uma folha que leva todos os resíduos.\n\n\n\n\n\nEm seguida, calculamos um índice de qualidade ou Índice de Similaridade.\n\\(\\text{Índice de Similaridade} = \\frac{(\\sum \\text{resíduos})^2}{\\text{número de resíduos} + \\lambda}\\)\nOnde \\(\\lambda\\) (Lambda) é um parâmetro de regularização, o que significa que tem o objetivo de reduzir a sensibilidade das observações individuais, ou seja, reduzir o sobreajuste. Por enquanto, vamos considerar \\(\\lambda = 0\\) porque esse é o valor default. Sendo assim, o Índice de similaridade da raiz é \\(\\frac{(18 + 6 - 14 + 5 - 10)^2}{5 + 0} = \\frac{5^2}{5} = 5\\).\n\n\n\n\n\nAgora vamos ver se conseguimos melhorar esse índice dividindo os resíduos, ou seja, criando uma ramificação. Vamos começar dividindo a variável Altura na média entre os dois menores valores, que são 1.4 e 1.5, e calculando o Indice para as novas folhas.\nObserve que nas folhas não estarão as alturas e sim os resíduos correspondentes a altura especificada.\n\n\n\n\n\nAgora, precisamos calcular o ganho dessa ramificação para ver o quanto ela foi efetiva. O ganho é calculado da seguinte forma:\nAgora, precisamos calcular o ganho dessa ramificação para ver o quanto ela foi efetiva. O ganho é calculado da seguinte forma:\n\\(ganho = IS\\_{folha \\space da \\space esquerda} + IS\\_{folha \\space da \\space direita - IS\\_{raiz}}\\).\nAssim, o ganho da ramificação \\(Altura &lt; 1.45\\) é \\(100 + 56.25 - 5 =151.25\\). Vamos fazer esse calculo em todas as ramificações possiveis, Isto é, se temos 5 observações com diferentes alturas, vamos ter 4 ramificações possiveis: Altura&lt;1.45, Altura&lt;1.55, Altura&lt;1.65 e Altura&lt;1.75.\n\n\n\n\n\nPodemos ver que o ganho de usar a ramificação ‘Altura&lt;1.55’ é maior, portanto é essa que vamos usar. Agora vamos ramificar as folhas da mesma maneira e escolher as que tiverem melhor ganho.\nNesse exemplo, vamos limitar a profundidade da árvore XGB em 2. Mas o default é permitir até 6 níveis de profundidade.\nNossa árvore XGB final ficou:\n\n\n\n\n\nAgora, vamos podar nossa árvore. Fazemos isso porque pode ser que algum nó tenha o ganho muito baixo e por isso não vale a pena estar na árvore. Para decidir se vamos tirar algum nó e, se sim, qual, vamos escolher um valor que será chamado de \\(\\gamma\\) (gamma). Em seguida, calculamos a diferença entre o ganho associado ao nó e \\(\\gamma\\), se essa diferença for negativa, então removemos o nó.\n\\(\\gamma\\) especifica o ganho mínimo necessario para fazer uma divisão. Seu default é 0. Quanto maior, mais conservador é o modelo.\nMesmo quando \\(\\gamma = 0\\) isso não previne podas.\nVamos escolher \\(\\gamma = 10\\). Começando sempre dos nós mais profundos para a raiz, vamos avaliar a diferença entre o ganho e\\(\\gamma\\). No nó mais à direita temos que o ganho é 32.7, portanto a diferença é \\(32.7 - 10 = 22.7\\). Como o resultado é positivo, o nó permanece. No nó à esquerda, a diferença fica \\(8 - 10 = -2\\), e, como o resultado é negativo, retiramos esse nó. Assim, estamos dizendo que o ganho do nó à esquerda não é bom o suficiente pra justificar essa ramificação. Como o nó à direita permaneceu na árvore, não faz sentido calcular essa diferença para o nó raiz.\nMesmo se o valor da diferença der negativo nos nós de cima, se não removermos o de baixo, o de cima não é removido.\nCom isso, nossa árvore XGB ficou:\n\n\n\n\n\nNote que se tivéssemos escolhido umNote que se tivéssemos escolhido um\\(\\gamma\\) muito alto, por exemplo \\(\\gamma = 570\\), toda árvore seria podada. É preciso cuidado.\nAgora vamos voltar ao inicio e reconstruir a árvore agora usando \\(\\lambda = 1\\) (Lembra do \\(\\lambda\\)? aquele da fórmula do índicador de similaridade!). Para facilitar a vizualização, vamos omitir os cálculos. A nova árvore XGB ficou:\n\n\n\n\n\nPodemos notar que quando \\(\\lambda &gt; 0\\), o índice de similaridade é menor. O que significa que se mantivermos o mesmo \\(\\gamma\\), a poda será mais extrema. Por outro lado, deixar \\(\\lambda &gt; 0\\) ajuda a previnir sobreajustes.\nAgora que temos árvore final, vamos calcular os valores de saída das folhas.\n\\(\\text{valores de saída} = \\frac{\\sum \\text{soma dos resíduos}}{\\text{número de resíduos} + \\lambda}\\)\nRepare que essa fórmula é bem parecida com a do índice de similaridade, mas a soma dos resíduos não está ao quadrado.\nRepare que, como \\(\\lambda = 0\\), o valor de saida é uma média aritmética simples entre os resíduos. Mas note que se \\(\\lambda &gt; 0\\) e a folha tiver apenas uma observação, isso reduzira a sensibilidade dessa observação individual evitando sobreajuste.\n\n\n\n\n\nAssim a primeira árvore está completa e, como em Gradient Boosting, fazemos novas predições começando com a predição inicial e somando com o resultado da árvore XGB escalada pela taxa de aprendizado.\nO XGBoost chama a taxa de aprendizado de \\(\\epsilon\\) (eta) e seu valor default é 0.3, que é o que vamos usar.\n\n\n\n\n\nPor exemplo, se a gente pegasse a primeira observação (indivíduo com altura=1.7), seu peso predito seria \\(predicao \\ inicial + \\epsilon \\ valor\\ de\\ saida\\ da \\ árvore\\ XGB = 70+0.312=73.6\\) que é mais perto do seu peso real (que era 88) do que a predição anterior (70). Assim, com as novas predições, os novos resíduos ficaram:\n\nnova_pred = c(73.6, 73.6, 66.4, 71.5, 66.4)\n(peso = peso %&gt;% mutate( residuos2 = Peso - nova_pred ))\n\n# A tibble: 5 × 4\n  Altura  Peso residuos residuos2\n   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1     17    88       18     14.4 \n2     16    76        6      2.40\n3     15    56      -14    -10.4 \n4     18    75        5      3.5 \n5     14    60      -10     -6.40\n\n\nPerceba que o novo resíduo é melhor que o anterior (seu valor absoluto é mais próximo de 0). Ou seja, estamos dando pequenos passos na direção correta.\nAgora construímos outra árvore XGB da mesma forma, mas para predizer os novos resíduos, Dessa forma obteremos previsões com resíduos menores. E continuamos construíndo árvores XGB até que os resíduos sejam bem pequenos ou até atingir o número de árvores desejado.\n\n\n10.6.2 Construindo um regressor com o pacote xgboost\nVamos usar a base de dados winequality-red. O objetivo dessa base é prever a qualidade do vinho baseado em suas outras variáveis. Mas nós vamos tentar prever o nível alcoólico do vinho.\n\nlibrary(readr)\nwine = read_csv(\"winequality-red.csv\")\nstr(wine)\n\nspc_tbl_ [1,599 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ fixed acidity       : num [1:1599] 7.4 7.8 7.8 11.2 7.4 7.4 7.9 7.3 7.8 7.5 ...\n $ volatile acidity    : num [1:1599] 0.7 0.88 0.76 0.28 0.7 0.66 0.6 0.65 0.58 0.5 ...\n $ citric acid         : num [1:1599] 0 0 0.04 0.56 0 0 0.06 0 0.02 0.36 ...\n $ residual sugar      : num [1:1599] 1.9 2.6 2.3 1.9 1.9 1.8 1.6 1.2 2 6.1 ...\n $ chlorides           : num [1:1599] 0.076 0.098 0.092 0.075 0.076 0.075 0.069 0.065 0.073 0.071 ...\n $ free sulfur dioxide : num [1:1599] 11 25 15 17 11 13 15 15 9 17 ...\n $ total sulfur dioxide: num [1:1599] 34 67 54 60 34 40 59 21 18 102 ...\n $ density             : num [1:1599] 0.998 0.997 0.997 0.998 0.998 ...\n $ pH                  : num [1:1599] 3.51 3.2 3.26 3.16 3.51 3.51 3.3 3.39 3.36 3.35 ...\n $ sulphates           : num [1:1599] 0.56 0.68 0.65 0.58 0.56 0.56 0.46 0.47 0.57 0.8 ...\n $ alcohol             : num [1:1599] 9.4 9.8 9.8 9.8 9.4 9.4 9.4 10 9.5 10.5 ...\n $ quality             : num [1:1599] 5 5 5 6 5 5 5 7 7 5 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `fixed acidity` = col_double(),\n  ..   `volatile acidity` = col_double(),\n  ..   `citric acid` = col_double(),\n  ..   `residual sugar` = col_double(),\n  ..   chlorides = col_double(),\n  ..   `free sulfur dioxide` = col_double(),\n  ..   `total sulfur dioxide` = col_double(),\n  ..   density = col_double(),\n  ..   pH = col_double(),\n  ..   sulphates = col_double(),\n  ..   alcohol = col_double(),\n  ..   quality = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nComo sempre, vamos dividir a base em amostra de treino e amostra de teste.\n\nlibrary(caret)\nset.seed(100)\nnoTreino = createDataPartition(wine$alcohol, p = 0.7, list = F)\n# vendo a classe da base de dados\nclass(wine)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\nO pacote xgboost só lê matrizes. Então teremos que transformar a base numa matriz. Além disso, teremos que separar a váriavel de interesse das variáveis explicativas.\n\n# Transformando a base em matriz\nwine = as.matrix(wine)\nclass(wine)\n\n[1] \"matrix\" \"array\" \n\n\n\n# separando amostra treino e teste\ntreino       = wine[noTreino,-11] # a variável 'alcohol' é a 11ª coluna\ntreino_label = wine[noTreino, 11]\n\nteste       = wine[-noTreino,-11]\nteste_label = wine[-noTreino, 11]\n\nAgora, podemos usar a função xgboost para criar nosso modelo.\n\nlibrary(xgboost)\nset.seed(100)\nmodelo = xgboost(data = treino, label = treino_label,\n                 gamma=0, eta=0.3, \n                 nrounds = 100, objective = \"reg:squarederror\", \n                 verbose = 0)\n\nOs principais argumentos da função xgboost são:\n\ndata: recebe a amostra treino apenas com as variáveis explicativas;\nlabel: recebe a variável de interesse;\ngamma: ganho mínimo necessário para fazer uma divisão;\neta: taxa de aprendizado;\nnrounds: representa o número de iterações;\nobjective: é o tipo de predição que será feita. Para mais informações, veja nesse site.;\nverbose: se for 1, que é o default, o xgboost vai imprimir informações de desempenho a cada iteração. Se for 0, não vai imprimir nada.\n\nPara fazer a predição usamos o conhecido predict(). Em seguida, vamos avaliar os resultados do modelo utilizando a função defaultSummary() do pacote caret. Essa função nos retorna os valores do RMSE,\\(R^2\\) e MAE do modelo. Para isso devemos passar como argumento um dataframe onde a primeira coluna são os valores observados dos rótulos do conjunto teste e a segunda coluna são os valores preditos pelo modelo.\n\npredicao = predict(modelo,teste)\n# Calculando o RMSE do modelo:\ncaret::defaultSummary(data.frame(obs = teste_label, pred = predicao))\n\n     RMSE  Rsquared       MAE \n0.5394468 0.7435101 0.3548454 \n\n\nConsiderando a escala em que os dados se encontram, o valor do RMSE foi um pouco grande. Em contrapartida podemos considerar os valores do MAE e do \\(R^2\\) como sendo razoáveis para o modelo. Em particular, um \\(R^2\\) de aproximadamente 0,7881 nos indica que o modelo tem um poder de explicação de 78,81%.\n\n\n10.6.3 Em Classificação\nPara entendermos como o XGBoost funciona para problemas de classificação, vamos utilizar a base de dados a seguir. O objetivo é prever se a universidade é pública ou privada baseado nos pedidos para ingresso.\nOBS: Assim como comentado anteriormente em regressão, o XGBoost foi projetado para bases de dados grandes, mas para fins didáticos iremos utilizar uma base bem pequena.\n\nlibrary(readxl)\ncollege = read_excel(\"SmallCollege.xlsx\")\ncollege\n\n# A tibble: 4 × 2\n  Private  Apps\n  &lt;chr&gt;   &lt;dbl&gt;\n1 No       2119\n2 Yes      1660\n3 Yes      2694\n4 No       2785\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n# Construindo um gráfico para os pedidos para ingresso x tipo da universidade:\ncollege %&gt;% ggplot(aes(x = Apps, y = Private)) + geom_point(lwd = 5, aes(colour = Private)) +\n  guides(col = F) + theme_minimal() + ggtitle(\"Pedidos para Ingresso x Tipo da Universidade\") +\n  xlab(\"Pedidos para Ingresso\") + ylab(\"Universidade Privada\")\n\n\n\n\n\n\n\n\nO primeiro passo é fazer uma predição inicial. Essa predição pode ser qualquer valor, como por exemplo a probabilidade de observar universidades públicas no conjunto de dados. Por default, essa predição é de 0,5.\n\n\n\n\n\nPodemos ilustrar essa predição inicial adicionando uma linha horizontal no gráfico que representa as probabilidades de uma universidade ser pública pelo que observamos no conjunto de dados.\n\n# Vamos adicionar a coluna \"Probabilidade\" na base de dados que conterá a probabilidade da\n# universidade ser pública:\ncollege$Probabilidade = ifelse(college$Private == \"Yes\", 0, 1)\n\n# Gráfico dos pedidos para ingresso x probabilidade da universidade ser pública baseado no\n# conjunto de dados:\ncollege %&gt;% ggplot(aes(x = Apps, y = Probabilidade)) + \n            geom_point(lwd = 5, aes(colour = Private)) + theme_minimal() + \n            ylab(\"Probabilidade da Universidade ser Pública\") + \n            geom_hline(yintercept = 0.5, type = 2) + \n            ggtitle(\"Pedidos para Ingresso x Probabilidade da Universidade ser Pública\") + \n            xlab(\"Pedidos para Ingresso\") + guides(col = F)\n\n\n\n\n\n\n\n\nFeita a predição inicial, agora vamos calcular os resíduos e verificar quão boa é essa predição.\n\ncollege$Residuos = college$Probabilidade-0.5\ncollege\n\n# A tibble: 4 × 4\n  Private  Apps Probabilidade Residuos\n  &lt;chr&gt;   &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 No       2119             1      0.5\n2 Yes      1660             0     -0.5\n3 Yes      2694             0     -0.5\n4 No       2785             1      0.5\n\n\nO próximo passo é construir uma árvore para predizer os resíduos. Assim como a árvore XGB para regressão, a árvore XGB para classificação se inicia com apenas uma folha que leva todos os resíduos.\n\n\n\n\n\nAgora precisamos calcular o Índice de Similaridade para os resíduos. Porém, como estamos usando XGBoost para classificação, temos uma nova fórmula para ele.\n\\(\\text{Índice de Similaridade} = \\frac{\\left( \\sum_{i=1}^n\\text{Resíduo}_i\\right)^2}{\\sum_{i=1}^n\\left[ \\text{Probabilidade Prévia}_i \\times (1 - \\text{Probabilidade Prévia}_i)\\right] + \\lambda}\\)\nVeja que o numerador da fórmula para classificação é igual ao da fórmula para regressão. E assim como para regressão, o denominador contém\\(\\lambda\\), o parâmetro de regularização.\nNote que, para o nosso exemplo, o numerador do Índice de Similaridade para a folha resultará em 0, pois nós somamos os resíduos antes de elevá-los ao quadrado, o que faz com que eles se cancelem.\n\\(\\left( \\sum_{i=1}^n \\text{Resíduo}_i \\right)^2 = (0.5 - 0.5 - 0.5 + 0.5)^2 = 0 \\implies \\text{Índice de Similaridade = 0}\\)\n\n\n\n\n\nVamos tentar melhorar o Índice dividindo os resíduos em 2 grupos diferentes. Para isso temos que testar todos os possíveis separadores para os dados e escolher o que tiver o maior ganho. Vamos começar com o primeiro: a média entre os 2 menores valores da variável “Apps”.\n\nordenados = sort(college$Apps)\nmean(ordenados[1:2])\n\n[1] 1889.5\n\n\nAssim, os resíduos que possuem Apps &lt; 1889,5 vão para a esquerda, e os com Apps &gt; 1889,5 vão para a direita.\n\n\n\n\n\nAgora vamos calcular o Índice de Similaridade para as duas folhas. Como estamos construindo nossa primeira árvore, a Probabilidade Prévia para todos os resíduos é a predição da folha inicial (0,5). Para simplificar as contas, vamos utilizar o valor padrão de\\(\\lambda\\),\\(\\lambda = 0\\). Contudo, sabemos da regressão que o\\(\\lambda\\) reduz o Índice de Similaridade, o que consequentemente diminui o Ganho e assim torna as folhas mais fáceis de serem podadas, o que ajuda a previnir o sobreajuste.\n\\(\\text{IS}\\_{\\text{folha da esquerda}} = \\frac{(-0.5)^2}{0.5 \\times (1-0.5)} = 1\\)\n\\(\\text{IS}\\_{\\text{folha da esquerda}} = \\frac{(-0.5 + 0.5 + 0.5)^2}{[0.5 \\times (1-0.5)]+[0.5 \\times (1-0.5)]+[0.5 \\times (1-0.5)]} = 1\\)\nAgora podemos calcular o ganho:\n\\(\\text{Ganho} = \\text{IS}_{\\text{folha da esquerda}} + \\text{IS}_{\\text{folha da direita}} - \\text{IS}_{\\text{raiz}} = 1 + 0.33 - 0 = 1.33\\)\n\n\n\n\n\nAgora vamos realizar os mesmos cálculos para os próximos 2 separadores: a média entre o segundo e o terceiro valor e a média entre o terceiro e o quarto valor da variável “Apps”.\n\n\n\n\n\nPodemos ver que o maior ganho é tanto o da divisão por “Apps &lt; 1889,5?” quanto o da divisão por “Apps &lt; 2739,5?”, que deram exatamente iguais. Assim, podemos usar qualquer um dos 2 para ser a raiz da árvore XGB. Vamos ficar com o último.\nO próximo passo agora é ramificar a folha da esquerda para darmos continuidade à nossa árvore. Novamente, vamos limitar a profundidade dela em 2.\nA árvore XGB fica, então, da seguinte forma:\n\n\n\n\n\nAssim, terminamos de construir a árvore XGB. Porém, é importante saber que o XGBoost possui uma forma de determinar um número mínimo de resíduos permitido em cada folha da árvore. Ele faz isso calculando o Cover das folhas.\n\\(\\text{Cover} = \\sum\\_{i = 1}\\^n \\[\\text{Probabilidade Prévia}\\_i \\times (1 - \\text{Probabilidade Prévia}\\_i)\\]\\)\nNote que o Cover é definido pelo denominador do Índice de Similaridade sem o\\(\\lambda\\) . O valor default é de que o Cover seja no mínimo 1, ou seja, se o Cover de uma folha der menor que 1, o XGBoost não permite que ela exista. Se der maior ou igual a 1, ela pode permanecer na árvore.\nCalculando o Cover das nossas duas últimas folhas, temos que:\n\nCover da primeira folha: \\(0.5 \\times (1-0.5) = 0.25\\)\nCover da segunda folha: \\(0.5 \\times (1-0.5) + 0.5 \\times (1-0.5) = 0.5\\)\n\n\n\n\n\n\nComo o Cover de ambas as folhas são menores do que 1, o XGBoost não as permite permanecer na árvore. Logo, vamos removê-las. A árvore fica, então, da seguinte forma:\n\n\n\n\n\n\nCover da primeira folha: \\(0.5 \\times (1-0.5) + 0.5 \\times (1-0.5) + 0.5 \\times (1-0.5) = 0.75\\)\nCover da segunda folha: \\(0.5 \\times (1-0.5) = 0.25\\)\n\n\n\n\n\n\nComo o Cover de ambas as folhas também são menores do que 1, o XGBoost também não as permite permanecer na árvore. Assim, só nos resta a raiz. Mas isso também é um problema, pois o XGBoost requer árvores que sejam maiores do que apenas a raiz. Dessa forma, vamos fixar o valor mínimo para o Cover como 0. Assim podemos permanecer com nossa árvore XGB anterior.\n\n\n\n\n\nOBS: Quando estamos utilizando XGBoost para regressão usamos a seguinte fórmula para o Índice de Similaridade:\n\\(\\text{Índice de Similaridade} = \\frac{(\\sum \\text{resíduos})^2}{\\text{número de resíduos} + \\lambda}\\)\nLogo, o Cover de uma folha é dado por:\n\\(\\text{Cover} = \\text{Número de Resíduos}\\)\nComo o default do Cover é 1, isso significa que podemos ter até 1 resíduo por folha. Em outras palavras, o Cover não tem efeito na construção da árvore. Por conta disso ele não foi utilizado anteriormente em XGBoost para regressão.\nAgora vamos entrar na parte de como podar a árvore. Ela é feita exatamente como na regressão, nós podamos com base na diferença entre o Ganho associado ao nó e\\(\\gamma\\). Para esse exemplo, vamos fixar \\(\\gamma = 0.5\\).\n\n\n\n\n\nComo a diferença resultou em um número positivo, não podamos o nó. Logo, não precisamos calcular essa diferença para o nó raiz e nossa árvore permanece a mesma. Note que se tivéssemos fixado, por exemplo, \\(\\gamma = 1.5\\), todos os nós seriam podados e nos restaria apenas a predição inicial. É necessário cuidado na escolha do \\(\\gamma\\).\nObtida a árvore final, vamos calcular os valores de saída que as folhas terão.\n\\(\\text{valores de saída} = \\frac{\\sum \\text{soma dos resíduos}}{\\text{número de resíduos} + \\lambda}\\).\nNote que a fórmula é bem parecida com a do Índice de Similaridade, o que muda é apenas o fato de que o numerador não está ao quadrado. Novamente vamos utilizar o valor padrão para \\(\\lambda\\), 0.\n\n\n\n\n\nAgora que construímos nossa primeira árvore podemos realizar predições. Assim como no XGBoost para regressão, o XGBoost para classificação faz novas predições começando com a predição inicial e somando com o resultado da árvore XGB escalado pela taxa de aprendizado. Porém, assim como com o Gradiente Boosting para classificação, precisamos converter a predição inicial, que é uma probabilidade, para log(chances). A fórmula para converter probabilidades para chances é dada por:\n\\(log \\left( \\frac{p}{1-p} \\right) = log(chances)\\)\nEntão para a predição inicial de 0,5, temos que \\(log \\left( \\frac{0.5}{1-0.5} \\right) = log(1) = 0\\)\nAgora precisamos adicionar esse valor aos valores de saída da árvore XGB multiplicado pela taxa de aprendizado. Essa taxa é chamada de \\(\\epsilon\\) e seu valor padrão é 0,3, o qual iremos usar.\n\n\n\n\n\nOBS: O que as folhas retornarão após esse cálculo serão os log(chances). É preciso, em seguida, converter para probabilidade também.\nFazendo os cálculos da esquerda para a direita, temos que:\n\nPara a 1ª folha, seu valor de saída fica: \\(0 + 0.3 \\times (-2) = -0.6\\)\nPara a 2ª folha, seu valor de saída fica: \\(0 + 0.3 \\times 0 = 0\\)\nPara a 3ª folha, seu valor de saída fica: \\(0 + 0.3 \\times 2 = 0.6\\)\n\nAgora para converter esses valores - que são log(chances) - para probabilidade utilizamos a seguinte fórmula:\n\\(\\text{Probabilidade} = \\frac{e^{\\text{log(chances)}}}{1+e^{\\text{log(chances})}}\\)\nFazendo os cálculos, então, da esquerda para a direita:\n\nPara a 1ª folha, seu valor de saída fica: \\(\\frac{e^{-0.6}}{1+e^{-0.6}}\\)\nPara a 2ª folha, seu valor de saída fica: \\(\\frac{e^{0}}{1+e^{0}}\\)\nPara a 3ª folha, seu valor de saída fica: \\(\\frac{e^{0.6}}{1+e^{0.6}}\\)\n\nAssim, temos as predições da nossa árvore:\n\n\n\n\n\nDessa forma podemos obter novos resíduos utilizando a nova árvore.:\n\ncollege$Residuos2 = college$Probabilidade-c(0.5,0.35,0.5,0.65)\ncollege\n\n# A tibble: 4 × 5\n  Private  Apps Probabilidade Residuos Residuos2\n  &lt;chr&gt;   &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 No       2119             1      0.5      0.5 \n2 Yes      1660             0     -0.5     -0.35\n3 Yes      2694             0     -0.5     -0.5 \n4 No       2785             1      0.5      0.35\n\n\nObserve que os novos resíduos são menores (ou iguais) do que os anteriores, o que significa que estamos indo na direção correta. O próximo passo agora é construir uma nova árvore para os novos resíduos. Note que agora as probabilidades preditas são diferentes (antes era de 0,5 para todos os elementos), o que tornará os cálculos do Índice de Similaridade e dos Valores de Saída mais interessantes, por exemplo. Com a nova árvore construída fazemos novas predições que nos darão resíduos menores ainda. Então construímos uma nova árvore baseada nos novos resíduos e repetimos o processo. Fazemos isso até que os resíduos se tornem super pequenos ou se atingirmos o número máximo de árvores escolhido.\nVamos novamente utilizar o pacote xgboost para construirmos um preditor. Dessa vez iremos construir um classificador e para isso usaremos a base de dados Adult, que se encontra presente no seguinte site: https://archive.ics.uci.edu/ml/index.php. Esse site é um repositório de bases de dados reais, o que torna ele interessante para quem está estudando/trabalhando com aprendizado de máquina.\n\n# Lendo a base de dados como um tibble:\nrenda = \n  dplyr::tibble(read.csv(url(\"https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\")))\nstr(renda)\n\ntibble [32,560 × 15] (S3: tbl_df/tbl/data.frame)\n $ X39          : int [1:32560] 50 38 53 28 37 49 52 31 42 37 ...\n $ State.gov    : chr [1:32560] \" Self-emp-not-inc\" \" Private\" \" Private\" \" Private\" ...\n $ X77516       : int [1:32560] 83311 215646 234721 338409 284582 160187 209642 45781 159449 280464 ...\n $ Bachelors    : chr [1:32560] \" Bachelors\" \" HS-grad\" \" 11th\" \" Bachelors\" ...\n $ X13          : int [1:32560] 13 9 7 13 14 5 9 14 13 10 ...\n $ Never.married: chr [1:32560] \" Married-civ-spouse\" \" Divorced\" \" Married-civ-spouse\" \" Married-civ-spouse\" ...\n $ Adm.clerical : chr [1:32560] \" Exec-managerial\" \" Handlers-cleaners\" \" Handlers-cleaners\" \" Prof-specialty\" ...\n $ Not.in.family: chr [1:32560] \" Husband\" \" Not-in-family\" \" Husband\" \" Wife\" ...\n $ White        : chr [1:32560] \" White\" \" White\" \" Black\" \" Black\" ...\n $ Male         : chr [1:32560] \" Male\" \" Male\" \" Male\" \" Female\" ...\n $ X2174        : int [1:32560] 0 0 0 0 0 0 0 14084 5178 0 ...\n $ X0           : int [1:32560] 0 0 0 0 0 0 0 0 0 0 ...\n $ X40          : int [1:32560] 13 40 40 40 40 16 45 50 40 80 ...\n $ United.States: chr [1:32560] \" United-States\" \" United-States\" \" United-States\" \" Cuba\" ...\n $ X..50K       : chr [1:32560] \" &lt;=50K\" \" &lt;=50K\" \" &lt;=50K\" \" &lt;=50K\" ...\n\n\nEssa base possui algumas informações sobre 32.560 indivíduos, tais como: estado civil, raça, sexo, país de origem, entre outras, e a variável de interesse “X..50K”, que indica se o indivíduo tem uma renda maior ou menor/igual do que 50.000 U.M. (unidades monetárias) por ano. Mas antes de começarmos a construção do preditor repare que a base de dados possui variáveis com variância quase-zero.\n\nlibrary(caret)\nnearZeroVar(renda, saveMetrics = T)\n\n               freqRatio percentUnique zeroVar   nzv\nX39             1.011261   0.224201474   FALSE FALSE\nState.gov       8.931917   0.027641278   FALSE FALSE\nX77516          1.000000  66.483415233   FALSE FALSE\nBachelors       1.440269   0.049140049   FALSE FALSE\nX13             1.440269   0.049140049   FALSE FALSE\nNever.married   1.401985   0.021498771   FALSE FALSE\nAdm.clerical    1.010002   0.046068796   FALSE FALSE\nNot.in.family   1.588752   0.018427518   FALSE FALSE\nWhite           8.903649   0.015356265   FALSE FALSE\nMale            2.022932   0.006142506   FALSE FALSE\nX2174          86.020173   0.365479115   FALSE  TRUE\nX0            153.668317   0.282555283   FALSE  TRUE\nX40             5.397659   0.288697789   FALSE FALSE\nUnited.States  45.363919   0.128992629   FALSE  TRUE\nX..50K          3.152532   0.006142506   FALSE FALSE\n\n\nPodemos ver que as variáveis “X2174”, “X0” e “United.States” são as que possuem variância quase-zero, o que significa que elas não trarão muita informação ao modelo, pois possuem os mesmos valores ou mesmas classificações para muitos indivíduos.\n\nhist(renda$X2174, main = \"Histograma da variável X2174\", xlab = \"Variável X2174\", \n     ylab = \"Frequência\", col = \"blue\")\n\n\n\n\n\n\n\n\n\nhist(renda$X0, main = \"Histograma da variável X0\", xlab = \"Variável X0\", \n     ylab = \"Frequência\", col = \"lightblue\")\n\n\n\n\n\n\n\n\n\n# Tabela com as observações da variável \"United.States\":\n# Repare que a grande maioria dos indivíduos (29.169 de 32.560) é proveniente dos Estados Unidos.\ntable(renda$United.States)\n\n\n                          ?                    Cambodia \n                        583                          19 \n                     Canada                       China \n                        121                          75 \n                   Columbia                        Cuba \n                         59                          95 \n         Dominican-Republic                     Ecuador \n                         70                          28 \n                El-Salvador                     England \n                        106                          90 \n                     France                     Germany \n                         29                         137 \n                     Greece                   Guatemala \n                         29                          64 \n                      Haiti          Holand-Netherlands \n                         44                           1 \n                   Honduras                        Hong \n                         13                          20 \n                    Hungary                       India \n                         13                         100 \n                       Iran                     Ireland \n                         43                          24 \n                      Italy                     Jamaica \n                         73                          81 \n                      Japan                        Laos \n                         62                          18 \n                     Mexico                   Nicaragua \n                        643                          34 \n Outlying-US(Guam-USVI-etc)                        Peru \n                         14                          31 \n                Philippines                      Poland \n                        198                          60 \n                   Portugal                 Puerto-Rico \n                         37                         114 \n                   Scotland                       South \n                         12                          80 \n                     Taiwan                    Thailand \n                         51                          18 \n            Trinadad&Tobago               United-States \n                         19                       29169 \n                    Vietnam                  Yugoslavia \n                         67                          16 \n\n\nDessa forma, vamos remover essas variáveis do banco de dados.\n\n# Vetor com todas as variáveis com variância quase-zero:\nnzv = nearZeroVar(renda)\n\n# Removendo do banco de dados:\nrenda = renda[, -nzv]\n\nAgora precisamos nos atentar a um fator importante da função xgboost: ela só aceita bases de dados com variáveis numéricas. Isso é um problema para a nossa base pois ela possui variáveis do tipo factor. O que fazer nesse caso? A resposta para essa pergunta é simples: vamos transformar essas variáveis em variáveis dummies.\n\n# Criando as variáveis dummies:\ndummies = dummyVars(~ X..50K + State.gov + Bachelors + Never.married + Adm.clerical +\n                      Not.in.family + White + Male, data = renda, fullRank = T)\n\n# Aplicando ao modelo:\nDummies = predict(dummies, newdata = renda)\n\n# Anexando aos dados:\nrenda = cbind(renda, Dummies)\n\n# Excluindo as variáveis categóricas do banco de dados:\nrenda = dplyr::select(renda, -c(X..50K, State.gov, Bachelors, Never.married, \n                                Adm.clerical, Not.in.family, White, Male))\nhead(renda)\n\n  X39 X77516 X13 X40 X..50K &gt;50K State.gov Federal-gov State.gov Local-gov\n1  50  83311  13  13           0                     0                   0\n2  38 215646   9  40           0                     0                   0\n3  53 234721   7  40           0                     0                   0\n4  28 338409  13  40           0                     0                   0\n5  37 284582  14  40           0                     0                   0\n6  49 160187   5  16           0                     0                   0\n  State.gov Never-worked State.gov Private State.gov Self-emp-inc\n1                      0                 0                      0\n2                      0                 1                      0\n3                      0                 1                      0\n4                      0                 1                      0\n5                      0                 1                      0\n6                      0                 1                      0\n  State.gov Self-emp-not-inc State.gov State-gov State.gov Without-pay\n1                          1                   0                     0\n2                          0                   0                     0\n3                          0                   0                     0\n4                          0                   0                     0\n5                          0                   0                     0\n6                          0                   0                     0\n  Bachelors 11th Bachelors 12th Bachelors 1st-4th Bachelors 5th-6th\n1              0              0                 0                 0\n2              0              0                 0                 0\n3              1              0                 0                 0\n4              0              0                 0                 0\n5              0              0                 0                 0\n6              0              0                 0                 0\n  Bachelors 7th-8th Bachelors 9th Bachelors Assoc-acdm Bachelors Assoc-voc\n1                 0             0                    0                   0\n2                 0             0                    0                   0\n3                 0             0                    0                   0\n4                 0             0                    0                   0\n5                 0             0                    0                   0\n6                 0             1                    0                   0\n  Bachelors Bachelors Bachelors Doctorate Bachelors HS-grad Bachelors Masters\n1                   1                   0                 0                 0\n2                   0                   0                 1                 0\n3                   0                   0                 0                 0\n4                   1                   0                 0                 0\n5                   0                   0                 0                 1\n6                   0                   0                 0                 0\n  Bachelors Preschool Bachelors Prof-school Bachelors Some-college\n1                   0                     0                      0\n2                   0                     0                      0\n3                   0                     0                      0\n4                   0                     0                      0\n5                   0                     0                      0\n6                   0                     0                      0\n  Never.married Married-AF-spouse Never.married Married-civ-spouse\n1                               0                                1\n2                               0                                0\n3                               0                                1\n4                               0                                1\n5                               0                                1\n6                               0                                0\n  Never.married Married-spouse-absent Never.married Never-married\n1                                   0                           0\n2                                   0                           0\n3                                   0                           0\n4                                   0                           0\n5                                   0                           0\n6                                   1                           0\n  Never.married Separated Never.married Widowed Adm.clerical Adm-clerical\n1                       0                     0                         0\n2                       0                     0                         0\n3                       0                     0                         0\n4                       0                     0                         0\n5                       0                     0                         0\n6                       0                     0                         0\n  Adm.clerical Armed-Forces Adm.clerical Craft-repair\n1                         0                         0\n2                         0                         0\n3                         0                         0\n4                         0                         0\n5                         0                         0\n6                         0                         0\n  Adm.clerical Exec-managerial Adm.clerical Farming-fishing\n1                            1                            0\n2                            0                            0\n3                            0                            0\n4                            0                            0\n5                            1                            0\n6                            0                            0\n  Adm.clerical Handlers-cleaners Adm.clerical Machine-op-inspct\n1                              0                              0\n2                              1                              0\n3                              1                              0\n4                              0                              0\n5                              0                              0\n6                              0                              0\n  Adm.clerical Other-service Adm.clerical Priv-house-serv\n1                          0                            0\n2                          0                            0\n3                          0                            0\n4                          0                            0\n5                          0                            0\n6                          1                            0\n  Adm.clerical Prof-specialty Adm.clerical Protective-serv Adm.clerical Sales\n1                           0                            0                  0\n2                           0                            0                  0\n3                           0                            0                  0\n4                           1                            0                  0\n5                           0                            0                  0\n6                           0                            0                  0\n  Adm.clerical Tech-support Adm.clerical Transport-moving\n1                         0                             0\n2                         0                             0\n3                         0                             0\n4                         0                             0\n5                         0                             0\n6                         0                             0\n  Not.in.family Not-in-family Not.in.family Other-relative\n1                           0                            0\n2                           1                            0\n3                           0                            0\n4                           0                            0\n5                           0                            0\n6                           1                            0\n  Not.in.family Own-child Not.in.family Unmarried Not.in.family Wife\n1                       0                       0                  0\n2                       0                       0                  0\n3                       0                       0                  0\n4                       0                       0                  1\n5                       0                       0                  1\n6                       0                       0                  0\n  White Asian-Pac-Islander White Black White Other White White Male Male\n1                        0           0           0           1         1\n2                        0           0           0           1         1\n3                        0           1           0           0         1\n4                        0           1           0           0         0\n5                        0           0           0           1         0\n6                        0           1           0           0         0\n\n\nNote que agora todas as nossas variáveis são numéricas e, portanto, a base está pronta para construirmos o preditor. Como sempre, vamos começar dividindo-a em amostra treino e amostra teste.\n\nset.seed(11)\nnoTreino = createDataPartition(renda$`X..50K &gt;50K`, p = 0.75, list = F)\n\n# Lembre-se que temos que transformar a base em uma matriz:\nrenda = as.matrix(renda)\n\ntreino = renda[noTreino, -5]\ntreino_label = renda[noTreino, 5]\n\nteste = renda[-noTreino, -5]\nteste_label = renda[-noTreino, 5]\n\nAgora vamos usar a função xgboost() para criar o modelo.\n\nlibrary(xgboost)\nset.seed(11)\nmodelo = xgboost(data = treino, label = treino_label, lambda = 1, gamma = 0, eta = 0.3,\n                 nrounds = 500, objective = \"binary:logistic\", verbose = 0, max_depth = 3)\n\n# Fazendo a predição:\npredicao = predict(modelo, teste)\nhead(predicao)\n\n[1] 0.846276224 0.001679021 0.220495090 0.008715384 0.843290508 0.730734646\n\n\nO modelo retorna probabilidades, então devemos criar um classificador. Vamos criar um bem simples, da seguinte forma:\n\nProbabilidade acima de 0,5: consideramos que a renda do indivíduo é maior do que 50.000;\nProbabilidade abaixo de 0,5: consideramos que a renda do indivíduo é menor ou igual a 50.000.\n\n\nclassificador = as.numeric(predicao&gt;=0.5)\n\n# Utilizando a matriz de confusão para avaliar o modelo:\n\nconfusionMatrix(data = as.factor(classificador), reference = as.factor(teste_label), positive = \"1\")\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 5654  794\n         1  564 1128\n                                          \n               Accuracy : 0.8332          \n                 95% CI : (0.8249, 0.8412)\n    No Information Rate : 0.7639          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.5176          \n                                          \n Mcnemar's Test P-Value : 5.159e-10       \n                                          \n            Sensitivity : 0.5869          \n            Specificity : 0.9093          \n         Pos Pred Value : 0.6667          \n         Neg Pred Value : 0.8769          \n             Prevalence : 0.2361          \n         Detection Rate : 0.1386          \n   Detection Prevalence : 0.2079          \n      Balanced Accuracy : 0.7481          \n                                          \n       'Positive' Class : 1               \n                                          \n\n\nPodemos usar o pacote DiagrammeR para visualizarmos as árvores construídas pelo modelo. Para isso basta utilizarmos a função xgb.plot.tree() e no argumento trees escolhermos a(s) árvore(s) desejada(s).\n\nlibrary(DiagrammeR)\n\n# Visualizando a segunda árvore construída:\nxgb.plot.tree(model = modelo, trees = 2)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Métodos de Treino Baseados em Árvore</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html",
    "href": "pre-processamento.html",
    "title": "9  Pré-processamento",
    "section": "",
    "text": "9.1 Padronizando os dados\nVamos carregar o banco de dados spam e criar amostras treino e teste.\nlibrary(kernlab)\nlibrary(caret)\ndata(spam)\nset.seed(123)\nnoTreino = createDataPartition(y = spam$type, p = 0.75, list = F)\ntreino = spam[noTreino,]\nteste = spam[-noTreino,]\n# Vamos olhar para a variável capitalAve (média de letras maiúsculas por linha):\nhist(treino$capitalAve,\n     ylab = \"Frequência\",\n     xlab = \"Média de Letras Maiúsculas por Linha\",\n     main = \"Histograma da Média de Letras Maiúsculas por Linha\",\n     col=\"steelblue\", breaks = 4)\nPodemos notar que muitos elementos estão próximos do 0 e os outros estão muito espalhados. Ou seja, essa variável não está trazendo muita informação para o modelo.\nmean(treino$capitalAve)\n\n[1] 4.863991\nsd(treino$capitalAve)\n\n[1] 27.80173\nPodemos ver que a média é pequena mas o desvio padrão é muito grande.\nPara que os algoritmos de machine learning não sejam enganados pelo fato de a variável ser altamente variável, vamos realizar um pré-processamento. Vamos padronizar os dados da variável pela amostra treino pegando cada valor dela e subtraindo pela sua média e dividindo pelo seu desvio padrão.\ntreinoCapAve = treino$capitalAve\n# Padronizando a variável:\ntreinoCapAveP = (treino$capitalAve-mean(treinoCapAve))/sd(treinoCapAve)\n# Média da variável padronizada:\nmean(treinoCapAveP)\n\n[1] 9.854945e-18\nAgora temos média 0.\n# Desvio padrão da variável padronizada:\nsd(treinoCapAveP)\n\n[1] 1\nE variância 1.\n# Vamos olhar para a variável capitalAve (média de letras maiúsculas por linha):\nhist(treinoCapAveP, ylab = \"Frequência\", xlab = \"Média de Letras Maiúsculas por Linha\",\n     main = \"Histograma da Média de Letras Maiúsculas por Linha\",col=\"steelblue\", breaks =4)\nAgora vamos aplicar a mesma transformação na amostra teste. Uma coisa a ter em mente é que ao aplicar um algoritmo no conjunto de teste, só podemos usar os parâmetros que estimamos no conjunto de treino. Ou seja, temos que usar a média e o desvio padrão da variável capitalAve do TREINO.\ntesteCapAve = teste$capitalAve\n# Aplicando a transformação:\ntesteCapAveP = (testeCapAve-mean(treinoCapAve))/sd(treinoCapAve)\n# Média da variável transformada do conjunto teste:\nmean(testeCapAveP)\n\n[1] 0.04713308\n# Desvio Padrão da variável transformada do conjunto teste:\nsd(testeCapAveP)\n\n[1] 1.486708\nNesse caso não obtemos média 0 e variância 1, afinal nós utilizamos os parâmetros do treino para a padronização. Mas podemos notar que os valores estão relativamente próximos disso.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#padronizando-os-dados-com-a-função-preprocess",
    "href": "pre-processamento.html#padronizando-os-dados-com-a-função-preprocess",
    "title": "9  Pré-processamento",
    "section": "9.2 Padronizando os dados com a função PreProcess()",
    "text": "9.2 Padronizando os dados com a função PreProcess()\nPodemos realizar o pré-processamento utilizando a função preProcess() do caret. Ela realiza vários tipos de padronizações, mas para utilizarmos a mesma (subtrair a média e dividir pelo desvio padrão) utilizamos o método c(“center”,“scale”).\n\npadronizacao = preProcess(treino, method = c(\"center\",\"scale\"))\n# O comando acima cria um modelo de padronização. Para ter efeito ele deve ser aplicado nos dados com o\n# comando predict().\ntreinoCapAveS = predict(padronizacao,treino)$capitalAve\n# Média da variável padronizada:\nmean(treinoCapAveS)\n\n[1] 8.680584e-18\n\n\n\n# Desvio padrão da variável padronizada:\nsd(treinoCapAveS)\n\n[1] 1\n\n\nNote que chegamos à mesma média e variância de quando padronizamos sem o preProcess().\nAgora vamos aplicar essa padronização no conjunto de teste:\n\ntesteCapAveS = predict(padronizacao,teste)$capitalAve\n# Note que aplicamos o modelo de padronização criado com a amostra treino.\n\nObserve que também encontramos o mesmo valor da média e desvio padrão de quando padronizamos a variável do conjunto teste anteriormente (sem o preProcess()):\n\nmean(testeCapAveS)\n\n[1] 0.04713308\n\n\n\nsd(testeCapAveS)\n\n[1] 1.486708\n\n\nRepare que também chegamos à mesma média e variância de quando padronizamos sem o preProcess().",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#preprocess-como-argumento-da-função-train",
    "href": "pre-processamento.html#preprocess-como-argumento-da-função-train",
    "title": "9  Pré-processamento",
    "section": "9.3 preProcess como argumento da função train()",
    "text": "9.3 preProcess como argumento da função train()\nTambém podemos utilizar o preProcess dentro da função train da seguinte forma:\n\nmodelo = train(type~., data = treino, preProcess = c(\"center\",\"scale\"), \n               method = \"glm\")\n\nA única limitação é que esse método aplica a padronização em todas as variáveis numéricas.\nObs.: Quando for padronizar uma variável da sua base para depois treinar seu algoritmo, lembre-se que colocar a variável padronizada de volta na sua base.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#tratando-nas",
    "href": "pre-processamento.html#tratando-nas",
    "title": "9  Pré-processamento",
    "section": "9.4 Tratando NA’s",
    "text": "9.4 Tratando NA’s\nÉ muito comum encontrar alguns dados faltantes (NA’s) em uma base de dados. E quando você usa essa base para fazer predições, o algoritmo preditor muitas vezes falha, pois eles são criados para não manipular dados ausentes (na maioria dos casos). O mais recomendado a se fazer é descartar esses dados, principalmente se o número de variáveis for muito pequeno. Porém, em alguns casos, podemos tentar substituir os NA’s da amostra por dados de outros elementos que possuam características parecidas.\nObs: Este é um procedimento que deve ser feito com muito cuidado, apenas em situações de real necessidade.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#método-k-nearest-neighbors-knn",
    "href": "pre-processamento.html#método-k-nearest-neighbors-knn",
    "title": "9  Pré-processamento",
    "section": "9.5 Método k-Nearest Neighbors (knn)",
    "text": "9.5 Método k-Nearest Neighbors (knn)\nO método k-Nearest Neighbors (knn) consiste em procurar os k vizinhos mais próximos do elemento que possui o dado faltante de uma variável de interesse, calculando a média dos valores observados dessa variável dos k vizinhos e imputando esse valor ao elemento.\nVamos utilizar novamente a variável capitalAve do banco de dados spam como exemplo.\n\nlibrary(kernlab)\nlibrary(caret)\ndata(spam)\nset.seed(13343)\n# Criando amostras treino e teste:\nnoTreino = createDataPartition(y = spam$type, p = 0.75, list = F)\ntreino = spam[noTreino,]\nteste = spam[-noTreino,]\n\nOriginalmente, a variável capitalAve não possui NA’s. Mas para o objetivo de compreendermos como esse método funciona, vamos inserir alguns valores NA’s.\n\nNAs = rbinom(dim(treino)[1], size = 1, p = 0.05)==1\n\nO que fizemos com a função rbinom() é criar uma amostra de tamanho “dim(treino)[1]” (quantidade de elementos no treino) de uma variável Bernoulli com probabilidade de sucesso = 0,05. Ou seja, o vetor NAs será um vetor do tipo logical, onde será TRUE se o elemento gerado pela rbinom() é “1” (probabilidade de 0,05 de acontecer) e FALSE se é “0” (probabilidade 0,95 de acontecer).\nPara preservar os valores originais, vamos criar uma nova coluna de dados no treino chamada capAve, que será uma réplica da variável capitalAve, mas com os NA’s inseridos em alguns valores.\n\nlibrary(dplyr)\n\n# Criando a nova variável capAve com os mesmos valores da capitalAve:\ntreino = treino %&gt;% mutate(capAve = capitalAve)\n\n# Inserindo os Na's:\ntreino$capAve[NAs] = NA \n\nAgora podemos aplicar o método KNN para imputar valores aos NA’s, escolhendo essa opção por meio do argumento “method” da função preProcess(). O padrão da função é utilizar k=5.\n\nimput = preProcess(treino, method = \"knnImpute\")\n\n# Aplicando o modelo de pré-processamento ao banco de dados treino:\ntreino$capAve = predict(imput,treino)$capAve\n\n# Olhando para a variável capAve após o pré-processamento:\nhead(treino$capAve, n = 20)\n\n [1] -0.046596612 -0.008173931  0.125003949 -0.052792906 -0.052792906\n [6] -0.067986558 -0.105588726 -0.083548027  0.122825344 -0.115746121\n[11] -0.047388832 -0.093931771 -0.097100652 -0.021245565  0.850451334\n[16] -0.115519772 -0.044418006 -0.015445381 -0.120867259  0.001785409\n\n\nNote que além de ter imputado valores aos NA’s, o comando knnImpute também padronizou os dados.\nObs: O método knnImpute só resolve os NA’s quando os dados faltantes são NUMÉRICOS.\nE se quiséssemos aplicar o método de imputar valores aos NA’s em todo o conjunto de dados, e não só em apenas 1 variável? Também podemos fazer isso utilizando a função preProcess().\nVamos utilizar a base de dados “airquality”, já disponível no R, como exemplo.\n\nbase = airquality\nhead(base, n = 15)\n\n   Ozone Solar.R Wind Temp Month Day\n1     41     190  7.4   67     5   1\n2     36     118  8.0   72     5   2\n3     12     149 12.6   74     5   3\n4     18     313 11.5   62     5   4\n5     NA      NA 14.3   56     5   5\n6     28      NA 14.9   66     5   6\n7     23     299  8.6   65     5   7\n8     19      99 13.8   59     5   8\n9      8      19 20.1   61     5   9\n10    NA     194  8.6   69     5  10\n11     7      NA  6.9   74     5  11\n12    16     256  9.7   69     5  12\n13    11     290  9.2   66     5  13\n14    14     274 10.9   68     5  14\n15    18      65 13.2   58     5  15\n\n\nNote que essa base possui alguns valores NA’s em algumas variáveis.\n\n# Realizando o método KNN para imputar valores aos NA's:\nimput = preProcess(base, method = \"knnImpute\")\n\n# Aplicando o modelo em toda a base de dados:\nnova_base = predict(imput, base)\n\n# Vamos olhar para a nova base:\nhead(nova_base, n = 15)\n\n         Ozone      Solar.R        Wind       Temp     Month        Day\n1  -0.03423409  0.045176154 -0.72594816 -1.1497140 -1.407294 -1.6700195\n2  -0.18580489 -0.754304874 -0.55563883 -0.6214670 -1.407294 -1.5572102\n3  -0.91334473 -0.410083876  0.75006604 -0.4101682 -1.407294 -1.4444009\n4  -0.73145977  1.410956244  0.43783226 -1.6779609 -1.407294 -1.3315917\n5  -0.81027658 -0.221317522  1.23260914 -2.3118573 -1.407294 -1.2187824\n6  -0.42831817  0.007422883  1.40291847 -1.2553634 -1.407294 -1.1059732\n7  -0.57988897  1.255501599 -0.38532950 -1.3610128 -1.407294 -0.9931639\n8  -0.70114561 -0.965279034  1.09068470 -1.9949091 -1.407294 -0.8803546\n9  -1.03460136 -1.853591288  2.87893266 -1.7836103 -1.407294 -0.7675454\n10 -0.64051729  0.089591767 -0.38532950 -0.9384152 -1.407294 -0.6547361\n11 -1.06491552  0.749163615 -0.86787260 -0.4101682 -1.407294 -0.5419268\n12 -0.79208809  0.778033763 -0.07309573 -0.9384152 -1.407294 -0.4291176\n13 -0.94365889  1.155566471 -0.21502017 -1.2553634 -1.407294 -0.3163083\n14 -0.85271641  0.977904020  0.26752293 -1.0440646 -1.407294 -0.2034991\n15 -0.73145977 -1.342811742  0.92037537 -2.1005585 -1.407294 -0.0906898\n\n\nNote que ela não possui mais NA’s e todas as variáveis foram padronizadas.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#utilizando-algoritmos-de-machine-learning-com-o-pacote-mlr",
    "href": "pre-processamento.html#utilizando-algoritmos-de-machine-learning-com-o-pacote-mlr",
    "title": "9  Pré-processamento",
    "section": "9.6 Utilizando Algoritmos de Machine Learning com o Pacote mlr",
    "text": "9.6 Utilizando Algoritmos de Machine Learning com o Pacote mlr\nO pacote mlr fornece vários métodos de imputação para dados faltantes. Alguns desses métodos possuem técnicas padrões como, por exemplo, imputação por uma constante (uma constante fixa, a média, a mediana ou a moda) ou números aleatórios (da distribuição empírica dos dados em consideração ou de uma determinada família de distribuições). Para mais informações sobre como utilizar essas imputações padrões, consulte https://mlr.mlr-org.com/reference/imputations.html.\nEntretanto, a principal vantagem desse pacote - que é o que abordaremos nessa seção - é a possibilidade de imputação dos valores faltantes de uma variável por meio de predições de um algoritmo de machine learning, utilizando como base as outras variáveis. Ou seja, além de aceitar valores faltantes de variáveis numéricas para a imputação, ele também aceita de variáveis categóricas.\nPodemos observar todos os algoritmos de machine learning possíveis de serem utilizados nesse pacote através da função listLearners().\n\nPara um problema de imputação de NA’s de variáveis numéricas temos os seguintes métodos:\n\n\nlibrary(mlr)\nknitr::kable(listLearners(\"regr\", properties = \"missings\")[\"class\"])\n\n\n\n\nclass\n\n\n\n\nregr.bartMachine\n\n\nregr.cforest\n\n\nregr.ctree\n\n\nregr.cubist\n\n\nregr.featureless\n\n\nregr.gbm\n\n\nregr.h2o.deeplearning\n\n\nregr.h2o.gbm\n\n\nregr.h2o.glm\n\n\nregr.h2o.randomForest\n\n\nregr.rpart\n\n\nregr.xgboost\n\n\n\n\n\n\nPara um problema de imputação de NA’s de variáveis categóricas temos os seguintes métodos:\n\n\nknitr::kable(listLearners(\"classif\", properties = \"missings\")[\"class\"])\n\n\n\n\nclass\n\n\n\n\nclassif.bartMachine\n\n\nclassif.boosting\n\n\nclassif.C50\n\n\nclassif.cforest\n\n\nclassif.ctree\n\n\nclassif.featureless\n\n\nclassif.gbm\n\n\nclassif.h2o.deeplearning\n\n\nclassif.h2o.gbm\n\n\nclassif.h2o.glm\n\n\nclassif.h2o.randomForest\n\n\nclassif.J48\n\n\nclassif.JRip\n\n\nclassif.naiveBayes\n\n\nclassif.OneR\n\n\nclassif.PART\n\n\nclassif.rpart\n\n\nclassif.xgboost\n\n\n\n\n\nVamos utilizar o banco de dados “heart” para realizarmos a imputação de dados faltantes categóricos.\n\nlibrary(caret)\nlibrary(readr)\nlibrary(dplyr)\n\nheart = read_csv(\"Heart.csv\")\n\n# Verificando se a base \"heart\" possui valores NA's em alguma variável:\napply(heart, 2, function(x) any(is.na(x)))\n\n          X1          Age          Sex    ChestPain       RestBP         Chol \n       FALSE        FALSE        FALSE        FALSE        FALSE        FALSE \n         Fbs      RestECG        MaxHR        ExAng      Oldpeak        Slope \n       FALSE        FALSE        FALSE        FALSE        FALSE        FALSE \n          Ca         Thal HeartDisease \n       FALSE        FALSE        FALSE \n\n\nNote que a base não possui dados faltantes. Para fins didáticos, vamos inserir alguns na variável “Thal”.\n\n# Criando um novo banco de dados que possuirá NA's:\nnew.heart = as.data.frame(heart)\n\nset.seed(133)\n# Criando um vetor do tipo *logical*, onde será TRUE se o elemento gerado pela rbinom() é \"1\"\n# (probabilidade de 0,1 de acontecer):\nNAs = rbinom(dim(new.heart)[1], size = 1, p = 0.1)==1\n\n# Inserindo os NA's na variável Thal:\nnew.heart$Thal[NAs] = NA \nnew.heart$Thal\n\n  [1] \"fixed\"      \"normal\"     \"reversable\" \"normal\"     \"normal\"    \n  [6] \"normal\"     \"normal\"     \"normal\"     \"reversable\" \"reversable\"\n [11] \"fixed\"      \"normal\"     \"fixed\"      \"reversable\" \"reversable\"\n [16] \"normal\"     \"reversable\" \"normal\"     \"normal\"     \"normal\"    \n [21] NA           \"normal\"     \"normal\"     \"reversable\" \"reversable\"\n [26] \"normal\"     \"normal\"     \"normal\"     \"normal\"     NA          \n [31] \"normal\"     \"reversable\" \"normal\"     \"reversable\" \"normal\"    \n [36] \"normal\"     \"reversable\" \"fixed\"      \"reversable\" \"normal\"    \n [41] \"reversable\" \"reversable\" \"normal\"     \"normal\"     \"normal\"    \n [46] \"reversable\" \"normal\"     \"reversable\" \"normal\"     \"normal\"    \n [51] \"normal\"     \"reversable\" \"normal\"     \"normal\"     \"reversable\"\n [56] NA           \"reversable\" \"reversable\" \"normal\"     \"normal\"    \n [61] NA           \"normal\"     \"reversable\" \"normal\"     NA          \n [66] \"reversable\" \"normal\"     \"reversable\" \"reversable\" \"normal\"    \n [71] \"normal\"     \"reversable\" \"reversable\" \"fixed\"      NA          \n [76] \"normal\"     \"reversable\" \"normal\"     \"normal\"     NA          \n [81] \"normal\"     \"normal\"     \"normal\"     \"reversable\" \"normal\"    \n [86] \"normal\"     \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n [91] \"reversable\" \"reversable\" \"normal\"     \"normal\"     \"reversable\"\n [96] \"reversable\" \"reversable\" \"normal\"     \"normal\"     \"normal\"    \n[101] \"normal\"     NA           \"normal\"     \"reversable\" \"reversable\"\n[106] \"reversable\" \"reversable\" \"reversable\" \"reversable\" \"reversable\"\n[111] \"normal\"     \"fixed\"      \"reversable\" \"reversable\" \"fixed\"     \n[116] \"normal\"     \"normal\"     \"reversable\" \"reversable\" \"reversable\"\n[121] \"reversable\" \"normal\"     NA           \"normal\"     NA          \n[126] \"reversable\" \"reversable\" \"normal\"     \"normal\"     \"reversable\"\n[131] \"reversable\" \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n[136] NA           \"reversable\" \"reversable\" \"normal\"     \"normal\"    \n[141] \"reversable\" \"normal\"     \"reversable\" \"reversable\" \"normal\"    \n[146] \"reversable\" \"normal\"     \"normal\"     NA           \"reversable\"\n[151] \"normal\"     \"reversable\" \"reversable\" \"normal\"     \"normal\"    \n[156] \"reversable\" \"reversable\" NA           \"reversable\" \"reversable\"\n[161] NA           \"normal\"     \"normal\"     \"normal\"     \"reversable\"\n[166] \"normal\"     NA           \"normal\"     \"reversable\" \"reversable\"\n[171] \"normal\"     \"normal\"     \"fixed\"      \"reversable\" \"reversable\"\n[176] \"fixed\"      \"normal\"     \"normal\"     \"reversable\" \"reversable\"\n[181] \"normal\"     \"reversable\" \"normal\"     \"normal\"     \"reversable\"\n[186] \"fixed\"      \"reversable\" \"reversable\" \"normal\"     \"reversable\"\n[191] \"normal\"     \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n[196] \"normal\"     \"normal\"     \"normal\"     \"normal\"     NA          \n[201] \"reversable\" NA           \"reversable\" NA           \"reversable\"\n[206] \"normal\"     \"normal\"     \"normal\"     \"reversable\" \"normal\"    \n[211] \"reversable\" \"normal\"     \"reversable\" \"normal\"     \"normal\"    \n[216] \"normal\"     \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n[221] \"reversable\" \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n[226] \"normal\"     \"normal\"     \"normal\"     \"normal\"     NA          \n[231] \"normal\"     \"normal\"     \"normal\"     \"reversable\" \"reversable\"\n[236] \"normal\"     \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n[241] \"normal\"     \"normal\"     \"normal\"     \"reversable\" \"normal\"    \n[246] \"reversable\" \"normal\"     \"fixed\"      \"reversable\" \"reversable\"\n[251] \"normal\"     \"normal\"     \"normal\"     \"normal\"     \"normal\"    \n[256] \"normal\"     \"reversable\" \"normal\"     \"normal\"     \"normal\"    \n[261] \"normal\"     \"normal\"     \"fixed\"      \"fixed\"      \"reversable\"\n[266] \"normal\"     \"reversable\" \"fixed\"      \"reversable\" \"normal\"    \n[271] \"normal\"     \"reversable\" \"normal\"     \"normal\"     \"normal\"    \n[276] \"normal\"     \"reversable\" \"normal\"     \"reversable\" NA          \n[281] \"reversable\" \"fixed\"      \"fixed\"      \"reversable\" \"normal\"    \n[286] \"reversable\" \"normal\"     \"fixed\"      \"reversable\" \"normal\"    \n[291] NA           \"fixed\"      NA           \"reversable\" \"reversable\"\n[296] \"reversable\" \"normal\"    \n\n\nAgora vamos imputar categorias aos dados faltantes da variável Thal. Iremos fazer isso através da função impute(). O único problema é que possuímos variáveis do tipo character na base de dados, e a função não aceita esta classe nos dados.\n\nstr(new.heart)\n\n'data.frame':   297 obs. of  15 variables:\n $ X1          : num  1 2 3 4 5 6 7 8 9 10 ...\n $ Age         : num  63 67 67 37 41 56 62 57 63 53 ...\n $ Sex         : num  1 1 1 1 0 1 0 0 1 1 ...\n $ ChestPain   : chr  \"typical\" \"asymptomatic\" \"asymptomatic\" \"nonanginal\" ...\n $ RestBP      : num  145 160 120 130 130 120 140 120 130 140 ...\n $ Chol        : num  233 286 229 250 204 236 268 354 254 203 ...\n $ Fbs         : num  1 0 0 0 0 0 0 0 0 1 ...\n $ RestECG     : num  2 2 2 0 2 0 2 0 2 2 ...\n $ MaxHR       : num  150 108 129 187 172 178 160 163 147 155 ...\n $ ExAng       : num  0 1 1 0 0 0 0 1 0 1 ...\n $ Oldpeak     : num  2.3 1.5 2.6 3.5 1.4 0.8 3.6 0.6 1.4 3.1 ...\n $ Slope       : num  3 2 2 3 1 1 3 1 2 3 ...\n $ Ca          : num  0 3 2 0 0 0 2 0 1 0 ...\n $ Thal        : chr  \"fixed\" \"normal\" \"reversable\" \"normal\" ...\n $ HeartDisease: chr  \"No\" \"Yes\" \"Yes\" \"No\" ...\n\n\nVamos transformar essas categorias em fatores.\n\nnew.heart = mutate_if(new.heart, is.character, as.factor)\n\nVamos separar os dados em treino e teste.\n\nset.seed(133)\nnoTreino = caret::createDataPartition(y = new.heart$HeartDisease, p = 0.75,\n                                      list = F)\ntreino = new.heart[noTreino,]\nteste = new.heart[-noTreino,]\n\nAgora vamos imputar os dados no conjunto treino com a função impute().\nPara isso passamos como argumento:\n\nA base de dados que possui os valores faltantes;\nA variável resposta do modelo, ou seja, a variável de interesse para predição. No nosso exemplo essa variável é a “HeartDisease”, que indica se uma pessoa possui uma doença cardíaca;\nLista contendo o método de imputação para cada coluna do banco de dados. Como apenas temos NA’s na variável “Thal”, a lista só possuirá essa variável, seguida do método de imputação que desejamos para ela. Vamos utilizar o método de árvores de decisão (“rpart”).\n\n\ntreino = mlr::impute(treino, target = \"HeartDisease\",\n                     cols = list(Thal = imputeLearner(\"classif.rpart\")))\n\nEssa função retorna uma lista de tamanho 2, onde primeiro se encontra a base de dados após a imputação dos valores e em seguida detalhes do método utilizado.\nVamos olhar para a variável após a imputação dos dados:\n\ntreino$data[,\"Thal\"]\n\n  [1] normal     normal     normal     normal     normal     normal    \n  [7] reversable reversable fixed      normal     fixed      reversable\n [13] normal     normal     normal     reversable reversable reversable\n [19] normal     normal     normal     normal     reversable normal    \n [25] normal     reversable reversable reversable normal     reversable\n [31] reversable normal     reversable normal     normal     normal    \n [37] normal     reversable normal     normal     reversable reversable\n [43] reversable reversable normal     normal     reversable normal    \n [49] reversable reversable reversable normal     normal     reversable\n [55] reversable fixed      reversable normal     reversable normal    \n [61] normal     reversable normal     normal     normal     reversable\n [67] normal     normal     normal     normal     normal     reversable\n [73] reversable normal     reversable reversable reversable normal    \n [79] normal     normal     reversable reversable reversable reversable\n [85] reversable reversable fixed      normal     reversable reversable\n [91] normal     reversable normal     normal     reversable reversable\n [97] normal     normal     normal     normal     normal     reversable\n[103] reversable normal     reversable normal     normal     reversable\n[109] normal     normal     normal     reversable reversable normal    \n[115] normal     reversable reversable normal     normal     normal    \n[121] reversable reversable normal     reversable reversable normal    \n[127] normal     reversable reversable fixed      normal     normal    \n[133] reversable reversable reversable normal     normal     fixed     \n[139] reversable reversable normal     reversable normal     normal    \n[145] normal     normal     normal     normal     reversable reversable\n[151] reversable reversable reversable reversable normal     normal    \n[157] reversable reversable normal     normal     normal     normal    \n[163] normal     reversable normal     normal     normal     normal    \n[169] normal     normal     normal     normal     normal     normal    \n[175] normal     reversable reversable normal     normal     normal    \n[181] normal     normal     reversable reversable normal     fixed     \n[187] reversable normal     normal     normal     normal     normal    \n[193] reversable normal     normal     normal     fixed      fixed     \n[199] reversable normal     reversable fixed      reversable normal    \n[205] reversable normal     normal     normal     normal     reversable\n[211] normal     reversable reversable fixed      fixed      reversable\n[217] normal     normal     fixed      reversable normal     normal    \n[223] normal    \nLevels: fixed normal reversable\n\n\nPara implementarmos esse algoritmo no conjunto de dados teste basta utilizarmos a função reimpute() que implementaremos o mesmo método com os mesmos critérios criados no conjuno treino. Basta passar os seguintes argumentos:\n\nA base de dados que possui os valores faltantes;\nO mesmo método utilizado no treino.\n\nA função retorna a base de dados com os valores imputados.\n\nteste = reimpute(teste, treino$desc)\nteste$Thal\n\n [1] fixed      reversable reversable reversable normal     normal    \n [7] normal     reversable normal     normal     fixed      normal    \n[13] normal     reversable normal     normal     normal     reversable\n[19] normal     normal     normal     normal     normal     reversable\n[25] normal     reversable reversable fixed      normal     reversable\n[31] reversable normal     reversable reversable normal     normal    \n[37] reversable reversable normal     reversable reversable reversable\n[43] reversable normal     normal     fixed      normal     reversable\n[49] normal     normal     normal     normal     normal     reversable\n[55] normal     normal     normal     normal     normal     normal    \n[61] normal     normal     reversable normal     normal     normal    \n[67] normal     normal     reversable normal     fixed      reversable\n[73] reversable reversable\nLevels: fixed normal reversable",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#variável-dummy",
    "href": "pre-processamento.html#variável-dummy",
    "title": "9  Pré-processamento",
    "section": "9.7 Variável Dummy",
    "text": "9.7 Variável Dummy\nAs variáveis dummies ou variáveis indicadoras são formas de agregar informações qualitativas em modelos estatísticos. Ela atribui 1 se o elemento possui determinada característica, ou 0 caso ele não possua. Esse tipo de transformação é importante para modelos de regressão pois ela torna possível trabalhar com variáveis qualitativas.\nVamos utilizar o banco de dados Wage, do pacote ISLR. Este banco possui informações sobre 3000 trabalhadores do sexo masculino de uma região dos EUA, como por exemplo idade (age), tipo de trabalho (jobclass), salário (wage), entre outras. Nosso objetivo é tentar prever o salário do indivíduo em função das outras variáveis.\n\nlibrary(ISLR)\ndata(Wage)\nhead(Wage)\n\n       year age           maritl     race       education             region\n231655 2006  18 1. Never Married 1. White    1. &lt; HS Grad 2. Middle Atlantic\n86582  2004  24 1. Never Married 1. White 4. College Grad 2. Middle Atlantic\n161300 2003  45       2. Married 1. White 3. Some College 2. Middle Atlantic\n155159 2003  43       2. Married 3. Asian 4. College Grad 2. Middle Atlantic\n11443  2005  50      4. Divorced 1. White      2. HS Grad 2. Middle Atlantic\n376662 2008  54       2. Married 1. White 4. College Grad 2. Middle Atlantic\n             jobclass         health health_ins  logwage      wage\n231655  1. Industrial      1. &lt;=Good      2. No 4.318063  75.04315\n86582  2. Information 2. &gt;=Very Good      2. No 4.255273  70.47602\n161300  1. Industrial      1. &lt;=Good     1. Yes 4.875061 130.98218\n155159 2. Information 2. &gt;=Very Good     1. Yes 5.041393 154.68529\n11443  2. Information      1. &lt;=Good     1. Yes 4.318063  75.04315\n376662 2. Information 2. &gt;=Very Good     1. Yes 4.845098 127.11574\n\n\nVamos olhar para 2 variáveis: jobclass (tipo de trabalho) e health_ins (indica se o trabalhador possui plano de saúde).\n\nlibrary(ggplot2)\nWage %&gt;% ggplot(aes(x=jobclass)) + geom_bar(aes(fill=jobclass)) +\n  ylab(\"Frequência\") + guides(fill=F) + theme_light() +\n  ggtitle(\"Gráfico de Barras para o Tipo de Trabalho\")\n\n\n\n\n\n\n\n\n\nWage %&gt;% ggplot(aes(x=health_ins)) + geom_bar(aes(fill=health_ins)) +\n  ylab(\"Frequência\") + guides(fill=F) + theme_light() +\n  ggtitle(\"Gráfico de Barras para o Plano de Saúde\")\n\n\n\n\n\n\n\n\nVamos transformar essas 2 variáveis em dummies por meio da função dummyVars().\n\ndummies = dummyVars(wage~jobclass+health_ins, data = Wage)\n\n# Aplicando ao modelo:\nDummies = predict(dummies, newdata = Wage)\n\nhead(Dummies)\n\n       jobclass.1. Industrial jobclass.2. Information health_ins.1. Yes\n231655                      1                       0                 0\n86582                       0                       1                 0\n161300                      1                       0                 1\n155159                      0                       1                 1\n11443                       0                       1                 1\n376662                      0                       1                 1\n       health_ins.2. No\n231655                1\n86582                 1\n161300                0\n155159                0\n11443                 0\n376662                0\n\n\nNote que ele transforma cada categoria numa variável dummy. Ou seja, como temos 2 categorias para jobclass, cada uma delas vira uma variável dummy. Então se para um indivíduo temos um “1” na categoria “jobclass=industrial”, isso implica que terá um “0” na categoria “jobclass=information”, pois ou o indivíduo tem um tipo de trabalho, ou tem outro. O mesmo vale para as categorias de plano de saúde.\nObserve também que esse novo modelo criado é uma matriz:\n\nclass(Dummies)\n\n[1] \"matrix\" \"array\" \n\n\nVamos anexar esse novo objeto aos dados:\n\nWage_dummy = cbind(Wage, Dummies)\nhead(Wage_dummy)\n\n       year age           maritl     race       education             region\n231655 2006  18 1. Never Married 1. White    1. &lt; HS Grad 2. Middle Atlantic\n86582  2004  24 1. Never Married 1. White 4. College Grad 2. Middle Atlantic\n161300 2003  45       2. Married 1. White 3. Some College 2. Middle Atlantic\n155159 2003  43       2. Married 3. Asian 4. College Grad 2. Middle Atlantic\n11443  2005  50      4. Divorced 1. White      2. HS Grad 2. Middle Atlantic\n376662 2008  54       2. Married 1. White 4. College Grad 2. Middle Atlantic\n             jobclass         health health_ins  logwage      wage\n231655  1. Industrial      1. &lt;=Good      2. No 4.318063  75.04315\n86582  2. Information 2. &gt;=Very Good      2. No 4.255273  70.47602\n161300  1. Industrial      1. &lt;=Good     1. Yes 4.875061 130.98218\n155159 2. Information 2. &gt;=Very Good     1. Yes 5.041393 154.68529\n11443  2. Information      1. &lt;=Good     1. Yes 4.318063  75.04315\n376662 2. Information 2. &gt;=Very Good     1. Yes 4.845098 127.11574\n       jobclass.1. Industrial jobclass.2. Information health_ins.1. Yes\n231655                      1                       0                 0\n86582                       0                       1                 0\n161300                      1                       0                 1\n155159                      0                       1                 1\n11443                       0                       1                 1\n376662                      0                       1                 1\n       health_ins.2. No\n231655                1\n86582                 1\n161300                0\n155159                0\n11443                 0\n376662                0\n\n\n\n# Removendo as variáveis categóricas do banco de dados completo (opcional):\nWage_dummy = dplyr::select(Wage_dummy, -c(jobclass,health_ins))\nhead(Wage_dummy)\n\n       year age           maritl     race       education             region\n231655 2006  18 1. Never Married 1. White    1. &lt; HS Grad 2. Middle Atlantic\n86582  2004  24 1. Never Married 1. White 4. College Grad 2. Middle Atlantic\n161300 2003  45       2. Married 1. White 3. Some College 2. Middle Atlantic\n155159 2003  43       2. Married 3. Asian 4. College Grad 2. Middle Atlantic\n11443  2005  50      4. Divorced 1. White      2. HS Grad 2. Middle Atlantic\n376662 2008  54       2. Married 1. White 4. College Grad 2. Middle Atlantic\n               health  logwage      wage jobclass.1. Industrial\n231655      1. &lt;=Good 4.318063  75.04315                      1\n86582  2. &gt;=Very Good 4.255273  70.47602                      0\n161300      1. &lt;=Good 4.875061 130.98218                      1\n155159 2. &gt;=Very Good 5.041393 154.68529                      0\n11443       1. &lt;=Good 4.318063  75.04315                      0\n376662 2. &gt;=Very Good 4.845098 127.11574                      0\n       jobclass.2. Information health_ins.1. Yes health_ins.2. No\n231655                       0                 0                1\n86582                        1                 0                1\n161300                       0                 1                0\n155159                       1                 1                0\n11443                        1                 1                0\n376662                       1                 1                0\n\n\nComo comentado acima, nós temos uma variável dummy para cada categoria. Como tínhamos 2 variáveis qualitativas, então ficamos com 4 variáveis dummies. Porém, para um modelo de regressão, isso não é necessário. Estaríamos inserindo 2 variáveis com colinearidade perfeita no modelo: jobclass=industrial é totalmente correlacionada com jobclass=information, pois o resultado de uma influencia totalmente o da outra (o mesmo vale para as variáveis do plano de saúde). Dessa forma, vamos remover essas variáveis desnecessárias.\n\nWage_dummy = dplyr::select(Wage_dummy, -c(\"jobclass.2. Information\",\"health_ins.2. No\"))\nhead(Wage_dummy)\n\n       year age           maritl     race       education             region\n231655 2006  18 1. Never Married 1. White    1. &lt; HS Grad 2. Middle Atlantic\n86582  2004  24 1. Never Married 1. White 4. College Grad 2. Middle Atlantic\n161300 2003  45       2. Married 1. White 3. Some College 2. Middle Atlantic\n155159 2003  43       2. Married 3. Asian 4. College Grad 2. Middle Atlantic\n11443  2005  50      4. Divorced 1. White      2. HS Grad 2. Middle Atlantic\n376662 2008  54       2. Married 1. White 4. College Grad 2. Middle Atlantic\n               health  logwage      wage jobclass.1. Industrial\n231655      1. &lt;=Good 4.318063  75.04315                      1\n86582  2. &gt;=Very Good 4.255273  70.47602                      0\n161300      1. &lt;=Good 4.875061 130.98218                      1\n155159 2. &gt;=Very Good 5.041393 154.68529                      0\n11443       1. &lt;=Good 4.318063  75.04315                      0\n376662 2. &gt;=Very Good 4.845098 127.11574                      0\n       health_ins.1. Yes\n231655                 0\n86582                  0\n161300                 1\n155159                 1\n11443                  1\n376662                 1\n\n\nUma maneira mais simples de fazer isso, sem precisarmos retirar cada variável “na mão”, é utilizar o argumento “fullRank=T” da função dummyVars().\n\ndummies = dummyVars(wage~jobclass+health_ins, data = Wage, fullRank = T)\n\n# Aplicando ao modelo:\nDummies = predict(dummies, newdata = Wage)\n\nNote que o comando fullRank=T removeu a primeira variável de cada classificação.\n\n# Anexando esse novo objeto aos dados:\nWage_dummy = cbind(Wage, Dummies)\nhead(Wage_dummy)\n\n       year age           maritl     race       education             region\n231655 2006  18 1. Never Married 1. White    1. &lt; HS Grad 2. Middle Atlantic\n86582  2004  24 1. Never Married 1. White 4. College Grad 2. Middle Atlantic\n161300 2003  45       2. Married 1. White 3. Some College 2. Middle Atlantic\n155159 2003  43       2. Married 3. Asian 4. College Grad 2. Middle Atlantic\n11443  2005  50      4. Divorced 1. White      2. HS Grad 2. Middle Atlantic\n376662 2008  54       2. Married 1. White 4. College Grad 2. Middle Atlantic\n             jobclass         health health_ins  logwage      wage\n231655  1. Industrial      1. &lt;=Good      2. No 4.318063  75.04315\n86582  2. Information 2. &gt;=Very Good      2. No 4.255273  70.47602\n161300  1. Industrial      1. &lt;=Good     1. Yes 4.875061 130.98218\n155159 2. Information 2. &gt;=Very Good     1. Yes 5.041393 154.68529\n11443  2. Information      1. &lt;=Good     1. Yes 4.318063  75.04315\n376662 2. Information 2. &gt;=Very Good     1. Yes 4.845098 127.11574\n       jobclass.2. Information health_ins.2. No\n231655                       0                1\n86582                        1                1\n161300                       0                0\n155159                       1                0\n11443                        1                0\n376662                       1                0",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#variância-zero-ou-quase-zero",
    "href": "pre-processamento.html#variância-zero-ou-quase-zero",
    "title": "9  Pré-processamento",
    "section": "9.8 Variância Zero ou Quase-Zero",
    "text": "9.8 Variância Zero ou Quase-Zero\nAlgumas vezes em um conjunto de dados podemos ter uma variável que assuma somente um único valor para todos os indivíduos, ou seja, ela possui variância zero. Ou podemos ter uma com uma frequência muito alta de um único valor, possuindo, assim, variância quase zero. Essas variáveis não auxiliam na predição, pois possuem o mesmo valor em muitos indivíduos, trazendo, assim, pouca informação ao modelo. Nosso objetivo é, então, identificar essas variáveis, chamadas de near zero covariates, para que possamos removê-las do nosso modelo de predição.\nPara detectar as near zero covariates, utilizamos a função nearZeroVar() do pacote caret. Vamos verificar se há near zero covariates no banco de dados “forestfires”.\nNa função nearZeroVar() passamos primeiro a base de dados a ser analisada, depois o argumento lógico “saveMetrics”, o qual se for “TRUE” retorna todos os detalhes sobre as variáveis da base de dados afim de identificar as near zero covariates. A saída da função fica da seguinte forma:\n\nlibrary(readr)\nlibrary(caret)\nincendio = read_csv(\"forestfires.csv\")\nnearZeroVar(incendio, saveMetrics = T)\n\n       freqRatio percentUnique zeroVar   nzv\nX       1.058140      1.740812   FALSE FALSE\nY       1.624000      1.353965   FALSE FALSE\nmonth   1.069767      2.321083   FALSE FALSE\nday     1.117647      1.353965   FALSE FALSE\nFFMC    1.000000     20.502901   FALSE FALSE\nDMC     1.111111     41.586074   FALSE FALSE\nDC      1.111111     42.359768   FALSE FALSE\nISI     1.095238     23.017408   FALSE FALSE\ntemp    1.000000     37.137331   FALSE FALSE\nRH      1.375000     14.506770   FALSE FALSE\nwind    1.000000      4.061896   FALSE FALSE\nrain  254.500000      1.353965   FALSE  TRUE\narea   82.333333     48.549323   FALSE FALSE\n\n\nNote que é retornado uma tabela onde nas linhas se encontram as variáveis da base de dados e as colunas podemos resumir da seguinte forma:\n\n1ª coluna: a Taxa de Frequência de cada variável. Essa taxa é calculada pela razão de frequências do valor mais comum sobre o segundo valor mais comum.\n2ª coluna: a Porcentagem de Valores Únicos. Ela é calculada utilizando o número de valores distintos sobre o número de amostras.\n3ª coluna: indica se a variável tem variância zero.\n4ª coluna: indica se a variável tem variância quase zero.\n\nPodemos observar que a variável “rain” possui variância quase zero, portanto ela é uma near zero covariate.\n\nhist(incendio$rain, main = \"Histograma da Variável Rain\",\n     xlab = \"Variável Rain\", ylab = \"Frequência\", col = \"purple\")\n\n\n\n\n\n\n\n\nLogo, vamos excluir ela da nossa base de dados. O argumento “saveMetrics=FALSE” (default da função) retorna justamente qual(is) variável(is) do bando de dados é(são) near zero covariate .\n\nnzv = nearZeroVar(incendio)\nNova_incendio = incendio[,-nzv]\nhead(Nova_incendio)\n\n# A tibble: 6 × 12\n      X     Y month day    FFMC   DMC    DC   ISI  temp    RH  wind  area\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     7     5 mar   fri    86.2  26.2  94.3   5.1   8.2    51   6.7     0\n2     7     4 oct   tue    90.6  35.4 669.    6.7  18      33   0.9     0\n3     7     4 oct   sat    90.6  43.7 687.    6.7  14.6    33   1.3     0\n4     8     6 mar   fri    91.7  33.3  77.5   9     8.3    97   4       0\n5     8     6 mar   sun    89.3  51.3 102.    9.6  11.4    99   1.8     0\n6     8     6 aug   sun    92.3  85.3 488    14.7  22.2    29   5.4     0",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#análise-de-componentes-principais-pca",
    "href": "pre-processamento.html#análise-de-componentes-principais-pca",
    "title": "9  Pré-processamento",
    "section": "9.9 Análise de Componentes Principais (PCA)",
    "text": "9.9 Análise de Componentes Principais (PCA)\nMuitas vezes podemos ter variáveis em excesso no nosso banco de dados, o que torna difícil a manipulação das mesmas. A ideia geral do PCA (Principal Components Analysis) é reduzir a quantidade de variáveis, obtendo combinações interpretáveis delas. O PCA faz isso tranformando um conjunto de observações de variáveis possivelmente correlacionadas num conjunto de valores de variáveis linearmente não correlacionadas, chamadas de componentes principais. O número de componentes principais é sempre menor ou igual ao número de variáveis originais, e eles são selecionados de forma que expliquem uma alta porcentagem da variância do modelo.\nPara utilizarmos o PCA no nosso modelo, basta colocar o argumento preProcess=“pca” na função train(). Por padrão, são selecionadas componentes que expliquem 95% da variância.\nVamos aplicar o método “glm”, com a opção “pca”, no banco de dados spam.\n\nlibrary(caret)\nlibrary(kernlab)\ndata(spam)\n# Criando amostras treino/teste.\nset.seed(36)\nnoTreino = createDataPartition(spam$type, p=0.75, list=F)\ntreino = spam[noTreino,] \nteste = spam[-noTreino,]\n\nAgora vamos treinar o nosso modelo com o PCA.\n\nset.seed(887)\nmodelo = caret::train(type ~ ., method = \"glm\", preProcess = \"pca\", data = treino)\n\n# Aplicando o modelo na amostra TESTE:\ntestePCA = predict(modelo, teste)\n\nAvaliando nosso modelo com a matriz de confusão:\n\nconfusionMatrix(teste$type, testePCA)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction nonspam spam\n   nonspam     653   44\n   spam         56  397\n                                          \n               Accuracy : 0.913           \n                 95% CI : (0.8952, 0.9287)\n    No Information Rate : 0.6165          \n    P-Value [Acc &gt; NIR] : &lt;2e-16          \n                                          \n                  Kappa : 0.817           \n                                          \n Mcnemar's Test P-Value : 0.2713          \n                                          \n            Sensitivity : 0.9210          \n            Specificity : 0.9002          \n         Pos Pred Value : 0.9369          \n         Neg Pred Value : 0.8764          \n             Prevalence : 0.6165          \n         Detection Rate : 0.5678          \n   Detection Prevalence : 0.6061          \n      Balanced Accuracy : 0.9106          \n                                          \n       'Positive' Class : nonspam         \n                                          \n\n\nO modelo obteve uma acurácia de 0,93, o que pode-se considerar uma alta taxa de acerto.\nÉ possível alterar a porcentagem de variância a ser explicada pelos componentes nas opções do train().\nPor exemplo, vamos alterar a porcentagem da variância para 60%.\n\ncontrole = trainControl(preProcOptions = list(thresh = 0.6))\n\n# Treinando o modelo 2:\nset.seed(754)\nmodelo2 = caret::train(type ~ ., method = \"glm\", preProcess = \"pca\", data = treino, trControl = controle)\n\n# Aplicando o modelo 2:\ntestePCA2 = predict(modelo2, teste)\n\nAvaliando o segundo modelo pela matriz de confusão:\n\nconfusionMatrix(teste$type,testePCA2)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction nonspam spam\n   nonspam     647   50\n   spam         71  382\n                                          \n               Accuracy : 0.8948          \n                 95% CI : (0.8756, 0.9119)\n    No Information Rate : 0.6243          \n    P-Value [Acc &gt; NIR] : &lt; 2e-16         \n                                          \n                  Kappa : 0.7778          \n                                          \n Mcnemar's Test P-Value : 0.06904         \n                                          \n            Sensitivity : 0.9011          \n            Specificity : 0.8843          \n         Pos Pred Value : 0.9283          \n         Neg Pred Value : 0.8433          \n             Prevalence : 0.6243          \n         Detection Rate : 0.5626          \n   Detection Prevalence : 0.6061          \n      Balanced Accuracy : 0.8927          \n                                          \n       'Positive' Class : nonspam         \n                                          \n\n\nObtemos uma acurácia de 0,92, o que indica também uma alta taxa de acerto, porém um pouco menor que a do modelo anterior. Note que a sensitividade e a especificidade também diminuíram.\nEm geral, são utilizados pontos de corte para a variãncia explicada acima de 0,9.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#pca-fora-da-função-train",
    "href": "pre-processamento.html#pca-fora-da-função-train",
    "title": "9  Pré-processamento",
    "section": "9.10 PCA fora da função train()",
    "text": "9.10 PCA fora da função train()\nPodemos também realizar o pré-processamento fora da função train(). Primeiramente vamos criar o pré-processamento, utilizando a amostra treino.\n\nPCA = preProcess(treino, method = c(\"center\",\"scale\",\"pca\"), thresh = 0.95)\n\nObs: pode-se fixar o número de componentes, utilizando o argumento “pcaComp” ao invés de “thresh”.\nAgora aplicamos o pré-processamento na amostra treino e realizamos o treinamento, utilizando a amostra treino já pré-processada.\n\ntreinoPCA = predict(PCA, treino)\nmodelo = caret::train(type ~ ., data = treinoPCA, method=\"glm\")\n\nAplicando o pré-processamento na amostra teste:\n\ntestePCA = predict(PCA, teste)\n\nPor último, aplicamos o modelo criado com a amostra treino na amostra teste pré-processada.\n\ntesteMod = predict(modelo, testePCA)\n\n# Avaliando o modelo:\nconfusionMatrix(testePCA$type, testeMod)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction nonspam spam\n   nonspam     653   44\n   spam         56  397\n                                          \n               Accuracy : 0.913           \n                 95% CI : (0.8952, 0.9287)\n    No Information Rate : 0.6165          \n    P-Value [Acc &gt; NIR] : &lt;2e-16          \n                                          \n                  Kappa : 0.817           \n                                          \n Mcnemar's Test P-Value : 0.2713          \n                                          \n            Sensitivity : 0.9210          \n            Specificity : 0.9002          \n         Pos Pred Value : 0.9369          \n         Neg Pred Value : 0.8764          \n             Prevalence : 0.6165          \n         Detection Rate : 0.5678          \n   Detection Prevalence : 0.6061          \n      Balanced Accuracy : 0.9106          \n                                          \n       'Positive' Class : nonspam",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "pre-processamento.html#normalização-dos-dados",
    "href": "pre-processamento.html#normalização-dos-dados",
    "title": "9  Pré-processamento",
    "section": "9.11 Normalização dos Dados",
    "text": "9.11 Normalização dos Dados\n\n9.11.1 Transformação de Box-Cox\nA transformação de Box-Cox é uma transformação feita nos dados (contínuos) para tentar normalizá-los. Considerando \\(X_1, X_2, ..., X_n\\) as variáveis do conjunto de dados original, essa transformação consiste em encontrar um \\(\\lambda\\) tal que as variáveis transformadas \\(Y_1, Y_2, ..., Y_n\\) se aproximem de uma distribuição normal com variância constante.\nEssa transformação é dada pela seguinte forma: \\(Y_i = \\frac{X_i^\\lambda-1}{\\lambda}\\), se \\(\\lambda \\neq 0\\). O parâmetro \\(\\lambda\\) é estimado utilizando o método de máxima verossimilhança.\nO método de Box-Cox é o método mais simples e o mais eficiente computacionalmente. Podemos aplicar a transformação de Box-Cox nos dados através da função preProcess().\nObs: a transformação de Box-Cox só pode ser utilizada com dados positivos.\n\ntreinoBC = preProcess(treino, method = \"BoxCox\") \n\n\n\n9.11.2 Outras Transformações\n\n9.11.2.1 Transformação de Yeo-Johnson\nA transformação de Yeo-Johnson é semelhante à transformação de Box-Cox, porém ela aceita preditores com dados nulos e/ou dados negativos. Também podemos aplicá-la aos dados através da função preProcess().\n\ntreinoYJ = preProcess(treino, method = \"YeoJohnson\")\n\n\n\n9.11.2.2 Transformação Exponencial de Manly\nO método exponencial de Manly também consiste em estimar um \\(\\lambda\\) tal que as variáveis transformadas se aproximem de uma distribuição normal. Assim como a transformação de Yeo-Johnson, ela também aceita dados positivos, nulos e negativos. Essa transformação é dada pela seguinte forma:\n\\(Y_i = \\frac{e^{X\\lambda}-1}{\\lambda}\\), se $}.\n\ntreinoEXP = preProcess(treino, method = \"expoTrans\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Pré-processamento</span>"
    ]
  },
  {
    "objectID": "cross-valid.html",
    "href": "cross-valid.html",
    "title": "7  Cross Validation (Validação Cruzada)",
    "section": "",
    "text": "7.1 Alguns Métodos de Reamostragem\nAgora vamos compreender como fatiar os dados para realizarmos a reamostragem. Existem vários métodos possíveis mas vamos nos focar em três: k-fold, repeated k-fold e bootstrap.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Cross Validation (Validação Cruzada)</span>"
    ]
  },
  {
    "objectID": "pred.html",
    "href": "pred.html",
    "title": "3  Predição",
    "section": "",
    "text": "3.1 Pergunta\nO nosso objetivo é responder a uma pergunta de tipo “O dado A é do tipo x ou do tipo y?”. Por exemplo, podemos querer saber se é possível detectar automaticamente se um e-mail é um spam ou um “ham”, isto é, não spam. O que na verdade queremos saber é: “É possível usar características quantitativas para classificar um e-mail como spam?”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Predição</span>"
    ]
  }
]